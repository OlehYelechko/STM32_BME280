
BME280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005eac  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08005f68  08005f68  00015f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006030  08006030  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08006030  08006030  00016030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006038  08006038  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006038  08006038  00016038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800603c  0800603c  0001603c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08006040  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  2000005c  0800609c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  0800609c  0002030c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f243  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021ea  00000000  00000000  0002f30a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c78  00000000  00000000  000314f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009c0  00000000  00000000  00032170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017c77  00000000  00000000  00032b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fbf2  00000000  00000000  0004a7a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098baa  00000000  00000000  0005a399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003190  00000000  00000000  000f2f44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000f60d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000005c 	.word	0x2000005c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005f50 	.word	0x08005f50

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000060 	.word	0x20000060
 8000100:	08005f50 	.word	0x08005f50

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_ldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d115      	bne.n	8000420 <__aeabi_ldivmod+0x30>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d113      	bne.n	8000420 <__aeabi_ldivmod+0x30>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	db06      	blt.n	800040a <__aeabi_ldivmod+0x1a>
 80003fc:	dc01      	bgt.n	8000402 <__aeabi_ldivmod+0x12>
 80003fe:	2800      	cmp	r0, #0
 8000400:	d006      	beq.n	8000410 <__aeabi_ldivmod+0x20>
 8000402:	2000      	movs	r0, #0
 8000404:	43c0      	mvns	r0, r0
 8000406:	0841      	lsrs	r1, r0, #1
 8000408:	e002      	b.n	8000410 <__aeabi_ldivmod+0x20>
 800040a:	2180      	movs	r1, #128	; 0x80
 800040c:	0609      	lsls	r1, r1, #24
 800040e:	2000      	movs	r0, #0
 8000410:	b407      	push	{r0, r1, r2}
 8000412:	4802      	ldr	r0, [pc, #8]	; (800041c <__aeabi_ldivmod+0x2c>)
 8000414:	a101      	add	r1, pc, #4	; (adr r1, 800041c <__aeabi_ldivmod+0x2c>)
 8000416:	1840      	adds	r0, r0, r1
 8000418:	9002      	str	r0, [sp, #8]
 800041a:	bd03      	pop	{r0, r1, pc}
 800041c:	ffffffd1 	.word	0xffffffd1
 8000420:	b403      	push	{r0, r1}
 8000422:	4668      	mov	r0, sp
 8000424:	b501      	push	{r0, lr}
 8000426:	9802      	ldr	r0, [sp, #8]
 8000428:	f000 f920 	bl	800066c <__gnu_ldivmod_helper>
 800042c:	9b01      	ldr	r3, [sp, #4]
 800042e:	469e      	mov	lr, r3
 8000430:	b002      	add	sp, #8
 8000432:	bc0c      	pop	{r2, r3}
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_uldivmod>:
 8000438:	2b00      	cmp	r3, #0
 800043a:	d111      	bne.n	8000460 <__aeabi_uldivmod+0x28>
 800043c:	2a00      	cmp	r2, #0
 800043e:	d10f      	bne.n	8000460 <__aeabi_uldivmod+0x28>
 8000440:	2900      	cmp	r1, #0
 8000442:	d100      	bne.n	8000446 <__aeabi_uldivmod+0xe>
 8000444:	2800      	cmp	r0, #0
 8000446:	d002      	beq.n	800044e <__aeabi_uldivmod+0x16>
 8000448:	2100      	movs	r1, #0
 800044a:	43c9      	mvns	r1, r1
 800044c:	0008      	movs	r0, r1
 800044e:	b407      	push	{r0, r1, r2}
 8000450:	4802      	ldr	r0, [pc, #8]	; (800045c <__aeabi_uldivmod+0x24>)
 8000452:	a102      	add	r1, pc, #8	; (adr r1, 800045c <__aeabi_uldivmod+0x24>)
 8000454:	1840      	adds	r0, r0, r1
 8000456:	9002      	str	r0, [sp, #8]
 8000458:	bd03      	pop	{r0, r1, pc}
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	ffffff91 	.word	0xffffff91
 8000460:	b403      	push	{r0, r1}
 8000462:	4668      	mov	r0, sp
 8000464:	b501      	push	{r0, lr}
 8000466:	9802      	ldr	r0, [sp, #8]
 8000468:	f000 f834 	bl	80004d4 <__udivmoddi4>
 800046c:	9b01      	ldr	r3, [sp, #4]
 800046e:	469e      	mov	lr, r3
 8000470:	b002      	add	sp, #8
 8000472:	bc0c      	pop	{r2, r3}
 8000474:	4770      	bx	lr
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_lmul>:
 8000478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800047a:	46ce      	mov	lr, r9
 800047c:	4699      	mov	r9, r3
 800047e:	0c03      	lsrs	r3, r0, #16
 8000480:	469c      	mov	ip, r3
 8000482:	0413      	lsls	r3, r2, #16
 8000484:	4647      	mov	r7, r8
 8000486:	0c1b      	lsrs	r3, r3, #16
 8000488:	001d      	movs	r5, r3
 800048a:	000e      	movs	r6, r1
 800048c:	4661      	mov	r1, ip
 800048e:	0404      	lsls	r4, r0, #16
 8000490:	0c24      	lsrs	r4, r4, #16
 8000492:	b580      	push	{r7, lr}
 8000494:	0007      	movs	r7, r0
 8000496:	0c10      	lsrs	r0, r2, #16
 8000498:	434b      	muls	r3, r1
 800049a:	4365      	muls	r5, r4
 800049c:	4341      	muls	r1, r0
 800049e:	4360      	muls	r0, r4
 80004a0:	0c2c      	lsrs	r4, r5, #16
 80004a2:	18c0      	adds	r0, r0, r3
 80004a4:	1820      	adds	r0, r4, r0
 80004a6:	468c      	mov	ip, r1
 80004a8:	4283      	cmp	r3, r0
 80004aa:	d903      	bls.n	80004b4 <__aeabi_lmul+0x3c>
 80004ac:	2380      	movs	r3, #128	; 0x80
 80004ae:	025b      	lsls	r3, r3, #9
 80004b0:	4698      	mov	r8, r3
 80004b2:	44c4      	add	ip, r8
 80004b4:	4649      	mov	r1, r9
 80004b6:	4379      	muls	r1, r7
 80004b8:	4356      	muls	r6, r2
 80004ba:	0c03      	lsrs	r3, r0, #16
 80004bc:	042d      	lsls	r5, r5, #16
 80004be:	0c2d      	lsrs	r5, r5, #16
 80004c0:	1989      	adds	r1, r1, r6
 80004c2:	4463      	add	r3, ip
 80004c4:	0400      	lsls	r0, r0, #16
 80004c6:	1940      	adds	r0, r0, r5
 80004c8:	18c9      	adds	r1, r1, r3
 80004ca:	bcc0      	pop	{r6, r7}
 80004cc:	46b9      	mov	r9, r7
 80004ce:	46b0      	mov	r8, r6
 80004d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d2:	46c0      	nop			; (mov r8, r8)

080004d4 <__udivmoddi4>:
 80004d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004d6:	4657      	mov	r7, sl
 80004d8:	464e      	mov	r6, r9
 80004da:	4645      	mov	r5, r8
 80004dc:	46de      	mov	lr, fp
 80004de:	b5e0      	push	{r5, r6, r7, lr}
 80004e0:	0004      	movs	r4, r0
 80004e2:	000d      	movs	r5, r1
 80004e4:	4692      	mov	sl, r2
 80004e6:	4699      	mov	r9, r3
 80004e8:	b083      	sub	sp, #12
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d830      	bhi.n	8000550 <__udivmoddi4+0x7c>
 80004ee:	d02d      	beq.n	800054c <__udivmoddi4+0x78>
 80004f0:	4649      	mov	r1, r9
 80004f2:	4650      	mov	r0, sl
 80004f4:	f000 fcc0 	bl	8000e78 <__clzdi2>
 80004f8:	0029      	movs	r1, r5
 80004fa:	0006      	movs	r6, r0
 80004fc:	0020      	movs	r0, r4
 80004fe:	f000 fcbb 	bl	8000e78 <__clzdi2>
 8000502:	1a33      	subs	r3, r6, r0
 8000504:	4698      	mov	r8, r3
 8000506:	3b20      	subs	r3, #32
 8000508:	d434      	bmi.n	8000574 <__udivmoddi4+0xa0>
 800050a:	469b      	mov	fp, r3
 800050c:	4653      	mov	r3, sl
 800050e:	465a      	mov	r2, fp
 8000510:	4093      	lsls	r3, r2
 8000512:	4642      	mov	r2, r8
 8000514:	001f      	movs	r7, r3
 8000516:	4653      	mov	r3, sl
 8000518:	4093      	lsls	r3, r2
 800051a:	001e      	movs	r6, r3
 800051c:	42af      	cmp	r7, r5
 800051e:	d83b      	bhi.n	8000598 <__udivmoddi4+0xc4>
 8000520:	42af      	cmp	r7, r5
 8000522:	d100      	bne.n	8000526 <__udivmoddi4+0x52>
 8000524:	e079      	b.n	800061a <__udivmoddi4+0x146>
 8000526:	465b      	mov	r3, fp
 8000528:	1ba4      	subs	r4, r4, r6
 800052a:	41bd      	sbcs	r5, r7
 800052c:	2b00      	cmp	r3, #0
 800052e:	da00      	bge.n	8000532 <__udivmoddi4+0x5e>
 8000530:	e076      	b.n	8000620 <__udivmoddi4+0x14c>
 8000532:	2200      	movs	r2, #0
 8000534:	2300      	movs	r3, #0
 8000536:	9200      	str	r2, [sp, #0]
 8000538:	9301      	str	r3, [sp, #4]
 800053a:	2301      	movs	r3, #1
 800053c:	465a      	mov	r2, fp
 800053e:	4093      	lsls	r3, r2
 8000540:	9301      	str	r3, [sp, #4]
 8000542:	2301      	movs	r3, #1
 8000544:	4642      	mov	r2, r8
 8000546:	4093      	lsls	r3, r2
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	e029      	b.n	80005a0 <__udivmoddi4+0xcc>
 800054c:	4282      	cmp	r2, r0
 800054e:	d9cf      	bls.n	80004f0 <__udivmoddi4+0x1c>
 8000550:	2200      	movs	r2, #0
 8000552:	2300      	movs	r3, #0
 8000554:	9200      	str	r2, [sp, #0]
 8000556:	9301      	str	r3, [sp, #4]
 8000558:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <__udivmoddi4+0x8e>
 800055e:	601c      	str	r4, [r3, #0]
 8000560:	605d      	str	r5, [r3, #4]
 8000562:	9800      	ldr	r0, [sp, #0]
 8000564:	9901      	ldr	r1, [sp, #4]
 8000566:	b003      	add	sp, #12
 8000568:	bcf0      	pop	{r4, r5, r6, r7}
 800056a:	46bb      	mov	fp, r7
 800056c:	46b2      	mov	sl, r6
 800056e:	46a9      	mov	r9, r5
 8000570:	46a0      	mov	r8, r4
 8000572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000574:	4642      	mov	r2, r8
 8000576:	469b      	mov	fp, r3
 8000578:	2320      	movs	r3, #32
 800057a:	1a9b      	subs	r3, r3, r2
 800057c:	4652      	mov	r2, sl
 800057e:	40da      	lsrs	r2, r3
 8000580:	4641      	mov	r1, r8
 8000582:	0013      	movs	r3, r2
 8000584:	464a      	mov	r2, r9
 8000586:	408a      	lsls	r2, r1
 8000588:	0017      	movs	r7, r2
 800058a:	4642      	mov	r2, r8
 800058c:	431f      	orrs	r7, r3
 800058e:	4653      	mov	r3, sl
 8000590:	4093      	lsls	r3, r2
 8000592:	001e      	movs	r6, r3
 8000594:	42af      	cmp	r7, r5
 8000596:	d9c3      	bls.n	8000520 <__udivmoddi4+0x4c>
 8000598:	2200      	movs	r2, #0
 800059a:	2300      	movs	r3, #0
 800059c:	9200      	str	r2, [sp, #0]
 800059e:	9301      	str	r3, [sp, #4]
 80005a0:	4643      	mov	r3, r8
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d0d8      	beq.n	8000558 <__udivmoddi4+0x84>
 80005a6:	07fb      	lsls	r3, r7, #31
 80005a8:	0872      	lsrs	r2, r6, #1
 80005aa:	431a      	orrs	r2, r3
 80005ac:	4646      	mov	r6, r8
 80005ae:	087b      	lsrs	r3, r7, #1
 80005b0:	e00e      	b.n	80005d0 <__udivmoddi4+0xfc>
 80005b2:	42ab      	cmp	r3, r5
 80005b4:	d101      	bne.n	80005ba <__udivmoddi4+0xe6>
 80005b6:	42a2      	cmp	r2, r4
 80005b8:	d80c      	bhi.n	80005d4 <__udivmoddi4+0x100>
 80005ba:	1aa4      	subs	r4, r4, r2
 80005bc:	419d      	sbcs	r5, r3
 80005be:	2001      	movs	r0, #1
 80005c0:	1924      	adds	r4, r4, r4
 80005c2:	416d      	adcs	r5, r5
 80005c4:	2100      	movs	r1, #0
 80005c6:	3e01      	subs	r6, #1
 80005c8:	1824      	adds	r4, r4, r0
 80005ca:	414d      	adcs	r5, r1
 80005cc:	2e00      	cmp	r6, #0
 80005ce:	d006      	beq.n	80005de <__udivmoddi4+0x10a>
 80005d0:	42ab      	cmp	r3, r5
 80005d2:	d9ee      	bls.n	80005b2 <__udivmoddi4+0xde>
 80005d4:	3e01      	subs	r6, #1
 80005d6:	1924      	adds	r4, r4, r4
 80005d8:	416d      	adcs	r5, r5
 80005da:	2e00      	cmp	r6, #0
 80005dc:	d1f8      	bne.n	80005d0 <__udivmoddi4+0xfc>
 80005de:	9800      	ldr	r0, [sp, #0]
 80005e0:	9901      	ldr	r1, [sp, #4]
 80005e2:	465b      	mov	r3, fp
 80005e4:	1900      	adds	r0, r0, r4
 80005e6:	4169      	adcs	r1, r5
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	db24      	blt.n	8000636 <__udivmoddi4+0x162>
 80005ec:	002b      	movs	r3, r5
 80005ee:	465a      	mov	r2, fp
 80005f0:	4644      	mov	r4, r8
 80005f2:	40d3      	lsrs	r3, r2
 80005f4:	002a      	movs	r2, r5
 80005f6:	40e2      	lsrs	r2, r4
 80005f8:	001c      	movs	r4, r3
 80005fa:	465b      	mov	r3, fp
 80005fc:	0015      	movs	r5, r2
 80005fe:	2b00      	cmp	r3, #0
 8000600:	db2a      	blt.n	8000658 <__udivmoddi4+0x184>
 8000602:	0026      	movs	r6, r4
 8000604:	409e      	lsls	r6, r3
 8000606:	0033      	movs	r3, r6
 8000608:	0026      	movs	r6, r4
 800060a:	4647      	mov	r7, r8
 800060c:	40be      	lsls	r6, r7
 800060e:	0032      	movs	r2, r6
 8000610:	1a80      	subs	r0, r0, r2
 8000612:	4199      	sbcs	r1, r3
 8000614:	9000      	str	r0, [sp, #0]
 8000616:	9101      	str	r1, [sp, #4]
 8000618:	e79e      	b.n	8000558 <__udivmoddi4+0x84>
 800061a:	42a3      	cmp	r3, r4
 800061c:	d8bc      	bhi.n	8000598 <__udivmoddi4+0xc4>
 800061e:	e782      	b.n	8000526 <__udivmoddi4+0x52>
 8000620:	4642      	mov	r2, r8
 8000622:	2320      	movs	r3, #32
 8000624:	2100      	movs	r1, #0
 8000626:	1a9b      	subs	r3, r3, r2
 8000628:	2200      	movs	r2, #0
 800062a:	9100      	str	r1, [sp, #0]
 800062c:	9201      	str	r2, [sp, #4]
 800062e:	2201      	movs	r2, #1
 8000630:	40da      	lsrs	r2, r3
 8000632:	9201      	str	r2, [sp, #4]
 8000634:	e785      	b.n	8000542 <__udivmoddi4+0x6e>
 8000636:	4642      	mov	r2, r8
 8000638:	2320      	movs	r3, #32
 800063a:	1a9b      	subs	r3, r3, r2
 800063c:	002a      	movs	r2, r5
 800063e:	4646      	mov	r6, r8
 8000640:	409a      	lsls	r2, r3
 8000642:	0023      	movs	r3, r4
 8000644:	40f3      	lsrs	r3, r6
 8000646:	4644      	mov	r4, r8
 8000648:	4313      	orrs	r3, r2
 800064a:	002a      	movs	r2, r5
 800064c:	40e2      	lsrs	r2, r4
 800064e:	001c      	movs	r4, r3
 8000650:	465b      	mov	r3, fp
 8000652:	0015      	movs	r5, r2
 8000654:	2b00      	cmp	r3, #0
 8000656:	dad4      	bge.n	8000602 <__udivmoddi4+0x12e>
 8000658:	4642      	mov	r2, r8
 800065a:	002f      	movs	r7, r5
 800065c:	2320      	movs	r3, #32
 800065e:	0026      	movs	r6, r4
 8000660:	4097      	lsls	r7, r2
 8000662:	1a9b      	subs	r3, r3, r2
 8000664:	40de      	lsrs	r6, r3
 8000666:	003b      	movs	r3, r7
 8000668:	4333      	orrs	r3, r6
 800066a:	e7cd      	b.n	8000608 <__udivmoddi4+0x134>

0800066c <__gnu_ldivmod_helper>:
 800066c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800066e:	46ce      	mov	lr, r9
 8000670:	4647      	mov	r7, r8
 8000672:	b580      	push	{r7, lr}
 8000674:	4691      	mov	r9, r2
 8000676:	4698      	mov	r8, r3
 8000678:	0004      	movs	r4, r0
 800067a:	000d      	movs	r5, r1
 800067c:	f000 fc08 	bl	8000e90 <__divdi3>
 8000680:	0007      	movs	r7, r0
 8000682:	000e      	movs	r6, r1
 8000684:	0002      	movs	r2, r0
 8000686:	000b      	movs	r3, r1
 8000688:	4648      	mov	r0, r9
 800068a:	4641      	mov	r1, r8
 800068c:	f7ff fef4 	bl	8000478 <__aeabi_lmul>
 8000690:	1a24      	subs	r4, r4, r0
 8000692:	418d      	sbcs	r5, r1
 8000694:	9b08      	ldr	r3, [sp, #32]
 8000696:	0038      	movs	r0, r7
 8000698:	0031      	movs	r1, r6
 800069a:	601c      	str	r4, [r3, #0]
 800069c:	605d      	str	r5, [r3, #4]
 800069e:	bcc0      	pop	{r6, r7}
 80006a0:	46b9      	mov	r9, r7
 80006a2:	46b0      	mov	r8, r6
 80006a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006a6:	46c0      	nop			; (mov r8, r8)

080006a8 <__aeabi_ddiv>:
 80006a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006aa:	4657      	mov	r7, sl
 80006ac:	464e      	mov	r6, r9
 80006ae:	4645      	mov	r5, r8
 80006b0:	46de      	mov	lr, fp
 80006b2:	b5e0      	push	{r5, r6, r7, lr}
 80006b4:	030c      	lsls	r4, r1, #12
 80006b6:	001f      	movs	r7, r3
 80006b8:	004b      	lsls	r3, r1, #1
 80006ba:	4681      	mov	r9, r0
 80006bc:	4692      	mov	sl, r2
 80006be:	0005      	movs	r5, r0
 80006c0:	b085      	sub	sp, #20
 80006c2:	0b24      	lsrs	r4, r4, #12
 80006c4:	0d5b      	lsrs	r3, r3, #21
 80006c6:	0fce      	lsrs	r6, r1, #31
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d100      	bne.n	80006ce <__aeabi_ddiv+0x26>
 80006cc:	e152      	b.n	8000974 <__aeabi_ddiv+0x2cc>
 80006ce:	4ad2      	ldr	r2, [pc, #840]	; (8000a18 <__aeabi_ddiv+0x370>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d100      	bne.n	80006d6 <__aeabi_ddiv+0x2e>
 80006d4:	e16e      	b.n	80009b4 <__aeabi_ddiv+0x30c>
 80006d6:	0f42      	lsrs	r2, r0, #29
 80006d8:	00e4      	lsls	r4, r4, #3
 80006da:	4314      	orrs	r4, r2
 80006dc:	2280      	movs	r2, #128	; 0x80
 80006de:	0412      	lsls	r2, r2, #16
 80006e0:	4322      	orrs	r2, r4
 80006e2:	4690      	mov	r8, r2
 80006e4:	4acd      	ldr	r2, [pc, #820]	; (8000a1c <__aeabi_ddiv+0x374>)
 80006e6:	00c5      	lsls	r5, r0, #3
 80006e8:	4693      	mov	fp, r2
 80006ea:	449b      	add	fp, r3
 80006ec:	2300      	movs	r3, #0
 80006ee:	4699      	mov	r9, r3
 80006f0:	9300      	str	r3, [sp, #0]
 80006f2:	033c      	lsls	r4, r7, #12
 80006f4:	007b      	lsls	r3, r7, #1
 80006f6:	4650      	mov	r0, sl
 80006f8:	0b24      	lsrs	r4, r4, #12
 80006fa:	0d5b      	lsrs	r3, r3, #21
 80006fc:	0fff      	lsrs	r7, r7, #31
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d100      	bne.n	8000704 <__aeabi_ddiv+0x5c>
 8000702:	e11a      	b.n	800093a <__aeabi_ddiv+0x292>
 8000704:	4ac4      	ldr	r2, [pc, #784]	; (8000a18 <__aeabi_ddiv+0x370>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d100      	bne.n	800070c <__aeabi_ddiv+0x64>
 800070a:	e15e      	b.n	80009ca <__aeabi_ddiv+0x322>
 800070c:	0f42      	lsrs	r2, r0, #29
 800070e:	00e4      	lsls	r4, r4, #3
 8000710:	4322      	orrs	r2, r4
 8000712:	2480      	movs	r4, #128	; 0x80
 8000714:	0424      	lsls	r4, r4, #16
 8000716:	4314      	orrs	r4, r2
 8000718:	4ac0      	ldr	r2, [pc, #768]	; (8000a1c <__aeabi_ddiv+0x374>)
 800071a:	00c1      	lsls	r1, r0, #3
 800071c:	4694      	mov	ip, r2
 800071e:	465a      	mov	r2, fp
 8000720:	4463      	add	r3, ip
 8000722:	1ad3      	subs	r3, r2, r3
 8000724:	469b      	mov	fp, r3
 8000726:	2000      	movs	r0, #0
 8000728:	0033      	movs	r3, r6
 800072a:	407b      	eors	r3, r7
 800072c:	469a      	mov	sl, r3
 800072e:	464b      	mov	r3, r9
 8000730:	2b0f      	cmp	r3, #15
 8000732:	d827      	bhi.n	8000784 <__aeabi_ddiv+0xdc>
 8000734:	4aba      	ldr	r2, [pc, #744]	; (8000a20 <__aeabi_ddiv+0x378>)
 8000736:	009b      	lsls	r3, r3, #2
 8000738:	58d3      	ldr	r3, [r2, r3]
 800073a:	469f      	mov	pc, r3
 800073c:	46b2      	mov	sl, r6
 800073e:	9b00      	ldr	r3, [sp, #0]
 8000740:	2b02      	cmp	r3, #2
 8000742:	d016      	beq.n	8000772 <__aeabi_ddiv+0xca>
 8000744:	2b03      	cmp	r3, #3
 8000746:	d100      	bne.n	800074a <__aeabi_ddiv+0xa2>
 8000748:	e287      	b.n	8000c5a <__aeabi_ddiv+0x5b2>
 800074a:	2b01      	cmp	r3, #1
 800074c:	d000      	beq.n	8000750 <__aeabi_ddiv+0xa8>
 800074e:	e0d5      	b.n	80008fc <__aeabi_ddiv+0x254>
 8000750:	2300      	movs	r3, #0
 8000752:	2200      	movs	r2, #0
 8000754:	2500      	movs	r5, #0
 8000756:	051b      	lsls	r3, r3, #20
 8000758:	4313      	orrs	r3, r2
 800075a:	4652      	mov	r2, sl
 800075c:	07d2      	lsls	r2, r2, #31
 800075e:	4313      	orrs	r3, r2
 8000760:	0028      	movs	r0, r5
 8000762:	0019      	movs	r1, r3
 8000764:	b005      	add	sp, #20
 8000766:	bcf0      	pop	{r4, r5, r6, r7}
 8000768:	46bb      	mov	fp, r7
 800076a:	46b2      	mov	sl, r6
 800076c:	46a9      	mov	r9, r5
 800076e:	46a0      	mov	r8, r4
 8000770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000772:	2200      	movs	r2, #0
 8000774:	2500      	movs	r5, #0
 8000776:	4ba8      	ldr	r3, [pc, #672]	; (8000a18 <__aeabi_ddiv+0x370>)
 8000778:	e7ed      	b.n	8000756 <__aeabi_ddiv+0xae>
 800077a:	46ba      	mov	sl, r7
 800077c:	46a0      	mov	r8, r4
 800077e:	000d      	movs	r5, r1
 8000780:	9000      	str	r0, [sp, #0]
 8000782:	e7dc      	b.n	800073e <__aeabi_ddiv+0x96>
 8000784:	4544      	cmp	r4, r8
 8000786:	d200      	bcs.n	800078a <__aeabi_ddiv+0xe2>
 8000788:	e1c4      	b.n	8000b14 <__aeabi_ddiv+0x46c>
 800078a:	d100      	bne.n	800078e <__aeabi_ddiv+0xe6>
 800078c:	e1bf      	b.n	8000b0e <__aeabi_ddiv+0x466>
 800078e:	2301      	movs	r3, #1
 8000790:	425b      	negs	r3, r3
 8000792:	469c      	mov	ip, r3
 8000794:	002e      	movs	r6, r5
 8000796:	4640      	mov	r0, r8
 8000798:	2500      	movs	r5, #0
 800079a:	44e3      	add	fp, ip
 800079c:	0223      	lsls	r3, r4, #8
 800079e:	0e0c      	lsrs	r4, r1, #24
 80007a0:	431c      	orrs	r4, r3
 80007a2:	0c1b      	lsrs	r3, r3, #16
 80007a4:	4699      	mov	r9, r3
 80007a6:	0423      	lsls	r3, r4, #16
 80007a8:	020a      	lsls	r2, r1, #8
 80007aa:	0c1f      	lsrs	r7, r3, #16
 80007ac:	4649      	mov	r1, r9
 80007ae:	9200      	str	r2, [sp, #0]
 80007b0:	9701      	str	r7, [sp, #4]
 80007b2:	f7ff fd2d 	bl	8000210 <__aeabi_uidivmod>
 80007b6:	0002      	movs	r2, r0
 80007b8:	437a      	muls	r2, r7
 80007ba:	040b      	lsls	r3, r1, #16
 80007bc:	0c31      	lsrs	r1, r6, #16
 80007be:	4680      	mov	r8, r0
 80007c0:	4319      	orrs	r1, r3
 80007c2:	428a      	cmp	r2, r1
 80007c4:	d907      	bls.n	80007d6 <__aeabi_ddiv+0x12e>
 80007c6:	2301      	movs	r3, #1
 80007c8:	425b      	negs	r3, r3
 80007ca:	469c      	mov	ip, r3
 80007cc:	1909      	adds	r1, r1, r4
 80007ce:	44e0      	add	r8, ip
 80007d0:	428c      	cmp	r4, r1
 80007d2:	d800      	bhi.n	80007d6 <__aeabi_ddiv+0x12e>
 80007d4:	e201      	b.n	8000bda <__aeabi_ddiv+0x532>
 80007d6:	1a88      	subs	r0, r1, r2
 80007d8:	4649      	mov	r1, r9
 80007da:	f7ff fd19 	bl	8000210 <__aeabi_uidivmod>
 80007de:	9a01      	ldr	r2, [sp, #4]
 80007e0:	0436      	lsls	r6, r6, #16
 80007e2:	4342      	muls	r2, r0
 80007e4:	0409      	lsls	r1, r1, #16
 80007e6:	0c36      	lsrs	r6, r6, #16
 80007e8:	0003      	movs	r3, r0
 80007ea:	430e      	orrs	r6, r1
 80007ec:	42b2      	cmp	r2, r6
 80007ee:	d904      	bls.n	80007fa <__aeabi_ddiv+0x152>
 80007f0:	1936      	adds	r6, r6, r4
 80007f2:	3b01      	subs	r3, #1
 80007f4:	42b4      	cmp	r4, r6
 80007f6:	d800      	bhi.n	80007fa <__aeabi_ddiv+0x152>
 80007f8:	e1e9      	b.n	8000bce <__aeabi_ddiv+0x526>
 80007fa:	1ab0      	subs	r0, r6, r2
 80007fc:	4642      	mov	r2, r8
 80007fe:	9e00      	ldr	r6, [sp, #0]
 8000800:	0412      	lsls	r2, r2, #16
 8000802:	431a      	orrs	r2, r3
 8000804:	0c33      	lsrs	r3, r6, #16
 8000806:	001f      	movs	r7, r3
 8000808:	0c11      	lsrs	r1, r2, #16
 800080a:	4690      	mov	r8, r2
 800080c:	9302      	str	r3, [sp, #8]
 800080e:	0413      	lsls	r3, r2, #16
 8000810:	0432      	lsls	r2, r6, #16
 8000812:	0c16      	lsrs	r6, r2, #16
 8000814:	0032      	movs	r2, r6
 8000816:	0c1b      	lsrs	r3, r3, #16
 8000818:	435a      	muls	r2, r3
 800081a:	9603      	str	r6, [sp, #12]
 800081c:	437b      	muls	r3, r7
 800081e:	434e      	muls	r6, r1
 8000820:	4379      	muls	r1, r7
 8000822:	0c17      	lsrs	r7, r2, #16
 8000824:	46bc      	mov	ip, r7
 8000826:	199b      	adds	r3, r3, r6
 8000828:	4463      	add	r3, ip
 800082a:	429e      	cmp	r6, r3
 800082c:	d903      	bls.n	8000836 <__aeabi_ddiv+0x18e>
 800082e:	2680      	movs	r6, #128	; 0x80
 8000830:	0276      	lsls	r6, r6, #9
 8000832:	46b4      	mov	ip, r6
 8000834:	4461      	add	r1, ip
 8000836:	0c1e      	lsrs	r6, r3, #16
 8000838:	1871      	adds	r1, r6, r1
 800083a:	0416      	lsls	r6, r2, #16
 800083c:	041b      	lsls	r3, r3, #16
 800083e:	0c36      	lsrs	r6, r6, #16
 8000840:	199e      	adds	r6, r3, r6
 8000842:	4288      	cmp	r0, r1
 8000844:	d302      	bcc.n	800084c <__aeabi_ddiv+0x1a4>
 8000846:	d112      	bne.n	800086e <__aeabi_ddiv+0x1c6>
 8000848:	42b5      	cmp	r5, r6
 800084a:	d210      	bcs.n	800086e <__aeabi_ddiv+0x1c6>
 800084c:	4643      	mov	r3, r8
 800084e:	1e5a      	subs	r2, r3, #1
 8000850:	9b00      	ldr	r3, [sp, #0]
 8000852:	469c      	mov	ip, r3
 8000854:	4465      	add	r5, ip
 8000856:	001f      	movs	r7, r3
 8000858:	429d      	cmp	r5, r3
 800085a:	419b      	sbcs	r3, r3
 800085c:	425b      	negs	r3, r3
 800085e:	191b      	adds	r3, r3, r4
 8000860:	18c0      	adds	r0, r0, r3
 8000862:	4284      	cmp	r4, r0
 8000864:	d200      	bcs.n	8000868 <__aeabi_ddiv+0x1c0>
 8000866:	e19e      	b.n	8000ba6 <__aeabi_ddiv+0x4fe>
 8000868:	d100      	bne.n	800086c <__aeabi_ddiv+0x1c4>
 800086a:	e199      	b.n	8000ba0 <__aeabi_ddiv+0x4f8>
 800086c:	4690      	mov	r8, r2
 800086e:	1bae      	subs	r6, r5, r6
 8000870:	42b5      	cmp	r5, r6
 8000872:	41ad      	sbcs	r5, r5
 8000874:	1a40      	subs	r0, r0, r1
 8000876:	426d      	negs	r5, r5
 8000878:	1b40      	subs	r0, r0, r5
 800087a:	4284      	cmp	r4, r0
 800087c:	d100      	bne.n	8000880 <__aeabi_ddiv+0x1d8>
 800087e:	e1d2      	b.n	8000c26 <__aeabi_ddiv+0x57e>
 8000880:	4649      	mov	r1, r9
 8000882:	f7ff fcc5 	bl	8000210 <__aeabi_uidivmod>
 8000886:	9a01      	ldr	r2, [sp, #4]
 8000888:	040b      	lsls	r3, r1, #16
 800088a:	4342      	muls	r2, r0
 800088c:	0c31      	lsrs	r1, r6, #16
 800088e:	0005      	movs	r5, r0
 8000890:	4319      	orrs	r1, r3
 8000892:	428a      	cmp	r2, r1
 8000894:	d900      	bls.n	8000898 <__aeabi_ddiv+0x1f0>
 8000896:	e16c      	b.n	8000b72 <__aeabi_ddiv+0x4ca>
 8000898:	1a88      	subs	r0, r1, r2
 800089a:	4649      	mov	r1, r9
 800089c:	f7ff fcb8 	bl	8000210 <__aeabi_uidivmod>
 80008a0:	9a01      	ldr	r2, [sp, #4]
 80008a2:	0436      	lsls	r6, r6, #16
 80008a4:	4342      	muls	r2, r0
 80008a6:	0409      	lsls	r1, r1, #16
 80008a8:	0c36      	lsrs	r6, r6, #16
 80008aa:	0003      	movs	r3, r0
 80008ac:	430e      	orrs	r6, r1
 80008ae:	42b2      	cmp	r2, r6
 80008b0:	d900      	bls.n	80008b4 <__aeabi_ddiv+0x20c>
 80008b2:	e153      	b.n	8000b5c <__aeabi_ddiv+0x4b4>
 80008b4:	9803      	ldr	r0, [sp, #12]
 80008b6:	1ab6      	subs	r6, r6, r2
 80008b8:	0002      	movs	r2, r0
 80008ba:	042d      	lsls	r5, r5, #16
 80008bc:	431d      	orrs	r5, r3
 80008be:	9f02      	ldr	r7, [sp, #8]
 80008c0:	042b      	lsls	r3, r5, #16
 80008c2:	0c1b      	lsrs	r3, r3, #16
 80008c4:	435a      	muls	r2, r3
 80008c6:	437b      	muls	r3, r7
 80008c8:	469c      	mov	ip, r3
 80008ca:	0c29      	lsrs	r1, r5, #16
 80008cc:	4348      	muls	r0, r1
 80008ce:	0c13      	lsrs	r3, r2, #16
 80008d0:	4484      	add	ip, r0
 80008d2:	4463      	add	r3, ip
 80008d4:	4379      	muls	r1, r7
 80008d6:	4298      	cmp	r0, r3
 80008d8:	d903      	bls.n	80008e2 <__aeabi_ddiv+0x23a>
 80008da:	2080      	movs	r0, #128	; 0x80
 80008dc:	0240      	lsls	r0, r0, #9
 80008de:	4684      	mov	ip, r0
 80008e0:	4461      	add	r1, ip
 80008e2:	0c18      	lsrs	r0, r3, #16
 80008e4:	0412      	lsls	r2, r2, #16
 80008e6:	041b      	lsls	r3, r3, #16
 80008e8:	0c12      	lsrs	r2, r2, #16
 80008ea:	1840      	adds	r0, r0, r1
 80008ec:	189b      	adds	r3, r3, r2
 80008ee:	4286      	cmp	r6, r0
 80008f0:	d200      	bcs.n	80008f4 <__aeabi_ddiv+0x24c>
 80008f2:	e100      	b.n	8000af6 <__aeabi_ddiv+0x44e>
 80008f4:	d100      	bne.n	80008f8 <__aeabi_ddiv+0x250>
 80008f6:	e0fb      	b.n	8000af0 <__aeabi_ddiv+0x448>
 80008f8:	2301      	movs	r3, #1
 80008fa:	431d      	orrs	r5, r3
 80008fc:	4b49      	ldr	r3, [pc, #292]	; (8000a24 <__aeabi_ddiv+0x37c>)
 80008fe:	445b      	add	r3, fp
 8000900:	2b00      	cmp	r3, #0
 8000902:	dc00      	bgt.n	8000906 <__aeabi_ddiv+0x25e>
 8000904:	e0aa      	b.n	8000a5c <__aeabi_ddiv+0x3b4>
 8000906:	076a      	lsls	r2, r5, #29
 8000908:	d000      	beq.n	800090c <__aeabi_ddiv+0x264>
 800090a:	e13d      	b.n	8000b88 <__aeabi_ddiv+0x4e0>
 800090c:	08e9      	lsrs	r1, r5, #3
 800090e:	4642      	mov	r2, r8
 8000910:	01d2      	lsls	r2, r2, #7
 8000912:	d506      	bpl.n	8000922 <__aeabi_ddiv+0x27a>
 8000914:	4642      	mov	r2, r8
 8000916:	4b44      	ldr	r3, [pc, #272]	; (8000a28 <__aeabi_ddiv+0x380>)
 8000918:	401a      	ands	r2, r3
 800091a:	2380      	movs	r3, #128	; 0x80
 800091c:	4690      	mov	r8, r2
 800091e:	00db      	lsls	r3, r3, #3
 8000920:	445b      	add	r3, fp
 8000922:	4a42      	ldr	r2, [pc, #264]	; (8000a2c <__aeabi_ddiv+0x384>)
 8000924:	4293      	cmp	r3, r2
 8000926:	dd00      	ble.n	800092a <__aeabi_ddiv+0x282>
 8000928:	e723      	b.n	8000772 <__aeabi_ddiv+0xca>
 800092a:	4642      	mov	r2, r8
 800092c:	055b      	lsls	r3, r3, #21
 800092e:	0755      	lsls	r5, r2, #29
 8000930:	0252      	lsls	r2, r2, #9
 8000932:	430d      	orrs	r5, r1
 8000934:	0b12      	lsrs	r2, r2, #12
 8000936:	0d5b      	lsrs	r3, r3, #21
 8000938:	e70d      	b.n	8000756 <__aeabi_ddiv+0xae>
 800093a:	4651      	mov	r1, sl
 800093c:	4321      	orrs	r1, r4
 800093e:	d100      	bne.n	8000942 <__aeabi_ddiv+0x29a>
 8000940:	e07c      	b.n	8000a3c <__aeabi_ddiv+0x394>
 8000942:	2c00      	cmp	r4, #0
 8000944:	d100      	bne.n	8000948 <__aeabi_ddiv+0x2a0>
 8000946:	e0fb      	b.n	8000b40 <__aeabi_ddiv+0x498>
 8000948:	0020      	movs	r0, r4
 800094a:	f000 fa77 	bl	8000e3c <__clzsi2>
 800094e:	0002      	movs	r2, r0
 8000950:	3a0b      	subs	r2, #11
 8000952:	231d      	movs	r3, #29
 8000954:	1a9b      	subs	r3, r3, r2
 8000956:	4652      	mov	r2, sl
 8000958:	0001      	movs	r1, r0
 800095a:	40da      	lsrs	r2, r3
 800095c:	4653      	mov	r3, sl
 800095e:	3908      	subs	r1, #8
 8000960:	408b      	lsls	r3, r1
 8000962:	408c      	lsls	r4, r1
 8000964:	0019      	movs	r1, r3
 8000966:	4314      	orrs	r4, r2
 8000968:	4b31      	ldr	r3, [pc, #196]	; (8000a30 <__aeabi_ddiv+0x388>)
 800096a:	4458      	add	r0, fp
 800096c:	469b      	mov	fp, r3
 800096e:	4483      	add	fp, r0
 8000970:	2000      	movs	r0, #0
 8000972:	e6d9      	b.n	8000728 <__aeabi_ddiv+0x80>
 8000974:	0003      	movs	r3, r0
 8000976:	4323      	orrs	r3, r4
 8000978:	4698      	mov	r8, r3
 800097a:	d044      	beq.n	8000a06 <__aeabi_ddiv+0x35e>
 800097c:	2c00      	cmp	r4, #0
 800097e:	d100      	bne.n	8000982 <__aeabi_ddiv+0x2da>
 8000980:	e0cf      	b.n	8000b22 <__aeabi_ddiv+0x47a>
 8000982:	0020      	movs	r0, r4
 8000984:	f000 fa5a 	bl	8000e3c <__clzsi2>
 8000988:	0001      	movs	r1, r0
 800098a:	0002      	movs	r2, r0
 800098c:	390b      	subs	r1, #11
 800098e:	231d      	movs	r3, #29
 8000990:	1a5b      	subs	r3, r3, r1
 8000992:	4649      	mov	r1, r9
 8000994:	0010      	movs	r0, r2
 8000996:	40d9      	lsrs	r1, r3
 8000998:	3808      	subs	r0, #8
 800099a:	4084      	lsls	r4, r0
 800099c:	000b      	movs	r3, r1
 800099e:	464d      	mov	r5, r9
 80009a0:	4323      	orrs	r3, r4
 80009a2:	4698      	mov	r8, r3
 80009a4:	4085      	lsls	r5, r0
 80009a6:	4b23      	ldr	r3, [pc, #140]	; (8000a34 <__aeabi_ddiv+0x38c>)
 80009a8:	1a9b      	subs	r3, r3, r2
 80009aa:	469b      	mov	fp, r3
 80009ac:	2300      	movs	r3, #0
 80009ae:	4699      	mov	r9, r3
 80009b0:	9300      	str	r3, [sp, #0]
 80009b2:	e69e      	b.n	80006f2 <__aeabi_ddiv+0x4a>
 80009b4:	0002      	movs	r2, r0
 80009b6:	4322      	orrs	r2, r4
 80009b8:	4690      	mov	r8, r2
 80009ba:	d11d      	bne.n	80009f8 <__aeabi_ddiv+0x350>
 80009bc:	2208      	movs	r2, #8
 80009be:	469b      	mov	fp, r3
 80009c0:	2302      	movs	r3, #2
 80009c2:	2500      	movs	r5, #0
 80009c4:	4691      	mov	r9, r2
 80009c6:	9300      	str	r3, [sp, #0]
 80009c8:	e693      	b.n	80006f2 <__aeabi_ddiv+0x4a>
 80009ca:	4651      	mov	r1, sl
 80009cc:	4321      	orrs	r1, r4
 80009ce:	d109      	bne.n	80009e4 <__aeabi_ddiv+0x33c>
 80009d0:	2302      	movs	r3, #2
 80009d2:	464a      	mov	r2, r9
 80009d4:	431a      	orrs	r2, r3
 80009d6:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <__aeabi_ddiv+0x390>)
 80009d8:	4691      	mov	r9, r2
 80009da:	469c      	mov	ip, r3
 80009dc:	2400      	movs	r4, #0
 80009de:	2002      	movs	r0, #2
 80009e0:	44e3      	add	fp, ip
 80009e2:	e6a1      	b.n	8000728 <__aeabi_ddiv+0x80>
 80009e4:	2303      	movs	r3, #3
 80009e6:	464a      	mov	r2, r9
 80009e8:	431a      	orrs	r2, r3
 80009ea:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <__aeabi_ddiv+0x390>)
 80009ec:	4691      	mov	r9, r2
 80009ee:	469c      	mov	ip, r3
 80009f0:	4651      	mov	r1, sl
 80009f2:	2003      	movs	r0, #3
 80009f4:	44e3      	add	fp, ip
 80009f6:	e697      	b.n	8000728 <__aeabi_ddiv+0x80>
 80009f8:	220c      	movs	r2, #12
 80009fa:	469b      	mov	fp, r3
 80009fc:	2303      	movs	r3, #3
 80009fe:	46a0      	mov	r8, r4
 8000a00:	4691      	mov	r9, r2
 8000a02:	9300      	str	r3, [sp, #0]
 8000a04:	e675      	b.n	80006f2 <__aeabi_ddiv+0x4a>
 8000a06:	2304      	movs	r3, #4
 8000a08:	4699      	mov	r9, r3
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	469b      	mov	fp, r3
 8000a0e:	3301      	adds	r3, #1
 8000a10:	2500      	movs	r5, #0
 8000a12:	9300      	str	r3, [sp, #0]
 8000a14:	e66d      	b.n	80006f2 <__aeabi_ddiv+0x4a>
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	000007ff 	.word	0x000007ff
 8000a1c:	fffffc01 	.word	0xfffffc01
 8000a20:	08005f68 	.word	0x08005f68
 8000a24:	000003ff 	.word	0x000003ff
 8000a28:	feffffff 	.word	0xfeffffff
 8000a2c:	000007fe 	.word	0x000007fe
 8000a30:	000003f3 	.word	0x000003f3
 8000a34:	fffffc0d 	.word	0xfffffc0d
 8000a38:	fffff801 	.word	0xfffff801
 8000a3c:	464a      	mov	r2, r9
 8000a3e:	2301      	movs	r3, #1
 8000a40:	431a      	orrs	r2, r3
 8000a42:	4691      	mov	r9, r2
 8000a44:	2400      	movs	r4, #0
 8000a46:	2001      	movs	r0, #1
 8000a48:	e66e      	b.n	8000728 <__aeabi_ddiv+0x80>
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	2280      	movs	r2, #128	; 0x80
 8000a4e:	469a      	mov	sl, r3
 8000a50:	2500      	movs	r5, #0
 8000a52:	4b88      	ldr	r3, [pc, #544]	; (8000c74 <__aeabi_ddiv+0x5cc>)
 8000a54:	0312      	lsls	r2, r2, #12
 8000a56:	e67e      	b.n	8000756 <__aeabi_ddiv+0xae>
 8000a58:	2501      	movs	r5, #1
 8000a5a:	426d      	negs	r5, r5
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	1ad2      	subs	r2, r2, r3
 8000a60:	2a38      	cmp	r2, #56	; 0x38
 8000a62:	dd00      	ble.n	8000a66 <__aeabi_ddiv+0x3be>
 8000a64:	e674      	b.n	8000750 <__aeabi_ddiv+0xa8>
 8000a66:	2a1f      	cmp	r2, #31
 8000a68:	dc00      	bgt.n	8000a6c <__aeabi_ddiv+0x3c4>
 8000a6a:	e0bd      	b.n	8000be8 <__aeabi_ddiv+0x540>
 8000a6c:	211f      	movs	r1, #31
 8000a6e:	4249      	negs	r1, r1
 8000a70:	1acb      	subs	r3, r1, r3
 8000a72:	4641      	mov	r1, r8
 8000a74:	40d9      	lsrs	r1, r3
 8000a76:	000b      	movs	r3, r1
 8000a78:	2a20      	cmp	r2, #32
 8000a7a:	d004      	beq.n	8000a86 <__aeabi_ddiv+0x3de>
 8000a7c:	4641      	mov	r1, r8
 8000a7e:	4a7e      	ldr	r2, [pc, #504]	; (8000c78 <__aeabi_ddiv+0x5d0>)
 8000a80:	445a      	add	r2, fp
 8000a82:	4091      	lsls	r1, r2
 8000a84:	430d      	orrs	r5, r1
 8000a86:	0029      	movs	r1, r5
 8000a88:	1e4a      	subs	r2, r1, #1
 8000a8a:	4191      	sbcs	r1, r2
 8000a8c:	4319      	orrs	r1, r3
 8000a8e:	2307      	movs	r3, #7
 8000a90:	001d      	movs	r5, r3
 8000a92:	2200      	movs	r2, #0
 8000a94:	400d      	ands	r5, r1
 8000a96:	420b      	tst	r3, r1
 8000a98:	d100      	bne.n	8000a9c <__aeabi_ddiv+0x3f4>
 8000a9a:	e0d0      	b.n	8000c3e <__aeabi_ddiv+0x596>
 8000a9c:	220f      	movs	r2, #15
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	400a      	ands	r2, r1
 8000aa2:	2a04      	cmp	r2, #4
 8000aa4:	d100      	bne.n	8000aa8 <__aeabi_ddiv+0x400>
 8000aa6:	e0c7      	b.n	8000c38 <__aeabi_ddiv+0x590>
 8000aa8:	1d0a      	adds	r2, r1, #4
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4189      	sbcs	r1, r1
 8000aae:	4249      	negs	r1, r1
 8000ab0:	185b      	adds	r3, r3, r1
 8000ab2:	0011      	movs	r1, r2
 8000ab4:	021a      	lsls	r2, r3, #8
 8000ab6:	d400      	bmi.n	8000aba <__aeabi_ddiv+0x412>
 8000ab8:	e0be      	b.n	8000c38 <__aeabi_ddiv+0x590>
 8000aba:	2301      	movs	r3, #1
 8000abc:	2200      	movs	r2, #0
 8000abe:	2500      	movs	r5, #0
 8000ac0:	e649      	b.n	8000756 <__aeabi_ddiv+0xae>
 8000ac2:	2280      	movs	r2, #128	; 0x80
 8000ac4:	4643      	mov	r3, r8
 8000ac6:	0312      	lsls	r2, r2, #12
 8000ac8:	4213      	tst	r3, r2
 8000aca:	d008      	beq.n	8000ade <__aeabi_ddiv+0x436>
 8000acc:	4214      	tst	r4, r2
 8000ace:	d106      	bne.n	8000ade <__aeabi_ddiv+0x436>
 8000ad0:	4322      	orrs	r2, r4
 8000ad2:	0312      	lsls	r2, r2, #12
 8000ad4:	46ba      	mov	sl, r7
 8000ad6:	000d      	movs	r5, r1
 8000ad8:	4b66      	ldr	r3, [pc, #408]	; (8000c74 <__aeabi_ddiv+0x5cc>)
 8000ada:	0b12      	lsrs	r2, r2, #12
 8000adc:	e63b      	b.n	8000756 <__aeabi_ddiv+0xae>
 8000ade:	2280      	movs	r2, #128	; 0x80
 8000ae0:	4643      	mov	r3, r8
 8000ae2:	0312      	lsls	r2, r2, #12
 8000ae4:	431a      	orrs	r2, r3
 8000ae6:	0312      	lsls	r2, r2, #12
 8000ae8:	46b2      	mov	sl, r6
 8000aea:	4b62      	ldr	r3, [pc, #392]	; (8000c74 <__aeabi_ddiv+0x5cc>)
 8000aec:	0b12      	lsrs	r2, r2, #12
 8000aee:	e632      	b.n	8000756 <__aeabi_ddiv+0xae>
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d100      	bne.n	8000af6 <__aeabi_ddiv+0x44e>
 8000af4:	e702      	b.n	80008fc <__aeabi_ddiv+0x254>
 8000af6:	19a6      	adds	r6, r4, r6
 8000af8:	1e6a      	subs	r2, r5, #1
 8000afa:	42a6      	cmp	r6, r4
 8000afc:	d200      	bcs.n	8000b00 <__aeabi_ddiv+0x458>
 8000afe:	e089      	b.n	8000c14 <__aeabi_ddiv+0x56c>
 8000b00:	4286      	cmp	r6, r0
 8000b02:	d200      	bcs.n	8000b06 <__aeabi_ddiv+0x45e>
 8000b04:	e09f      	b.n	8000c46 <__aeabi_ddiv+0x59e>
 8000b06:	d100      	bne.n	8000b0a <__aeabi_ddiv+0x462>
 8000b08:	e0af      	b.n	8000c6a <__aeabi_ddiv+0x5c2>
 8000b0a:	0015      	movs	r5, r2
 8000b0c:	e6f4      	b.n	80008f8 <__aeabi_ddiv+0x250>
 8000b0e:	42a9      	cmp	r1, r5
 8000b10:	d900      	bls.n	8000b14 <__aeabi_ddiv+0x46c>
 8000b12:	e63c      	b.n	800078e <__aeabi_ddiv+0xe6>
 8000b14:	4643      	mov	r3, r8
 8000b16:	07de      	lsls	r6, r3, #31
 8000b18:	0858      	lsrs	r0, r3, #1
 8000b1a:	086b      	lsrs	r3, r5, #1
 8000b1c:	431e      	orrs	r6, r3
 8000b1e:	07ed      	lsls	r5, r5, #31
 8000b20:	e63c      	b.n	800079c <__aeabi_ddiv+0xf4>
 8000b22:	f000 f98b 	bl	8000e3c <__clzsi2>
 8000b26:	0001      	movs	r1, r0
 8000b28:	0002      	movs	r2, r0
 8000b2a:	3115      	adds	r1, #21
 8000b2c:	3220      	adds	r2, #32
 8000b2e:	291c      	cmp	r1, #28
 8000b30:	dc00      	bgt.n	8000b34 <__aeabi_ddiv+0x48c>
 8000b32:	e72c      	b.n	800098e <__aeabi_ddiv+0x2e6>
 8000b34:	464b      	mov	r3, r9
 8000b36:	3808      	subs	r0, #8
 8000b38:	4083      	lsls	r3, r0
 8000b3a:	2500      	movs	r5, #0
 8000b3c:	4698      	mov	r8, r3
 8000b3e:	e732      	b.n	80009a6 <__aeabi_ddiv+0x2fe>
 8000b40:	f000 f97c 	bl	8000e3c <__clzsi2>
 8000b44:	0003      	movs	r3, r0
 8000b46:	001a      	movs	r2, r3
 8000b48:	3215      	adds	r2, #21
 8000b4a:	3020      	adds	r0, #32
 8000b4c:	2a1c      	cmp	r2, #28
 8000b4e:	dc00      	bgt.n	8000b52 <__aeabi_ddiv+0x4aa>
 8000b50:	e6ff      	b.n	8000952 <__aeabi_ddiv+0x2aa>
 8000b52:	4654      	mov	r4, sl
 8000b54:	3b08      	subs	r3, #8
 8000b56:	2100      	movs	r1, #0
 8000b58:	409c      	lsls	r4, r3
 8000b5a:	e705      	b.n	8000968 <__aeabi_ddiv+0x2c0>
 8000b5c:	1936      	adds	r6, r6, r4
 8000b5e:	3b01      	subs	r3, #1
 8000b60:	42b4      	cmp	r4, r6
 8000b62:	d900      	bls.n	8000b66 <__aeabi_ddiv+0x4be>
 8000b64:	e6a6      	b.n	80008b4 <__aeabi_ddiv+0x20c>
 8000b66:	42b2      	cmp	r2, r6
 8000b68:	d800      	bhi.n	8000b6c <__aeabi_ddiv+0x4c4>
 8000b6a:	e6a3      	b.n	80008b4 <__aeabi_ddiv+0x20c>
 8000b6c:	1e83      	subs	r3, r0, #2
 8000b6e:	1936      	adds	r6, r6, r4
 8000b70:	e6a0      	b.n	80008b4 <__aeabi_ddiv+0x20c>
 8000b72:	1909      	adds	r1, r1, r4
 8000b74:	3d01      	subs	r5, #1
 8000b76:	428c      	cmp	r4, r1
 8000b78:	d900      	bls.n	8000b7c <__aeabi_ddiv+0x4d4>
 8000b7a:	e68d      	b.n	8000898 <__aeabi_ddiv+0x1f0>
 8000b7c:	428a      	cmp	r2, r1
 8000b7e:	d800      	bhi.n	8000b82 <__aeabi_ddiv+0x4da>
 8000b80:	e68a      	b.n	8000898 <__aeabi_ddiv+0x1f0>
 8000b82:	1e85      	subs	r5, r0, #2
 8000b84:	1909      	adds	r1, r1, r4
 8000b86:	e687      	b.n	8000898 <__aeabi_ddiv+0x1f0>
 8000b88:	220f      	movs	r2, #15
 8000b8a:	402a      	ands	r2, r5
 8000b8c:	2a04      	cmp	r2, #4
 8000b8e:	d100      	bne.n	8000b92 <__aeabi_ddiv+0x4ea>
 8000b90:	e6bc      	b.n	800090c <__aeabi_ddiv+0x264>
 8000b92:	1d29      	adds	r1, r5, #4
 8000b94:	42a9      	cmp	r1, r5
 8000b96:	41ad      	sbcs	r5, r5
 8000b98:	426d      	negs	r5, r5
 8000b9a:	08c9      	lsrs	r1, r1, #3
 8000b9c:	44a8      	add	r8, r5
 8000b9e:	e6b6      	b.n	800090e <__aeabi_ddiv+0x266>
 8000ba0:	42af      	cmp	r7, r5
 8000ba2:	d900      	bls.n	8000ba6 <__aeabi_ddiv+0x4fe>
 8000ba4:	e662      	b.n	800086c <__aeabi_ddiv+0x1c4>
 8000ba6:	4281      	cmp	r1, r0
 8000ba8:	d804      	bhi.n	8000bb4 <__aeabi_ddiv+0x50c>
 8000baa:	d000      	beq.n	8000bae <__aeabi_ddiv+0x506>
 8000bac:	e65e      	b.n	800086c <__aeabi_ddiv+0x1c4>
 8000bae:	42ae      	cmp	r6, r5
 8000bb0:	d800      	bhi.n	8000bb4 <__aeabi_ddiv+0x50c>
 8000bb2:	e65b      	b.n	800086c <__aeabi_ddiv+0x1c4>
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	425b      	negs	r3, r3
 8000bb8:	469c      	mov	ip, r3
 8000bba:	9b00      	ldr	r3, [sp, #0]
 8000bbc:	44e0      	add	r8, ip
 8000bbe:	469c      	mov	ip, r3
 8000bc0:	4465      	add	r5, ip
 8000bc2:	429d      	cmp	r5, r3
 8000bc4:	419b      	sbcs	r3, r3
 8000bc6:	425b      	negs	r3, r3
 8000bc8:	191b      	adds	r3, r3, r4
 8000bca:	18c0      	adds	r0, r0, r3
 8000bcc:	e64f      	b.n	800086e <__aeabi_ddiv+0x1c6>
 8000bce:	42b2      	cmp	r2, r6
 8000bd0:	d800      	bhi.n	8000bd4 <__aeabi_ddiv+0x52c>
 8000bd2:	e612      	b.n	80007fa <__aeabi_ddiv+0x152>
 8000bd4:	1e83      	subs	r3, r0, #2
 8000bd6:	1936      	adds	r6, r6, r4
 8000bd8:	e60f      	b.n	80007fa <__aeabi_ddiv+0x152>
 8000bda:	428a      	cmp	r2, r1
 8000bdc:	d800      	bhi.n	8000be0 <__aeabi_ddiv+0x538>
 8000bde:	e5fa      	b.n	80007d6 <__aeabi_ddiv+0x12e>
 8000be0:	1e83      	subs	r3, r0, #2
 8000be2:	4698      	mov	r8, r3
 8000be4:	1909      	adds	r1, r1, r4
 8000be6:	e5f6      	b.n	80007d6 <__aeabi_ddiv+0x12e>
 8000be8:	4b24      	ldr	r3, [pc, #144]	; (8000c7c <__aeabi_ddiv+0x5d4>)
 8000bea:	0028      	movs	r0, r5
 8000bec:	445b      	add	r3, fp
 8000bee:	4641      	mov	r1, r8
 8000bf0:	409d      	lsls	r5, r3
 8000bf2:	4099      	lsls	r1, r3
 8000bf4:	40d0      	lsrs	r0, r2
 8000bf6:	1e6b      	subs	r3, r5, #1
 8000bf8:	419d      	sbcs	r5, r3
 8000bfa:	4643      	mov	r3, r8
 8000bfc:	4301      	orrs	r1, r0
 8000bfe:	4329      	orrs	r1, r5
 8000c00:	40d3      	lsrs	r3, r2
 8000c02:	074a      	lsls	r2, r1, #29
 8000c04:	d100      	bne.n	8000c08 <__aeabi_ddiv+0x560>
 8000c06:	e755      	b.n	8000ab4 <__aeabi_ddiv+0x40c>
 8000c08:	220f      	movs	r2, #15
 8000c0a:	400a      	ands	r2, r1
 8000c0c:	2a04      	cmp	r2, #4
 8000c0e:	d000      	beq.n	8000c12 <__aeabi_ddiv+0x56a>
 8000c10:	e74a      	b.n	8000aa8 <__aeabi_ddiv+0x400>
 8000c12:	e74f      	b.n	8000ab4 <__aeabi_ddiv+0x40c>
 8000c14:	0015      	movs	r5, r2
 8000c16:	4286      	cmp	r6, r0
 8000c18:	d000      	beq.n	8000c1c <__aeabi_ddiv+0x574>
 8000c1a:	e66d      	b.n	80008f8 <__aeabi_ddiv+0x250>
 8000c1c:	9a00      	ldr	r2, [sp, #0]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d000      	beq.n	8000c24 <__aeabi_ddiv+0x57c>
 8000c22:	e669      	b.n	80008f8 <__aeabi_ddiv+0x250>
 8000c24:	e66a      	b.n	80008fc <__aeabi_ddiv+0x254>
 8000c26:	4b16      	ldr	r3, [pc, #88]	; (8000c80 <__aeabi_ddiv+0x5d8>)
 8000c28:	445b      	add	r3, fp
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	dc00      	bgt.n	8000c30 <__aeabi_ddiv+0x588>
 8000c2e:	e713      	b.n	8000a58 <__aeabi_ddiv+0x3b0>
 8000c30:	2501      	movs	r5, #1
 8000c32:	2100      	movs	r1, #0
 8000c34:	44a8      	add	r8, r5
 8000c36:	e66a      	b.n	800090e <__aeabi_ddiv+0x266>
 8000c38:	075d      	lsls	r5, r3, #29
 8000c3a:	025b      	lsls	r3, r3, #9
 8000c3c:	0b1a      	lsrs	r2, r3, #12
 8000c3e:	08c9      	lsrs	r1, r1, #3
 8000c40:	2300      	movs	r3, #0
 8000c42:	430d      	orrs	r5, r1
 8000c44:	e587      	b.n	8000756 <__aeabi_ddiv+0xae>
 8000c46:	9900      	ldr	r1, [sp, #0]
 8000c48:	3d02      	subs	r5, #2
 8000c4a:	004a      	lsls	r2, r1, #1
 8000c4c:	428a      	cmp	r2, r1
 8000c4e:	41bf      	sbcs	r7, r7
 8000c50:	427f      	negs	r7, r7
 8000c52:	193f      	adds	r7, r7, r4
 8000c54:	19f6      	adds	r6, r6, r7
 8000c56:	9200      	str	r2, [sp, #0]
 8000c58:	e7dd      	b.n	8000c16 <__aeabi_ddiv+0x56e>
 8000c5a:	2280      	movs	r2, #128	; 0x80
 8000c5c:	4643      	mov	r3, r8
 8000c5e:	0312      	lsls	r2, r2, #12
 8000c60:	431a      	orrs	r2, r3
 8000c62:	0312      	lsls	r2, r2, #12
 8000c64:	4b03      	ldr	r3, [pc, #12]	; (8000c74 <__aeabi_ddiv+0x5cc>)
 8000c66:	0b12      	lsrs	r2, r2, #12
 8000c68:	e575      	b.n	8000756 <__aeabi_ddiv+0xae>
 8000c6a:	9900      	ldr	r1, [sp, #0]
 8000c6c:	4299      	cmp	r1, r3
 8000c6e:	d3ea      	bcc.n	8000c46 <__aeabi_ddiv+0x59e>
 8000c70:	0015      	movs	r5, r2
 8000c72:	e7d3      	b.n	8000c1c <__aeabi_ddiv+0x574>
 8000c74:	000007ff 	.word	0x000007ff
 8000c78:	0000043e 	.word	0x0000043e
 8000c7c:	0000041e 	.word	0x0000041e
 8000c80:	000003ff 	.word	0x000003ff

08000c84 <__aeabi_i2d>:
 8000c84:	b570      	push	{r4, r5, r6, lr}
 8000c86:	2800      	cmp	r0, #0
 8000c88:	d016      	beq.n	8000cb8 <__aeabi_i2d+0x34>
 8000c8a:	17c3      	asrs	r3, r0, #31
 8000c8c:	18c5      	adds	r5, r0, r3
 8000c8e:	405d      	eors	r5, r3
 8000c90:	0fc4      	lsrs	r4, r0, #31
 8000c92:	0028      	movs	r0, r5
 8000c94:	f000 f8d2 	bl	8000e3c <__clzsi2>
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <__aeabi_i2d+0x5c>)
 8000c9a:	1a1b      	subs	r3, r3, r0
 8000c9c:	280a      	cmp	r0, #10
 8000c9e:	dc16      	bgt.n	8000cce <__aeabi_i2d+0x4a>
 8000ca0:	0002      	movs	r2, r0
 8000ca2:	002e      	movs	r6, r5
 8000ca4:	3215      	adds	r2, #21
 8000ca6:	4096      	lsls	r6, r2
 8000ca8:	220b      	movs	r2, #11
 8000caa:	1a12      	subs	r2, r2, r0
 8000cac:	40d5      	lsrs	r5, r2
 8000cae:	055b      	lsls	r3, r3, #21
 8000cb0:	032d      	lsls	r5, r5, #12
 8000cb2:	0b2d      	lsrs	r5, r5, #12
 8000cb4:	0d5b      	lsrs	r3, r3, #21
 8000cb6:	e003      	b.n	8000cc0 <__aeabi_i2d+0x3c>
 8000cb8:	2400      	movs	r4, #0
 8000cba:	2300      	movs	r3, #0
 8000cbc:	2500      	movs	r5, #0
 8000cbe:	2600      	movs	r6, #0
 8000cc0:	051b      	lsls	r3, r3, #20
 8000cc2:	432b      	orrs	r3, r5
 8000cc4:	07e4      	lsls	r4, r4, #31
 8000cc6:	4323      	orrs	r3, r4
 8000cc8:	0030      	movs	r0, r6
 8000cca:	0019      	movs	r1, r3
 8000ccc:	bd70      	pop	{r4, r5, r6, pc}
 8000cce:	380b      	subs	r0, #11
 8000cd0:	4085      	lsls	r5, r0
 8000cd2:	055b      	lsls	r3, r3, #21
 8000cd4:	032d      	lsls	r5, r5, #12
 8000cd6:	2600      	movs	r6, #0
 8000cd8:	0b2d      	lsrs	r5, r5, #12
 8000cda:	0d5b      	lsrs	r3, r3, #21
 8000cdc:	e7f0      	b.n	8000cc0 <__aeabi_i2d+0x3c>
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	0000041e 	.word	0x0000041e

08000ce4 <__aeabi_ui2d>:
 8000ce4:	b510      	push	{r4, lr}
 8000ce6:	1e04      	subs	r4, r0, #0
 8000ce8:	d010      	beq.n	8000d0c <__aeabi_ui2d+0x28>
 8000cea:	f000 f8a7 	bl	8000e3c <__clzsi2>
 8000cee:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <__aeabi_ui2d+0x48>)
 8000cf0:	1a1b      	subs	r3, r3, r0
 8000cf2:	280a      	cmp	r0, #10
 8000cf4:	dc11      	bgt.n	8000d1a <__aeabi_ui2d+0x36>
 8000cf6:	220b      	movs	r2, #11
 8000cf8:	0021      	movs	r1, r4
 8000cfa:	1a12      	subs	r2, r2, r0
 8000cfc:	40d1      	lsrs	r1, r2
 8000cfe:	3015      	adds	r0, #21
 8000d00:	030a      	lsls	r2, r1, #12
 8000d02:	055b      	lsls	r3, r3, #21
 8000d04:	4084      	lsls	r4, r0
 8000d06:	0b12      	lsrs	r2, r2, #12
 8000d08:	0d5b      	lsrs	r3, r3, #21
 8000d0a:	e001      	b.n	8000d10 <__aeabi_ui2d+0x2c>
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	2200      	movs	r2, #0
 8000d10:	051b      	lsls	r3, r3, #20
 8000d12:	4313      	orrs	r3, r2
 8000d14:	0020      	movs	r0, r4
 8000d16:	0019      	movs	r1, r3
 8000d18:	bd10      	pop	{r4, pc}
 8000d1a:	0022      	movs	r2, r4
 8000d1c:	380b      	subs	r0, #11
 8000d1e:	4082      	lsls	r2, r0
 8000d20:	055b      	lsls	r3, r3, #21
 8000d22:	0312      	lsls	r2, r2, #12
 8000d24:	2400      	movs	r4, #0
 8000d26:	0b12      	lsrs	r2, r2, #12
 8000d28:	0d5b      	lsrs	r3, r3, #21
 8000d2a:	e7f1      	b.n	8000d10 <__aeabi_ui2d+0x2c>
 8000d2c:	0000041e 	.word	0x0000041e

08000d30 <__aeabi_d2f>:
 8000d30:	0002      	movs	r2, r0
 8000d32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d34:	004b      	lsls	r3, r1, #1
 8000d36:	030d      	lsls	r5, r1, #12
 8000d38:	0f40      	lsrs	r0, r0, #29
 8000d3a:	0d5b      	lsrs	r3, r3, #21
 8000d3c:	0fcc      	lsrs	r4, r1, #31
 8000d3e:	0a6d      	lsrs	r5, r5, #9
 8000d40:	493a      	ldr	r1, [pc, #232]	; (8000e2c <__aeabi_d2f+0xfc>)
 8000d42:	4305      	orrs	r5, r0
 8000d44:	1c58      	adds	r0, r3, #1
 8000d46:	00d7      	lsls	r7, r2, #3
 8000d48:	4208      	tst	r0, r1
 8000d4a:	d00a      	beq.n	8000d62 <__aeabi_d2f+0x32>
 8000d4c:	4938      	ldr	r1, [pc, #224]	; (8000e30 <__aeabi_d2f+0x100>)
 8000d4e:	1859      	adds	r1, r3, r1
 8000d50:	29fe      	cmp	r1, #254	; 0xfe
 8000d52:	dd16      	ble.n	8000d82 <__aeabi_d2f+0x52>
 8000d54:	20ff      	movs	r0, #255	; 0xff
 8000d56:	2200      	movs	r2, #0
 8000d58:	05c0      	lsls	r0, r0, #23
 8000d5a:	4310      	orrs	r0, r2
 8000d5c:	07e4      	lsls	r4, r4, #31
 8000d5e:	4320      	orrs	r0, r4
 8000d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d106      	bne.n	8000d74 <__aeabi_d2f+0x44>
 8000d66:	433d      	orrs	r5, r7
 8000d68:	d026      	beq.n	8000db8 <__aeabi_d2f+0x88>
 8000d6a:	2205      	movs	r2, #5
 8000d6c:	0192      	lsls	r2, r2, #6
 8000d6e:	0a52      	lsrs	r2, r2, #9
 8000d70:	b2d8      	uxtb	r0, r3
 8000d72:	e7f1      	b.n	8000d58 <__aeabi_d2f+0x28>
 8000d74:	432f      	orrs	r7, r5
 8000d76:	d0ed      	beq.n	8000d54 <__aeabi_d2f+0x24>
 8000d78:	2280      	movs	r2, #128	; 0x80
 8000d7a:	03d2      	lsls	r2, r2, #15
 8000d7c:	20ff      	movs	r0, #255	; 0xff
 8000d7e:	432a      	orrs	r2, r5
 8000d80:	e7ea      	b.n	8000d58 <__aeabi_d2f+0x28>
 8000d82:	2900      	cmp	r1, #0
 8000d84:	dd1b      	ble.n	8000dbe <__aeabi_d2f+0x8e>
 8000d86:	0192      	lsls	r2, r2, #6
 8000d88:	1e50      	subs	r0, r2, #1
 8000d8a:	4182      	sbcs	r2, r0
 8000d8c:	00ed      	lsls	r5, r5, #3
 8000d8e:	0f7f      	lsrs	r7, r7, #29
 8000d90:	432a      	orrs	r2, r5
 8000d92:	433a      	orrs	r2, r7
 8000d94:	0753      	lsls	r3, r2, #29
 8000d96:	d047      	beq.n	8000e28 <__aeabi_d2f+0xf8>
 8000d98:	230f      	movs	r3, #15
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	2b04      	cmp	r3, #4
 8000d9e:	d000      	beq.n	8000da2 <__aeabi_d2f+0x72>
 8000da0:	3204      	adds	r2, #4
 8000da2:	2380      	movs	r3, #128	; 0x80
 8000da4:	04db      	lsls	r3, r3, #19
 8000da6:	4013      	ands	r3, r2
 8000da8:	d03e      	beq.n	8000e28 <__aeabi_d2f+0xf8>
 8000daa:	1c48      	adds	r0, r1, #1
 8000dac:	29fe      	cmp	r1, #254	; 0xfe
 8000dae:	d0d1      	beq.n	8000d54 <__aeabi_d2f+0x24>
 8000db0:	0192      	lsls	r2, r2, #6
 8000db2:	0a52      	lsrs	r2, r2, #9
 8000db4:	b2c0      	uxtb	r0, r0
 8000db6:	e7cf      	b.n	8000d58 <__aeabi_d2f+0x28>
 8000db8:	2000      	movs	r0, #0
 8000dba:	2200      	movs	r2, #0
 8000dbc:	e7cc      	b.n	8000d58 <__aeabi_d2f+0x28>
 8000dbe:	000a      	movs	r2, r1
 8000dc0:	3217      	adds	r2, #23
 8000dc2:	db2f      	blt.n	8000e24 <__aeabi_d2f+0xf4>
 8000dc4:	2680      	movs	r6, #128	; 0x80
 8000dc6:	0436      	lsls	r6, r6, #16
 8000dc8:	432e      	orrs	r6, r5
 8000dca:	251e      	movs	r5, #30
 8000dcc:	1a6d      	subs	r5, r5, r1
 8000dce:	2d1f      	cmp	r5, #31
 8000dd0:	dd11      	ble.n	8000df6 <__aeabi_d2f+0xc6>
 8000dd2:	2202      	movs	r2, #2
 8000dd4:	4252      	negs	r2, r2
 8000dd6:	1a52      	subs	r2, r2, r1
 8000dd8:	0031      	movs	r1, r6
 8000dda:	40d1      	lsrs	r1, r2
 8000ddc:	2d20      	cmp	r5, #32
 8000dde:	d004      	beq.n	8000dea <__aeabi_d2f+0xba>
 8000de0:	4a14      	ldr	r2, [pc, #80]	; (8000e34 <__aeabi_d2f+0x104>)
 8000de2:	4694      	mov	ip, r2
 8000de4:	4463      	add	r3, ip
 8000de6:	409e      	lsls	r6, r3
 8000de8:	4337      	orrs	r7, r6
 8000dea:	003a      	movs	r2, r7
 8000dec:	1e53      	subs	r3, r2, #1
 8000dee:	419a      	sbcs	r2, r3
 8000df0:	430a      	orrs	r2, r1
 8000df2:	2100      	movs	r1, #0
 8000df4:	e7ce      	b.n	8000d94 <__aeabi_d2f+0x64>
 8000df6:	4a10      	ldr	r2, [pc, #64]	; (8000e38 <__aeabi_d2f+0x108>)
 8000df8:	0038      	movs	r0, r7
 8000dfa:	4694      	mov	ip, r2
 8000dfc:	4463      	add	r3, ip
 8000dfe:	4098      	lsls	r0, r3
 8000e00:	003a      	movs	r2, r7
 8000e02:	1e41      	subs	r1, r0, #1
 8000e04:	4188      	sbcs	r0, r1
 8000e06:	409e      	lsls	r6, r3
 8000e08:	40ea      	lsrs	r2, r5
 8000e0a:	4330      	orrs	r0, r6
 8000e0c:	4302      	orrs	r2, r0
 8000e0e:	2100      	movs	r1, #0
 8000e10:	0753      	lsls	r3, r2, #29
 8000e12:	d1c1      	bne.n	8000d98 <__aeabi_d2f+0x68>
 8000e14:	2180      	movs	r1, #128	; 0x80
 8000e16:	0013      	movs	r3, r2
 8000e18:	04c9      	lsls	r1, r1, #19
 8000e1a:	2001      	movs	r0, #1
 8000e1c:	400b      	ands	r3, r1
 8000e1e:	420a      	tst	r2, r1
 8000e20:	d1c6      	bne.n	8000db0 <__aeabi_d2f+0x80>
 8000e22:	e7a3      	b.n	8000d6c <__aeabi_d2f+0x3c>
 8000e24:	2300      	movs	r3, #0
 8000e26:	e7a0      	b.n	8000d6a <__aeabi_d2f+0x3a>
 8000e28:	000b      	movs	r3, r1
 8000e2a:	e79f      	b.n	8000d6c <__aeabi_d2f+0x3c>
 8000e2c:	000007fe 	.word	0x000007fe
 8000e30:	fffffc80 	.word	0xfffffc80
 8000e34:	fffffca2 	.word	0xfffffca2
 8000e38:	fffffc82 	.word	0xfffffc82

08000e3c <__clzsi2>:
 8000e3c:	211c      	movs	r1, #28
 8000e3e:	2301      	movs	r3, #1
 8000e40:	041b      	lsls	r3, r3, #16
 8000e42:	4298      	cmp	r0, r3
 8000e44:	d301      	bcc.n	8000e4a <__clzsi2+0xe>
 8000e46:	0c00      	lsrs	r0, r0, #16
 8000e48:	3910      	subs	r1, #16
 8000e4a:	0a1b      	lsrs	r3, r3, #8
 8000e4c:	4298      	cmp	r0, r3
 8000e4e:	d301      	bcc.n	8000e54 <__clzsi2+0x18>
 8000e50:	0a00      	lsrs	r0, r0, #8
 8000e52:	3908      	subs	r1, #8
 8000e54:	091b      	lsrs	r3, r3, #4
 8000e56:	4298      	cmp	r0, r3
 8000e58:	d301      	bcc.n	8000e5e <__clzsi2+0x22>
 8000e5a:	0900      	lsrs	r0, r0, #4
 8000e5c:	3904      	subs	r1, #4
 8000e5e:	a202      	add	r2, pc, #8	; (adr r2, 8000e68 <__clzsi2+0x2c>)
 8000e60:	5c10      	ldrb	r0, [r2, r0]
 8000e62:	1840      	adds	r0, r0, r1
 8000e64:	4770      	bx	lr
 8000e66:	46c0      	nop			; (mov r8, r8)
 8000e68:	02020304 	.word	0x02020304
 8000e6c:	01010101 	.word	0x01010101
	...

08000e78 <__clzdi2>:
 8000e78:	b510      	push	{r4, lr}
 8000e7a:	2900      	cmp	r1, #0
 8000e7c:	d103      	bne.n	8000e86 <__clzdi2+0xe>
 8000e7e:	f7ff ffdd 	bl	8000e3c <__clzsi2>
 8000e82:	3020      	adds	r0, #32
 8000e84:	e002      	b.n	8000e8c <__clzdi2+0x14>
 8000e86:	0008      	movs	r0, r1
 8000e88:	f7ff ffd8 	bl	8000e3c <__clzsi2>
 8000e8c:	bd10      	pop	{r4, pc}
 8000e8e:	46c0      	nop			; (mov r8, r8)

08000e90 <__divdi3>:
 8000e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e92:	4657      	mov	r7, sl
 8000e94:	464e      	mov	r6, r9
 8000e96:	4645      	mov	r5, r8
 8000e98:	46de      	mov	lr, fp
 8000e9a:	b5e0      	push	{r5, r6, r7, lr}
 8000e9c:	000f      	movs	r7, r1
 8000e9e:	0019      	movs	r1, r3
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	0006      	movs	r6, r0
 8000ea4:	4698      	mov	r8, r3
 8000ea6:	0010      	movs	r0, r2
 8000ea8:	b083      	sub	sp, #12
 8000eaa:	2f00      	cmp	r7, #0
 8000eac:	da07      	bge.n	8000ebe <__divdi3+0x2e>
 8000eae:	0033      	movs	r3, r6
 8000eb0:	003c      	movs	r4, r7
 8000eb2:	2700      	movs	r7, #0
 8000eb4:	425e      	negs	r6, r3
 8000eb6:	41a7      	sbcs	r7, r4
 8000eb8:	2301      	movs	r3, #1
 8000eba:	425b      	negs	r3, r3
 8000ebc:	4698      	mov	r8, r3
 8000ebe:	2900      	cmp	r1, #0
 8000ec0:	da07      	bge.n	8000ed2 <__divdi3+0x42>
 8000ec2:	4643      	mov	r3, r8
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	000c      	movs	r4, r1
 8000ec8:	4698      	mov	r8, r3
 8000eca:	0003      	movs	r3, r0
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4258      	negs	r0, r3
 8000ed0:	41a1      	sbcs	r1, r4
 8000ed2:	0034      	movs	r4, r6
 8000ed4:	003d      	movs	r5, r7
 8000ed6:	4682      	mov	sl, r0
 8000ed8:	4689      	mov	r9, r1
 8000eda:	42b9      	cmp	r1, r7
 8000edc:	d869      	bhi.n	8000fb2 <__divdi3+0x122>
 8000ede:	d066      	beq.n	8000fae <__divdi3+0x11e>
 8000ee0:	4649      	mov	r1, r9
 8000ee2:	4650      	mov	r0, sl
 8000ee4:	f7ff ffc8 	bl	8000e78 <__clzdi2>
 8000ee8:	4683      	mov	fp, r0
 8000eea:	0039      	movs	r1, r7
 8000eec:	0030      	movs	r0, r6
 8000eee:	f7ff ffc3 	bl	8000e78 <__clzdi2>
 8000ef2:	465b      	mov	r3, fp
 8000ef4:	1a1b      	subs	r3, r3, r0
 8000ef6:	469c      	mov	ip, r3
 8000ef8:	3b20      	subs	r3, #32
 8000efa:	d46b      	bmi.n	8000fd4 <__divdi3+0x144>
 8000efc:	4651      	mov	r1, sl
 8000efe:	4099      	lsls	r1, r3
 8000f00:	469b      	mov	fp, r3
 8000f02:	4660      	mov	r0, ip
 8000f04:	000b      	movs	r3, r1
 8000f06:	4651      	mov	r1, sl
 8000f08:	4081      	lsls	r1, r0
 8000f0a:	000a      	movs	r2, r1
 8000f0c:	42bb      	cmp	r3, r7
 8000f0e:	d900      	bls.n	8000f12 <__divdi3+0x82>
 8000f10:	e073      	b.n	8000ffa <__divdi3+0x16a>
 8000f12:	42bb      	cmp	r3, r7
 8000f14:	d100      	bne.n	8000f18 <__divdi3+0x88>
 8000f16:	e07a      	b.n	800100e <__divdi3+0x17e>
 8000f18:	0034      	movs	r4, r6
 8000f1a:	003d      	movs	r5, r7
 8000f1c:	4659      	mov	r1, fp
 8000f1e:	1aa4      	subs	r4, r4, r2
 8000f20:	419d      	sbcs	r5, r3
 8000f22:	2900      	cmp	r1, #0
 8000f24:	da00      	bge.n	8000f28 <__divdi3+0x98>
 8000f26:	e075      	b.n	8001014 <__divdi3+0x184>
 8000f28:	2100      	movs	r1, #0
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	2601      	movs	r6, #1
 8000f2e:	9000      	str	r0, [sp, #0]
 8000f30:	9101      	str	r1, [sp, #4]
 8000f32:	4659      	mov	r1, fp
 8000f34:	408e      	lsls	r6, r1
 8000f36:	9601      	str	r6, [sp, #4]
 8000f38:	4661      	mov	r1, ip
 8000f3a:	2601      	movs	r6, #1
 8000f3c:	408e      	lsls	r6, r1
 8000f3e:	4661      	mov	r1, ip
 8000f40:	9600      	str	r6, [sp, #0]
 8000f42:	2900      	cmp	r1, #0
 8000f44:	d060      	beq.n	8001008 <__divdi3+0x178>
 8000f46:	07d9      	lsls	r1, r3, #31
 8000f48:	0856      	lsrs	r6, r2, #1
 8000f4a:	430e      	orrs	r6, r1
 8000f4c:	085f      	lsrs	r7, r3, #1
 8000f4e:	4661      	mov	r1, ip
 8000f50:	2201      	movs	r2, #1
 8000f52:	2300      	movs	r3, #0
 8000f54:	e00c      	b.n	8000f70 <__divdi3+0xe0>
 8000f56:	42af      	cmp	r7, r5
 8000f58:	d101      	bne.n	8000f5e <__divdi3+0xce>
 8000f5a:	42a6      	cmp	r6, r4
 8000f5c:	d80a      	bhi.n	8000f74 <__divdi3+0xe4>
 8000f5e:	1ba4      	subs	r4, r4, r6
 8000f60:	41bd      	sbcs	r5, r7
 8000f62:	1924      	adds	r4, r4, r4
 8000f64:	416d      	adcs	r5, r5
 8000f66:	3901      	subs	r1, #1
 8000f68:	18a4      	adds	r4, r4, r2
 8000f6a:	415d      	adcs	r5, r3
 8000f6c:	2900      	cmp	r1, #0
 8000f6e:	d006      	beq.n	8000f7e <__divdi3+0xee>
 8000f70:	42af      	cmp	r7, r5
 8000f72:	d9f0      	bls.n	8000f56 <__divdi3+0xc6>
 8000f74:	3901      	subs	r1, #1
 8000f76:	1924      	adds	r4, r4, r4
 8000f78:	416d      	adcs	r5, r5
 8000f7a:	2900      	cmp	r1, #0
 8000f7c:	d1f8      	bne.n	8000f70 <__divdi3+0xe0>
 8000f7e:	9800      	ldr	r0, [sp, #0]
 8000f80:	9901      	ldr	r1, [sp, #4]
 8000f82:	465b      	mov	r3, fp
 8000f84:	1900      	adds	r0, r0, r4
 8000f86:	4169      	adcs	r1, r5
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	db4e      	blt.n	800102a <__divdi3+0x19a>
 8000f8c:	002e      	movs	r6, r5
 8000f8e:	002c      	movs	r4, r5
 8000f90:	40de      	lsrs	r6, r3
 8000f92:	4663      	mov	r3, ip
 8000f94:	40dc      	lsrs	r4, r3
 8000f96:	465b      	mov	r3, fp
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	db56      	blt.n	800104a <__divdi3+0x1ba>
 8000f9c:	0034      	movs	r4, r6
 8000f9e:	409c      	lsls	r4, r3
 8000fa0:	0023      	movs	r3, r4
 8000fa2:	4664      	mov	r4, ip
 8000fa4:	40a6      	lsls	r6, r4
 8000fa6:	0032      	movs	r2, r6
 8000fa8:	1a80      	subs	r0, r0, r2
 8000faa:	4199      	sbcs	r1, r3
 8000fac:	e003      	b.n	8000fb6 <__divdi3+0x126>
 8000fae:	42b0      	cmp	r0, r6
 8000fb0:	d996      	bls.n	8000ee0 <__divdi3+0x50>
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4643      	mov	r3, r8
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d004      	beq.n	8000fc6 <__divdi3+0x136>
 8000fbc:	0003      	movs	r3, r0
 8000fbe:	000c      	movs	r4, r1
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4258      	negs	r0, r3
 8000fc4:	41a1      	sbcs	r1, r4
 8000fc6:	b003      	add	sp, #12
 8000fc8:	bcf0      	pop	{r4, r5, r6, r7}
 8000fca:	46bb      	mov	fp, r7
 8000fcc:	46b2      	mov	sl, r6
 8000fce:	46a9      	mov	r9, r5
 8000fd0:	46a0      	mov	r8, r4
 8000fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fd4:	4662      	mov	r2, ip
 8000fd6:	4648      	mov	r0, r9
 8000fd8:	469b      	mov	fp, r3
 8000fda:	2320      	movs	r3, #32
 8000fdc:	4651      	mov	r1, sl
 8000fde:	4090      	lsls	r0, r2
 8000fe0:	1a9b      	subs	r3, r3, r2
 8000fe2:	40d9      	lsrs	r1, r3
 8000fe4:	0003      	movs	r3, r0
 8000fe6:	9100      	str	r1, [sp, #0]
 8000fe8:	9900      	ldr	r1, [sp, #0]
 8000fea:	4660      	mov	r0, ip
 8000fec:	430b      	orrs	r3, r1
 8000fee:	4651      	mov	r1, sl
 8000ff0:	4081      	lsls	r1, r0
 8000ff2:	000a      	movs	r2, r1
 8000ff4:	42bb      	cmp	r3, r7
 8000ff6:	d800      	bhi.n	8000ffa <__divdi3+0x16a>
 8000ff8:	e78b      	b.n	8000f12 <__divdi3+0x82>
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	9000      	str	r0, [sp, #0]
 8001000:	9101      	str	r1, [sp, #4]
 8001002:	4661      	mov	r1, ip
 8001004:	2900      	cmp	r1, #0
 8001006:	d19e      	bne.n	8000f46 <__divdi3+0xb6>
 8001008:	9800      	ldr	r0, [sp, #0]
 800100a:	9901      	ldr	r1, [sp, #4]
 800100c:	e7d3      	b.n	8000fb6 <__divdi3+0x126>
 800100e:	42b1      	cmp	r1, r6
 8001010:	d8f3      	bhi.n	8000ffa <__divdi3+0x16a>
 8001012:	e781      	b.n	8000f18 <__divdi3+0x88>
 8001014:	4661      	mov	r1, ip
 8001016:	2620      	movs	r6, #32
 8001018:	2701      	movs	r7, #1
 800101a:	1a76      	subs	r6, r6, r1
 800101c:	2000      	movs	r0, #0
 800101e:	2100      	movs	r1, #0
 8001020:	40f7      	lsrs	r7, r6
 8001022:	9000      	str	r0, [sp, #0]
 8001024:	9101      	str	r1, [sp, #4]
 8001026:	9701      	str	r7, [sp, #4]
 8001028:	e786      	b.n	8000f38 <__divdi3+0xa8>
 800102a:	4662      	mov	r2, ip
 800102c:	2320      	movs	r3, #32
 800102e:	1a9b      	subs	r3, r3, r2
 8001030:	002a      	movs	r2, r5
 8001032:	409a      	lsls	r2, r3
 8001034:	0026      	movs	r6, r4
 8001036:	0013      	movs	r3, r2
 8001038:	4662      	mov	r2, ip
 800103a:	40d6      	lsrs	r6, r2
 800103c:	002c      	movs	r4, r5
 800103e:	431e      	orrs	r6, r3
 8001040:	4663      	mov	r3, ip
 8001042:	40dc      	lsrs	r4, r3
 8001044:	465b      	mov	r3, fp
 8001046:	2b00      	cmp	r3, #0
 8001048:	daa8      	bge.n	8000f9c <__divdi3+0x10c>
 800104a:	4662      	mov	r2, ip
 800104c:	2320      	movs	r3, #32
 800104e:	0035      	movs	r5, r6
 8001050:	4094      	lsls	r4, r2
 8001052:	1a9b      	subs	r3, r3, r2
 8001054:	40dd      	lsrs	r5, r3
 8001056:	0023      	movs	r3, r4
 8001058:	432b      	orrs	r3, r5
 800105a:	e7a2      	b.n	8000fa2 <__divdi3+0x112>

0800105c <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 800105c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 8001064:	230e      	movs	r3, #14
 8001066:	18fb      	adds	r3, r7, r3
 8001068:	2205      	movs	r2, #5
 800106a:	701a      	strb	r2, [r3, #0]
	uint8_t chip_id = 0;
 800106c:	230d      	movs	r3, #13
 800106e:	18fb      	adds	r3, r7, r3
 8001070:	2200      	movs	r2, #0
 8001072:	701a      	strb	r2, [r3, #0]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001074:	250f      	movs	r5, #15
 8001076:	197c      	adds	r4, r7, r5
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	0018      	movs	r0, r3
 800107c:	f001 fbbf 	bl	80027fe <null_ptr_check>
 8001080:	0003      	movs	r3, r0
 8001082:	7023      	strb	r3, [r4, #0]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 8001084:	197b      	adds	r3, r7, r5
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	b25b      	sxtb	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d148      	bne.n	8001120 <bme280_init+0xc4>
		while (try_count) {
 800108e:	e037      	b.n	8001100 <bme280_init+0xa4>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8001090:	250f      	movs	r5, #15
 8001092:	197c      	adds	r4, r7, r5
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	260d      	movs	r6, #13
 8001098:	19b9      	adds	r1, r7, r6
 800109a:	2201      	movs	r2, #1
 800109c:	20d0      	movs	r0, #208	; 0xd0
 800109e:	f000 f847 	bl	8001130 <bme280_get_regs>
 80010a2:	0003      	movs	r3, r0
 80010a4:	7023      	strb	r3, [r4, #0]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 80010a6:	0029      	movs	r1, r5
 80010a8:	187b      	adds	r3, r7, r1
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	b25b      	sxtb	r3, r3
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d11c      	bne.n	80010ec <bme280_init+0x90>
 80010b2:	19bb      	adds	r3, r7, r6
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b60      	cmp	r3, #96	; 0x60
 80010b8:	d118      	bne.n	80010ec <bme280_init+0x90>
				dev->chip_id = chip_id;
 80010ba:	19bb      	adds	r3, r7, r6
 80010bc:	781a      	ldrb	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 80010c2:	000d      	movs	r5, r1
 80010c4:	187c      	adds	r4, r7, r1
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	0018      	movs	r0, r3
 80010ca:	f000 f9ea 	bl	80014a2 <bme280_soft_reset>
 80010ce:	0003      	movs	r3, r0
 80010d0:	7023      	strb	r3, [r4, #0]
				if (rslt == BME280_OK) {
 80010d2:	197b      	adds	r3, r7, r5
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	b25b      	sxtb	r3, r3
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d117      	bne.n	800110c <bme280_init+0xb0>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 80010dc:	197c      	adds	r4, r7, r5
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	0018      	movs	r0, r3
 80010e2:	f001 f9dd 	bl	80024a0 <get_calib_data>
 80010e6:	0003      	movs	r3, r0
 80010e8:	7023      	strb	r3, [r4, #0]
				}
				break;
 80010ea:	e00f      	b.n	800110c <bme280_init+0xb0>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	2001      	movs	r0, #1
 80010f2:	4798      	blx	r3
			--try_count;
 80010f4:	220e      	movs	r2, #14
 80010f6:	18bb      	adds	r3, r7, r2
 80010f8:	18ba      	adds	r2, r7, r2
 80010fa:	7812      	ldrb	r2, [r2, #0]
 80010fc:	3a01      	subs	r2, #1
 80010fe:	701a      	strb	r2, [r3, #0]
		while (try_count) {
 8001100:	230e      	movs	r3, #14
 8001102:	18fb      	adds	r3, r7, r3
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d1c2      	bne.n	8001090 <bme280_init+0x34>
 800110a:	e000      	b.n	800110e <bme280_init+0xb2>
				break;
 800110c:	46c0      	nop			; (mov r8, r8)
		}
		/* Chip id check failed */
		if (!try_count)
 800110e:	230e      	movs	r3, #14
 8001110:	18fb      	adds	r3, r7, r3
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d103      	bne.n	8001120 <bme280_init+0xc4>
			rslt = BME280_E_DEV_NOT_FOUND;
 8001118:	230f      	movs	r3, #15
 800111a:	18fb      	adds	r3, r7, r3
 800111c:	22fe      	movs	r2, #254	; 0xfe
 800111e:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 8001120:	230f      	movs	r3, #15
 8001122:	18fb      	adds	r3, r7, r3
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	b25b      	sxtb	r3, r3
}
 8001128:	0018      	movs	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	b005      	add	sp, #20
 800112e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001130 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 8001130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001132:	b087      	sub	sp, #28
 8001134:	af00      	add	r7, sp, #0
 8001136:	60b9      	str	r1, [r7, #8]
 8001138:	0011      	movs	r1, r2
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	250f      	movs	r5, #15
 800113e:	197b      	adds	r3, r7, r5
 8001140:	1c02      	adds	r2, r0, #0
 8001142:	701a      	strb	r2, [r3, #0]
 8001144:	230c      	movs	r3, #12
 8001146:	18fb      	adds	r3, r7, r3
 8001148:	1c0a      	adds	r2, r1, #0
 800114a:	801a      	strh	r2, [r3, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800114c:	2617      	movs	r6, #23
 800114e:	19bc      	adds	r4, r7, r6
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	0018      	movs	r0, r3
 8001154:	f001 fb53 	bl	80027fe <null_ptr_check>
 8001158:	0003      	movs	r3, r0
 800115a:	7023      	strb	r3, [r4, #0]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 800115c:	19bb      	adds	r3, r7, r6
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	b25b      	sxtb	r3, r3
 8001162:	2b00      	cmp	r3, #0
 8001164:	d124      	bne.n	80011b0 <bme280_get_regs+0x80>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	789b      	ldrb	r3, [r3, #2]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d006      	beq.n	800117c <bme280_get_regs+0x4c>
			reg_addr = reg_addr | 0x80;
 800116e:	197b      	adds	r3, r7, r5
 8001170:	197a      	adds	r2, r7, r5
 8001172:	7812      	ldrb	r2, [r2, #0]
 8001174:	2180      	movs	r1, #128	; 0x80
 8001176:	4249      	negs	r1, r1
 8001178:	430a      	orrs	r2, r1
 800117a:	701a      	strb	r2, [r3, #0]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685d      	ldr	r5, [r3, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	7858      	ldrb	r0, [r3, #1]
 8001184:	2217      	movs	r2, #23
 8001186:	18bc      	adds	r4, r7, r2
 8001188:	230c      	movs	r3, #12
 800118a:	18fb      	adds	r3, r7, r3
 800118c:	881e      	ldrh	r6, [r3, #0]
 800118e:	68ba      	ldr	r2, [r7, #8]
 8001190:	230f      	movs	r3, #15
 8001192:	18fb      	adds	r3, r7, r3
 8001194:	7819      	ldrb	r1, [r3, #0]
 8001196:	0033      	movs	r3, r6
 8001198:	47a8      	blx	r5
 800119a:	0003      	movs	r3, r0
 800119c:	7023      	strb	r3, [r4, #0]
		/* Check for communication error */
		if (rslt != BME280_OK)
 800119e:	2217      	movs	r2, #23
 80011a0:	18bb      	adds	r3, r7, r2
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	b25b      	sxtb	r3, r3
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d002      	beq.n	80011b0 <bme280_get_regs+0x80>
			rslt = BME280_E_COMM_FAIL;
 80011aa:	18bb      	adds	r3, r7, r2
 80011ac:	22fc      	movs	r2, #252	; 0xfc
 80011ae:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 80011b0:	2317      	movs	r3, #23
 80011b2:	18fb      	adds	r3, r7, r3
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	b25b      	sxtb	r3, r3
}
 80011b8:	0018      	movs	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	b007      	add	sp, #28
 80011be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011c0 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 80011c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011c2:	b08d      	sub	sp, #52	; 0x34
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	1dfb      	adds	r3, r7, #7
 80011ce:	701a      	strb	r2, [r3, #0]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 80011d0:	1dfb      	adds	r3, r7, #7
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b0a      	cmp	r3, #10
 80011d6:	d902      	bls.n	80011de <bme280_set_regs+0x1e>
		len = 10;
 80011d8:	1dfb      	adds	r3, r7, #7
 80011da:	220a      	movs	r2, #10
 80011dc:	701a      	strb	r2, [r3, #0]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80011de:	252f      	movs	r5, #47	; 0x2f
 80011e0:	197c      	adds	r4, r7, r5
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	0018      	movs	r0, r3
 80011e6:	f001 fb0a 	bl	80027fe <null_ptr_check>
 80011ea:	0003      	movs	r3, r0
 80011ec:	7023      	strb	r3, [r4, #0]
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 80011ee:	197b      	adds	r3, r7, r5
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	b25b      	sxtb	r3, r3
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d16a      	bne.n	80012ce <bme280_set_regs+0x10e>
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d067      	beq.n	80012ce <bme280_set_regs+0x10e>
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d064      	beq.n	80012ce <bme280_set_regs+0x10e>
		if (len != 0) {
 8001204:	1dfb      	adds	r3, r7, #7
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d05b      	beq.n	80012c4 <bme280_set_regs+0x104>
			temp_buff[0] = reg_data[0];
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	781a      	ldrb	r2, [r3, #0]
 8001210:	2314      	movs	r3, #20
 8001212:	18fb      	adds	r3, r7, r3
 8001214:	701a      	strb	r2, [r3, #0]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	789b      	ldrb	r3, [r3, #2]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d01e      	beq.n	800125c <bme280_set_regs+0x9c>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800121e:	232b      	movs	r3, #43	; 0x2b
 8001220:	18fb      	adds	r3, r7, r3
 8001222:	2200      	movs	r2, #0
 8001224:	701a      	strb	r2, [r3, #0]
 8001226:	e012      	b.n	800124e <bme280_set_regs+0x8e>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8001228:	202b      	movs	r0, #43	; 0x2b
 800122a:	183b      	adds	r3, r7, r0
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	68fa      	ldr	r2, [r7, #12]
 8001230:	18d3      	adds	r3, r2, r3
 8001232:	781a      	ldrb	r2, [r3, #0]
 8001234:	183b      	adds	r3, r7, r0
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	68f9      	ldr	r1, [r7, #12]
 800123a:	18cb      	adds	r3, r1, r3
 800123c:	217f      	movs	r1, #127	; 0x7f
 800123e:	400a      	ands	r2, r1
 8001240:	b2d2      	uxtb	r2, r2
 8001242:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001244:	183b      	adds	r3, r7, r0
 8001246:	781a      	ldrb	r2, [r3, #0]
 8001248:	183b      	adds	r3, r7, r0
 800124a:	3201      	adds	r2, #1
 800124c:	701a      	strb	r2, [r3, #0]
 800124e:	232b      	movs	r3, #43	; 0x2b
 8001250:	18fa      	adds	r2, r7, r3
 8001252:	1dfb      	adds	r3, r7, #7
 8001254:	7812      	ldrb	r2, [r2, #0]
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	429a      	cmp	r2, r3
 800125a:	d3e5      	bcc.n	8001228 <bme280_set_regs+0x68>
			}
			/* Burst write mode */
			if (len > 1) {
 800125c:	1dfb      	adds	r3, r7, #7
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d911      	bls.n	8001288 <bme280_set_regs+0xc8>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8001264:	1dfb      	adds	r3, r7, #7
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	68ba      	ldr	r2, [r7, #8]
 800126a:	2114      	movs	r1, #20
 800126c:	1879      	adds	r1, r7, r1
 800126e:	68f8      	ldr	r0, [r7, #12]
 8001270:	f001 f962 	bl	8002538 <interleave_reg_addr>
				temp_len = ((len * 2) - 1);
 8001274:	1dfb      	adds	r3, r7, #7
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	b29b      	uxth	r3, r3
 800127a:	18db      	adds	r3, r3, r3
 800127c:	b29a      	uxth	r2, r3
 800127e:	232c      	movs	r3, #44	; 0x2c
 8001280:	18fb      	adds	r3, r7, r3
 8001282:	3a01      	subs	r2, #1
 8001284:	801a      	strh	r2, [r3, #0]
 8001286:	e004      	b.n	8001292 <bme280_set_regs+0xd2>
			} else {
				temp_len = len;
 8001288:	232c      	movs	r3, #44	; 0x2c
 800128a:	18fb      	adds	r3, r7, r3
 800128c:	1dfa      	adds	r2, r7, #7
 800128e:	7812      	ldrb	r2, [r2, #0]
 8001290:	801a      	strh	r2, [r3, #0]
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	689d      	ldr	r5, [r3, #8]
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	7858      	ldrb	r0, [r3, #1]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	7819      	ldrb	r1, [r3, #0]
 800129e:	262f      	movs	r6, #47	; 0x2f
 80012a0:	19bc      	adds	r4, r7, r6
 80012a2:	232c      	movs	r3, #44	; 0x2c
 80012a4:	18fb      	adds	r3, r7, r3
 80012a6:	881b      	ldrh	r3, [r3, #0]
 80012a8:	2214      	movs	r2, #20
 80012aa:	18ba      	adds	r2, r7, r2
 80012ac:	47a8      	blx	r5
 80012ae:	0003      	movs	r3, r0
 80012b0:	7023      	strb	r3, [r4, #0]
			/* Check for communication error */
			if (rslt != BME280_OK)
 80012b2:	19bb      	adds	r3, r7, r6
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	b25b      	sxtb	r3, r3
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d00d      	beq.n	80012d8 <bme280_set_regs+0x118>
				rslt = BME280_E_COMM_FAIL;
 80012bc:	19bb      	adds	r3, r7, r6
 80012be:	22fc      	movs	r2, #252	; 0xfc
 80012c0:	701a      	strb	r2, [r3, #0]
		if (len != 0) {
 80012c2:	e009      	b.n	80012d8 <bme280_set_regs+0x118>
		} else {
			rslt = BME280_E_INVALID_LEN;
 80012c4:	232f      	movs	r3, #47	; 0x2f
 80012c6:	18fb      	adds	r3, r7, r3
 80012c8:	22fd      	movs	r2, #253	; 0xfd
 80012ca:	701a      	strb	r2, [r3, #0]
		if (len != 0) {
 80012cc:	e004      	b.n	80012d8 <bme280_set_regs+0x118>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 80012ce:	232f      	movs	r3, #47	; 0x2f
 80012d0:	18fb      	adds	r3, r7, r3
 80012d2:	22ff      	movs	r2, #255	; 0xff
 80012d4:	701a      	strb	r2, [r3, #0]
 80012d6:	e000      	b.n	80012da <bme280_set_regs+0x11a>
		if (len != 0) {
 80012d8:	46c0      	nop			; (mov r8, r8)
	}


	return rslt;
 80012da:	232f      	movs	r3, #47	; 0x2f
 80012dc:	18fb      	adds	r3, r7, r3
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	b25b      	sxtb	r3, r3
}
 80012e2:	0018      	movs	r0, r3
 80012e4:	46bd      	mov	sp, r7
 80012e6:	b00d      	add	sp, #52	; 0x34
 80012e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012ea <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 80012ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ec:	b085      	sub	sp, #20
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	0002      	movs	r2, r0
 80012f2:	6039      	str	r1, [r7, #0]
 80012f4:	1dfb      	adds	r3, r7, #7
 80012f6:	701a      	strb	r2, [r3, #0]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80012f8:	250f      	movs	r5, #15
 80012fa:	197c      	adds	r4, r7, r5
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	0018      	movs	r0, r3
 8001300:	f001 fa7d 	bl	80027fe <null_ptr_check>
 8001304:	0003      	movs	r3, r0
 8001306:	7023      	strb	r3, [r4, #0]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8001308:	197b      	adds	r3, r7, r5
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	b25b      	sxtb	r3, r3
 800130e:	2b00      	cmp	r3, #0
 8001310:	d14e      	bne.n	80013b0 <bme280_set_sensor_settings+0xc6>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8001312:	197c      	adds	r4, r7, r5
 8001314:	683a      	ldr	r2, [r7, #0]
 8001316:	260e      	movs	r6, #14
 8001318:	19bb      	adds	r3, r7, r6
 800131a:	0011      	movs	r1, r2
 800131c:	0018      	movs	r0, r3
 800131e:	f000 f896 	bl	800144e <bme280_get_sensor_mode>
 8001322:	0003      	movs	r3, r0
 8001324:	7023      	strb	r3, [r4, #0]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8001326:	002a      	movs	r2, r5
 8001328:	18bb      	adds	r3, r7, r2
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	b25b      	sxtb	r3, r3
 800132e:	2b00      	cmp	r3, #0
 8001330:	d10a      	bne.n	8001348 <bme280_set_sensor_settings+0x5e>
 8001332:	19bb      	adds	r3, r7, r6
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d006      	beq.n	8001348 <bme280_set_sensor_settings+0x5e>
			rslt = put_device_to_sleep(dev);
 800133a:	18bc      	adds	r4, r7, r2
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	0018      	movs	r0, r3
 8001340:	f000 fbbd 	bl	8001abe <put_device_to_sleep>
 8001344:	0003      	movs	r3, r0
 8001346:	7023      	strb	r3, [r4, #0]
		if (rslt == BME280_OK) {
 8001348:	240f      	movs	r4, #15
 800134a:	193b      	adds	r3, r7, r4
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	b25b      	sxtb	r3, r3
 8001350:	2b00      	cmp	r3, #0
 8001352:	d12d      	bne.n	80013b0 <bme280_set_sensor_settings+0xc6>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8001354:	1dfb      	adds	r3, r7, #7
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	0019      	movs	r1, r3
 800135a:	2007      	movs	r0, #7
 800135c:	f001 fa2b 	bl	80027b6 <are_settings_changed>
 8001360:	1e03      	subs	r3, r0, #0
 8001362:	d00b      	beq.n	800137c <bme280_set_sensor_settings+0x92>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	3338      	adds	r3, #56	; 0x38
 8001368:	0019      	movs	r1, r3
 800136a:	193c      	adds	r4, r7, r4
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	1dfb      	adds	r3, r7, #7
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	0018      	movs	r0, r3
 8001374:	f000 f9ba 	bl	80016ec <set_osr_settings>
 8001378:	0003      	movs	r3, r0
 800137a:	7023      	strb	r3, [r4, #0]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 800137c:	240f      	movs	r4, #15
 800137e:	193b      	adds	r3, r7, r4
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	b25b      	sxtb	r3, r3
 8001384:	2b00      	cmp	r3, #0
 8001386:	d113      	bne.n	80013b0 <bme280_set_sensor_settings+0xc6>
 8001388:	1dfb      	adds	r3, r7, #7
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	0019      	movs	r1, r3
 800138e:	2018      	movs	r0, #24
 8001390:	f001 fa11 	bl	80027b6 <are_settings_changed>
 8001394:	1e03      	subs	r3, r0, #0
 8001396:	d00b      	beq.n	80013b0 <bme280_set_sensor_settings+0xc6>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	3338      	adds	r3, #56	; 0x38
 800139c:	0019      	movs	r1, r3
 800139e:	193c      	adds	r4, r7, r4
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	1dfb      	adds	r3, r7, #7
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	0018      	movs	r0, r3
 80013a8:	f000 fa66 	bl	8001878 <set_filter_standby_settings>
 80013ac:	0003      	movs	r3, r0
 80013ae:	7023      	strb	r3, [r4, #0]
		}
	}

	return rslt;
 80013b0:	230f      	movs	r3, #15
 80013b2:	18fb      	adds	r3, r7, r3
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	b25b      	sxtb	r3, r3
}
 80013b8:	0018      	movs	r0, r3
 80013ba:	46bd      	mov	sp, r7
 80013bc:	b005      	add	sp, #20
 80013be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013c0 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 80013c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	0002      	movs	r2, r0
 80013c8:	6039      	str	r1, [r7, #0]
 80013ca:	1dfb      	adds	r3, r7, #7
 80013cc:	701a      	strb	r2, [r3, #0]
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80013ce:	250f      	movs	r5, #15
 80013d0:	197c      	adds	r4, r7, r5
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	0018      	movs	r0, r3
 80013d6:	f001 fa12 	bl	80027fe <null_ptr_check>
 80013da:	0003      	movs	r3, r0
 80013dc:	7023      	strb	r3, [r4, #0]

	if (rslt == BME280_OK) {
 80013de:	197b      	adds	r3, r7, r5
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	b25b      	sxtb	r3, r3
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d12a      	bne.n	800143e <bme280_set_sensor_mode+0x7e>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 80013e8:	197c      	adds	r4, r7, r5
 80013ea:	683a      	ldr	r2, [r7, #0]
 80013ec:	260e      	movs	r6, #14
 80013ee:	19bb      	adds	r3, r7, r6
 80013f0:	0011      	movs	r1, r2
 80013f2:	0018      	movs	r0, r3
 80013f4:	f000 f82b 	bl	800144e <bme280_get_sensor_mode>
 80013f8:	0003      	movs	r3, r0
 80013fa:	7023      	strb	r3, [r4, #0]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 80013fc:	002a      	movs	r2, r5
 80013fe:	18bb      	adds	r3, r7, r2
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	b25b      	sxtb	r3, r3
 8001404:	2b00      	cmp	r3, #0
 8001406:	d10a      	bne.n	800141e <bme280_set_sensor_mode+0x5e>
 8001408:	19bb      	adds	r3, r7, r6
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d006      	beq.n	800141e <bme280_set_sensor_mode+0x5e>
			rslt = put_device_to_sleep(dev);
 8001410:	18bc      	adds	r4, r7, r2
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	0018      	movs	r0, r3
 8001416:	f000 fb52 	bl	8001abe <put_device_to_sleep>
 800141a:	0003      	movs	r3, r0
 800141c:	7023      	strb	r3, [r4, #0]
		/* Set the power mode */
		if (rslt == BME280_OK)
 800141e:	220f      	movs	r2, #15
 8001420:	18bb      	adds	r3, r7, r2
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	b25b      	sxtb	r3, r3
 8001426:	2b00      	cmp	r3, #0
 8001428:	d109      	bne.n	800143e <bme280_set_sensor_mode+0x7e>
			rslt = write_power_mode(sensor_mode, dev);
 800142a:	18bc      	adds	r4, r7, r2
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	1dfb      	adds	r3, r7, #7
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	0011      	movs	r1, r2
 8001434:	0018      	movs	r0, r3
 8001436:	f000 fb02 	bl	8001a3e <write_power_mode>
 800143a:	0003      	movs	r3, r0
 800143c:	7023      	strb	r3, [r4, #0]
	}

	return rslt;
 800143e:	230f      	movs	r3, #15
 8001440:	18fb      	adds	r3, r7, r3
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	b25b      	sxtb	r3, r3
}
 8001446:	0018      	movs	r0, r3
 8001448:	46bd      	mov	sp, r7
 800144a:	b005      	add	sp, #20
 800144c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800144e <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 800144e:	b5b0      	push	{r4, r5, r7, lr}
 8001450:	b084      	sub	sp, #16
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
 8001456:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001458:	250f      	movs	r5, #15
 800145a:	197c      	adds	r4, r7, r5
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	0018      	movs	r0, r3
 8001460:	f001 f9cd 	bl	80027fe <null_ptr_check>
 8001464:	0003      	movs	r3, r0
 8001466:	7023      	strb	r3, [r4, #0]

	if (rslt == BME280_OK) {
 8001468:	197b      	adds	r3, r7, r5
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	b25b      	sxtb	r3, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	d10f      	bne.n	8001492 <bme280_get_sensor_mode+0x44>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8001472:	197c      	adds	r4, r7, r5
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	2201      	movs	r2, #1
 800147a:	20f4      	movs	r0, #244	; 0xf4
 800147c:	f7ff fe58 	bl	8001130 <bme280_get_regs>
 8001480:	0003      	movs	r3, r0
 8001482:	7023      	strb	r3, [r4, #0]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2203      	movs	r2, #3
 800148a:	4013      	ands	r3, r2
 800148c:	b2da      	uxtb	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 8001492:	230f      	movs	r3, #15
 8001494:	18fb      	adds	r3, r7, r3
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	b25b      	sxtb	r3, r3
}
 800149a:	0018      	movs	r0, r3
 800149c:	46bd      	mov	sp, r7
 800149e:	b004      	add	sp, #16
 80014a0:	bdb0      	pop	{r4, r5, r7, pc}

080014a2 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 80014a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014a4:	b085      	sub	sp, #20
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 80014aa:	260e      	movs	r6, #14
 80014ac:	19bb      	adds	r3, r7, r6
 80014ae:	22e0      	movs	r2, #224	; 0xe0
 80014b0:	701a      	strb	r2, [r3, #0]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 80014b2:	230d      	movs	r3, #13
 80014b4:	18fb      	adds	r3, r7, r3
 80014b6:	22b6      	movs	r2, #182	; 0xb6
 80014b8:	701a      	strb	r2, [r3, #0]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80014ba:	250f      	movs	r5, #15
 80014bc:	197c      	adds	r4, r7, r5
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	0018      	movs	r0, r3
 80014c2:	f001 f99c 	bl	80027fe <null_ptr_check>
 80014c6:	0003      	movs	r3, r0
 80014c8:	7023      	strb	r3, [r4, #0]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 80014ca:	197b      	adds	r3, r7, r5
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	b25b      	sxtb	r3, r3
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d10d      	bne.n	80014f0 <bme280_soft_reset+0x4e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80014d4:	197c      	adds	r4, r7, r5
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	220d      	movs	r2, #13
 80014da:	18b9      	adds	r1, r7, r2
 80014dc:	19b8      	adds	r0, r7, r6
 80014de:	2201      	movs	r2, #1
 80014e0:	f7ff fe6e 	bl	80011c0 <bme280_set_regs>
 80014e4:	0003      	movs	r3, r0
 80014e6:	7023      	strb	r3, [r4, #0]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	2002      	movs	r0, #2
 80014ee:	4798      	blx	r3
	}

	return rslt;
 80014f0:	230f      	movs	r3, #15
 80014f2:	18fb      	adds	r3, r7, r3
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	b25b      	sxtb	r3, r3
}
 80014f8:	0018      	movs	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	b005      	add	sp, #20
 80014fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001500 <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 8001500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001502:	b08b      	sub	sp, #44	; 0x2c
 8001504:	af00      	add	r7, sp, #0
 8001506:	60b9      	str	r1, [r7, #8]
 8001508:	607a      	str	r2, [r7, #4]
 800150a:	230f      	movs	r3, #15
 800150c:	18fb      	adds	r3, r7, r3
 800150e:	1c02      	adds	r2, r0, #0
 8001510:	701a      	strb	r2, [r3, #0]
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 8001512:	261c      	movs	r6, #28
 8001514:	19bb      	adds	r3, r7, r6
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	2200      	movs	r2, #0
 800151c:	605a      	str	r2, [r3, #4]
	struct bme280_uncomp_data uncomp_data = {0};
 800151e:	2310      	movs	r3, #16
 8001520:	18fb      	adds	r3, r7, r3
 8001522:	0018      	movs	r0, r3
 8001524:	230c      	movs	r3, #12
 8001526:	001a      	movs	r2, r3
 8001528:	2100      	movs	r1, #0
 800152a:	f004 fc77 	bl	8005e1c <memset>

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800152e:	2527      	movs	r5, #39	; 0x27
 8001530:	197c      	adds	r4, r7, r5
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	0018      	movs	r0, r3
 8001536:	f001 f962 	bl	80027fe <null_ptr_check>
 800153a:	0003      	movs	r3, r0
 800153c:	7023      	strb	r3, [r4, #0]

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 800153e:	197b      	adds	r3, r7, r5
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	b25b      	sxtb	r3, r3
 8001544:	2b00      	cmp	r3, #0
 8001546:	d128      	bne.n	800159a <bme280_get_sensor_data+0x9a>
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d025      	beq.n	800159a <bme280_get_sensor_data+0x9a>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 800154e:	197c      	adds	r4, r7, r5
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	19b9      	adds	r1, r7, r6
 8001554:	2208      	movs	r2, #8
 8001556:	20f7      	movs	r0, #247	; 0xf7
 8001558:	f7ff fdea 	bl	8001130 <bme280_get_regs>
 800155c:	0003      	movs	r3, r0
 800155e:	7023      	strb	r3, [r4, #0]

		if (rslt == BME280_OK) {
 8001560:	002c      	movs	r4, r5
 8001562:	193b      	adds	r3, r7, r4
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	b25b      	sxtb	r3, r3
 8001568:	2b00      	cmp	r3, #0
 800156a:	d11a      	bne.n	80015a2 <bme280_get_sensor_data+0xa2>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 800156c:	2310      	movs	r3, #16
 800156e:	18fa      	adds	r2, r7, r3
 8001570:	19bb      	adds	r3, r7, r6
 8001572:	0011      	movs	r1, r2
 8001574:	0018      	movs	r0, r3
 8001576:	f000 f81c 	bl	80015b2 <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	001d      	movs	r5, r3
 800157e:	3510      	adds	r5, #16
 8001580:	193c      	adds	r4, r7, r4
 8001582:	68ba      	ldr	r2, [r7, #8]
 8001584:	2310      	movs	r3, #16
 8001586:	18f9      	adds	r1, r7, r3
 8001588:	230f      	movs	r3, #15
 800158a:	18fb      	adds	r3, r7, r3
 800158c:	7818      	ldrb	r0, [r3, #0]
 800158e:	002b      	movs	r3, r5
 8001590:	f000 f853 	bl	800163a <bme280_compensate_data>
 8001594:	0003      	movs	r3, r0
 8001596:	7023      	strb	r3, [r4, #0]
		if (rslt == BME280_OK) {
 8001598:	e003      	b.n	80015a2 <bme280_get_sensor_data+0xa2>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 800159a:	2327      	movs	r3, #39	; 0x27
 800159c:	18fb      	adds	r3, r7, r3
 800159e:	22ff      	movs	r2, #255	; 0xff
 80015a0:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 80015a2:	2327      	movs	r3, #39	; 0x27
 80015a4:	18fb      	adds	r3, r7, r3
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	b25b      	sxtb	r3, r3
}
 80015aa:	0018      	movs	r0, r3
 80015ac:	46bd      	mov	sp, r7
 80015ae:	b00b      	add	sp, #44	; 0x2c
 80015b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015b2 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b086      	sub	sp, #24
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	031b      	lsls	r3, r3, #12
 80015c2:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 4;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3301      	adds	r3, #1
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	011b      	lsls	r3, r3, #4
 80015cc:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	3302      	adds	r3, #2
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	091b      	lsrs	r3, r3, #4
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	60fb      	str	r3, [r7, #12]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 80015da:	697a      	ldr	r2, [r7, #20]
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	431a      	orrs	r2, r3
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	431a      	orrs	r2, r3
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3303      	adds	r3, #3
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	031b      	lsls	r3, r3, #12
 80015f0:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 4;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	3304      	adds	r3, #4
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	011b      	lsls	r3, r3, #4
 80015fa:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3305      	adds	r3, #5
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	091b      	lsrs	r3, r3, #4
 8001604:	b2db      	uxtb	r3, r3
 8001606:	60fb      	str	r3, [r7, #12]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8001608:	697a      	ldr	r2, [r7, #20]
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	431a      	orrs	r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	431a      	orrs	r2, r3
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	605a      	str	r2, [r3, #4]

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	3306      	adds	r3, #6
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	021b      	lsls	r3, r3, #8
 800161e:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[7];
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3307      	adds	r3, #7
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	617b      	str	r3, [r7, #20]
	uncomp_data->humidity = data_msb | data_lsb;
 8001628:	697a      	ldr	r2, [r7, #20]
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	431a      	orrs	r2, r3
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	609a      	str	r2, [r3, #8]
}
 8001632:	46c0      	nop			; (mov r8, r8)
 8001634:	46bd      	mov	sp, r7
 8001636:	b006      	add	sp, #24
 8001638:	bd80      	pop	{r7, pc}

0800163a <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b086      	sub	sp, #24
 800163e:	af00      	add	r7, sp, #0
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
 8001644:	603b      	str	r3, [r7, #0]
 8001646:	210f      	movs	r1, #15
 8001648:	187b      	adds	r3, r7, r1
 800164a:	1c02      	adds	r2, r0, #0
 800164c:	701a      	strb	r2, [r3, #0]
	int8_t rslt = BME280_OK;
 800164e:	2317      	movs	r3, #23
 8001650:	18fb      	adds	r3, r7, r3
 8001652:	2200      	movs	r2, #0
 8001654:	701a      	strb	r2, [r3, #0]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d03b      	beq.n	80016d4 <bme280_compensate_data+0x9a>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d038      	beq.n	80016d4 <bme280_compensate_data+0x9a>
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d035      	beq.n	80016d4 <bme280_compensate_data+0x9a>
		/* Initialize to zero */
		comp_data->temperature = 0;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	605a      	str	r2, [r3, #4]
		comp_data->pressure = 0;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
		comp_data->humidity = 0;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 800167a:	187b      	adds	r3, r7, r1
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2207      	movs	r2, #7
 8001680:	4013      	ands	r3, r2
 8001682:	d008      	beq.n	8001696 <bme280_compensate_data+0x5c>
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	0011      	movs	r1, r2
 800168a:	0018      	movs	r0, r3
 800168c:	f000 fa78 	bl	8001b80 <compensate_temperature>
 8001690:	0002      	movs	r2, r0
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	605a      	str	r2, [r3, #4]
		}
		if (sensor_comp & BME280_PRESS) {
 8001696:	230f      	movs	r3, #15
 8001698:	18fb      	adds	r3, r7, r3
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2201      	movs	r2, #1
 800169e:	4013      	ands	r3, r2
 80016a0:	d008      	beq.n	80016b4 <bme280_compensate_data+0x7a>
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 80016a2:	683a      	ldr	r2, [r7, #0]
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	0011      	movs	r1, r2
 80016a8:	0018      	movs	r0, r3
 80016aa:	f000 facf 	bl	8001c4c <compensate_pressure>
 80016ae:	0002      	movs	r2, r0
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	601a      	str	r2, [r3, #0]
		}
		if (sensor_comp & BME280_HUM) {
 80016b4:	230f      	movs	r3, #15
 80016b6:	18fb      	adds	r3, r7, r3
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2204      	movs	r2, #4
 80016bc:	4013      	ands	r3, r2
 80016be:	d00d      	beq.n	80016dc <bme280_compensate_data+0xa2>
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	0011      	movs	r1, r2
 80016c6:	0018      	movs	r0, r3
 80016c8:	f000 fe2c 	bl	8002324 <compensate_humidity>
 80016cc:	0002      	movs	r2, r0
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	609a      	str	r2, [r3, #8]
		if (sensor_comp & BME280_HUM) {
 80016d2:	e003      	b.n	80016dc <bme280_compensate_data+0xa2>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 80016d4:	2317      	movs	r3, #23
 80016d6:	18fb      	adds	r3, r7, r3
 80016d8:	22ff      	movs	r2, #255	; 0xff
 80016da:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 80016dc:	2317      	movs	r3, #23
 80016de:	18fb      	adds	r3, r7, r3
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	b25b      	sxtb	r3, r3
}
 80016e4:	0018      	movs	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	b006      	add	sp, #24
 80016ea:	bd80      	pop	{r7, pc}

080016ec <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
 80016ec:	b590      	push	{r4, r7, lr}
 80016ee:	b087      	sub	sp, #28
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
 80016f6:	210f      	movs	r1, #15
 80016f8:	187b      	adds	r3, r7, r1
 80016fa:	1c02      	adds	r2, r0, #0
 80016fc:	701a      	strb	r2, [r3, #0]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 80016fe:	2017      	movs	r0, #23
 8001700:	183b      	adds	r3, r7, r0
 8001702:	2201      	movs	r2, #1
 8001704:	701a      	strb	r2, [r3, #0]

	if (desired_settings & BME280_OSR_HUM_SEL)
 8001706:	187b      	adds	r3, r7, r1
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2204      	movs	r2, #4
 800170c:	4013      	ands	r3, r2
 800170e:	d008      	beq.n	8001722 <set_osr_settings+0x36>
		rslt = set_osr_humidity_settings(settings, dev);
 8001710:	183c      	adds	r4, r7, r0
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	0011      	movs	r1, r2
 8001718:	0018      	movs	r0, r3
 800171a:	f000 f81b 	bl	8001754 <set_osr_humidity_settings>
 800171e:	0003      	movs	r3, r0
 8001720:	7023      	strb	r3, [r4, #0]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8001722:	200f      	movs	r0, #15
 8001724:	183b      	adds	r3, r7, r0
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2203      	movs	r2, #3
 800172a:	4013      	ands	r3, r2
 800172c:	d00a      	beq.n	8001744 <set_osr_settings+0x58>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 800172e:	2317      	movs	r3, #23
 8001730:	18fc      	adds	r4, r7, r3
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	68b9      	ldr	r1, [r7, #8]
 8001736:	183b      	adds	r3, r7, r0
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	0018      	movs	r0, r3
 800173c:	f000 f851 	bl	80017e2 <set_osr_press_temp_settings>
 8001740:	0003      	movs	r3, r0
 8001742:	7023      	strb	r3, [r4, #0]

	return rslt;
 8001744:	2317      	movs	r3, #23
 8001746:	18fb      	adds	r3, r7, r3
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	b25b      	sxtb	r3, r3
}
 800174c:	0018      	movs	r0, r3
 800174e:	46bd      	mov	sp, r7
 8001750:	b007      	add	sp, #28
 8001752:	bd90      	pop	{r4, r7, pc}

08001754 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8001754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 800175e:	250c      	movs	r5, #12
 8001760:	197b      	adds	r3, r7, r5
 8001762:	22f2      	movs	r2, #242	; 0xf2
 8001764:	701a      	strb	r2, [r3, #0]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	789b      	ldrb	r3, [r3, #2]
 800176a:	2207      	movs	r2, #7
 800176c:	4013      	ands	r3, r2
 800176e:	b2da      	uxtb	r2, r3
 8001770:	210e      	movs	r1, #14
 8001772:	187b      	adds	r3, r7, r1
 8001774:	701a      	strb	r2, [r3, #0]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8001776:	260f      	movs	r6, #15
 8001778:	19bc      	adds	r4, r7, r6
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	1879      	adds	r1, r7, r1
 800177e:	1978      	adds	r0, r7, r5
 8001780:	2201      	movs	r2, #1
 8001782:	f7ff fd1d 	bl	80011c0 <bme280_set_regs>
 8001786:	0003      	movs	r3, r0
 8001788:	7023      	strb	r3, [r4, #0]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
 800178a:	0031      	movs	r1, r6
 800178c:	187b      	adds	r3, r7, r1
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	b25b      	sxtb	r3, r3
 8001792:	2b00      	cmp	r3, #0
 8001794:	d11d      	bne.n	80017d2 <set_osr_humidity_settings+0x7e>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 8001796:	197b      	adds	r3, r7, r5
 8001798:	22f4      	movs	r2, #244	; 0xf4
 800179a:	701a      	strb	r2, [r3, #0]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 800179c:	197b      	adds	r3, r7, r5
 800179e:	7818      	ldrb	r0, [r3, #0]
 80017a0:	000e      	movs	r6, r1
 80017a2:	187c      	adds	r4, r7, r1
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	220d      	movs	r2, #13
 80017a8:	18b9      	adds	r1, r7, r2
 80017aa:	2201      	movs	r2, #1
 80017ac:	f7ff fcc0 	bl	8001130 <bme280_get_regs>
 80017b0:	0003      	movs	r3, r0
 80017b2:	7023      	strb	r3, [r4, #0]
		if (rslt == BME280_OK)
 80017b4:	19bb      	adds	r3, r7, r6
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	b25b      	sxtb	r3, r3
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d109      	bne.n	80017d2 <set_osr_humidity_settings+0x7e>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 80017be:	19bc      	adds	r4, r7, r6
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	220d      	movs	r2, #13
 80017c4:	18b9      	adds	r1, r7, r2
 80017c6:	1978      	adds	r0, r7, r5
 80017c8:	2201      	movs	r2, #1
 80017ca:	f7ff fcf9 	bl	80011c0 <bme280_set_regs>
 80017ce:	0003      	movs	r3, r0
 80017d0:	7023      	strb	r3, [r4, #0]
	}

	return rslt;
 80017d2:	230f      	movs	r3, #15
 80017d4:	18fb      	adds	r3, r7, r3
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	b25b      	sxtb	r3, r3
}
 80017da:	0018      	movs	r0, r3
 80017dc:	46bd      	mov	sp, r7
 80017de:	b005      	add	sp, #20
 80017e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017e2 <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 80017e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017e4:	b087      	sub	sp, #28
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
 80017ec:	250f      	movs	r5, #15
 80017ee:	197b      	adds	r3, r7, r5
 80017f0:	1c02      	adds	r2, r0, #0
 80017f2:	701a      	strb	r2, [r3, #0]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 80017f4:	2116      	movs	r1, #22
 80017f6:	187b      	adds	r3, r7, r1
 80017f8:	22f4      	movs	r2, #244	; 0xf4
 80017fa:	701a      	strb	r2, [r3, #0]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80017fc:	187b      	adds	r3, r7, r1
 80017fe:	7818      	ldrb	r0, [r3, #0]
 8001800:	2617      	movs	r6, #23
 8001802:	19bc      	adds	r4, r7, r6
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2215      	movs	r2, #21
 8001808:	18b9      	adds	r1, r7, r2
 800180a:	2201      	movs	r2, #1
 800180c:	f7ff fc90 	bl	8001130 <bme280_get_regs>
 8001810:	0003      	movs	r3, r0
 8001812:	7023      	strb	r3, [r4, #0]

	if (rslt == BME280_OK) {
 8001814:	19bb      	adds	r3, r7, r6
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	b25b      	sxtb	r3, r3
 800181a:	2b00      	cmp	r3, #0
 800181c:	d124      	bne.n	8001868 <set_osr_press_temp_settings+0x86>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 800181e:	197b      	adds	r3, r7, r5
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2201      	movs	r2, #1
 8001824:	4013      	ands	r3, r2
 8001826:	d006      	beq.n	8001836 <set_osr_press_temp_settings+0x54>
			fill_osr_press_settings(&reg_data, settings);
 8001828:	68ba      	ldr	r2, [r7, #8]
 800182a:	2315      	movs	r3, #21
 800182c:	18fb      	adds	r3, r7, r3
 800182e:	0011      	movs	r1, r2
 8001830:	0018      	movs	r0, r3
 8001832:	f000 f89f 	bl	8001974 <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 8001836:	230f      	movs	r3, #15
 8001838:	18fb      	adds	r3, r7, r3
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2202      	movs	r2, #2
 800183e:	4013      	ands	r3, r2
 8001840:	d006      	beq.n	8001850 <set_osr_press_temp_settings+0x6e>
			fill_osr_temp_settings(&reg_data, settings);
 8001842:	68ba      	ldr	r2, [r7, #8]
 8001844:	2315      	movs	r3, #21
 8001846:	18fb      	adds	r3, r7, r3
 8001848:	0011      	movs	r1, r2
 800184a:	0018      	movs	r0, r3
 800184c:	f000 f8ad 	bl	80019aa <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001850:	2317      	movs	r3, #23
 8001852:	18fc      	adds	r4, r7, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2215      	movs	r2, #21
 8001858:	18b9      	adds	r1, r7, r2
 800185a:	2216      	movs	r2, #22
 800185c:	18b8      	adds	r0, r7, r2
 800185e:	2201      	movs	r2, #1
 8001860:	f7ff fcae 	bl	80011c0 <bme280_set_regs>
 8001864:	0003      	movs	r3, r0
 8001866:	7023      	strb	r3, [r4, #0]
	}

	return rslt;
 8001868:	2317      	movs	r3, #23
 800186a:	18fb      	adds	r3, r7, r3
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	b25b      	sxtb	r3, r3
}
 8001870:	0018      	movs	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	b007      	add	sp, #28
 8001876:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001878 <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 8001878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800187a:	b087      	sub	sp, #28
 800187c:	af00      	add	r7, sp, #0
 800187e:	60b9      	str	r1, [r7, #8]
 8001880:	607a      	str	r2, [r7, #4]
 8001882:	250f      	movs	r5, #15
 8001884:	197b      	adds	r3, r7, r5
 8001886:	1c02      	adds	r2, r0, #0
 8001888:	701a      	strb	r2, [r3, #0]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 800188a:	2116      	movs	r1, #22
 800188c:	187b      	adds	r3, r7, r1
 800188e:	22f5      	movs	r2, #245	; 0xf5
 8001890:	701a      	strb	r2, [r3, #0]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8001892:	187b      	adds	r3, r7, r1
 8001894:	7818      	ldrb	r0, [r3, #0]
 8001896:	2617      	movs	r6, #23
 8001898:	19bc      	adds	r4, r7, r6
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2215      	movs	r2, #21
 800189e:	18b9      	adds	r1, r7, r2
 80018a0:	2201      	movs	r2, #1
 80018a2:	f7ff fc45 	bl	8001130 <bme280_get_regs>
 80018a6:	0003      	movs	r3, r0
 80018a8:	7023      	strb	r3, [r4, #0]

	if (rslt == BME280_OK) {
 80018aa:	19bb      	adds	r3, r7, r6
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	b25b      	sxtb	r3, r3
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d124      	bne.n	80018fe <set_filter_standby_settings+0x86>
		if (desired_settings & BME280_FILTER_SEL)
 80018b4:	197b      	adds	r3, r7, r5
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2208      	movs	r2, #8
 80018ba:	4013      	ands	r3, r2
 80018bc:	d006      	beq.n	80018cc <set_filter_standby_settings+0x54>
			fill_filter_settings(&reg_data, settings);
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	2315      	movs	r3, #21
 80018c2:	18fb      	adds	r3, r7, r3
 80018c4:	0011      	movs	r1, r2
 80018c6:	0018      	movs	r0, r3
 80018c8:	f000 f821 	bl	800190e <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
 80018cc:	230f      	movs	r3, #15
 80018ce:	18fb      	adds	r3, r7, r3
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	2210      	movs	r2, #16
 80018d4:	4013      	ands	r3, r2
 80018d6:	d006      	beq.n	80018e6 <set_filter_standby_settings+0x6e>
			fill_standby_settings(&reg_data, settings);
 80018d8:	68ba      	ldr	r2, [r7, #8]
 80018da:	2315      	movs	r3, #21
 80018dc:	18fb      	adds	r3, r7, r3
 80018de:	0011      	movs	r1, r2
 80018e0:	0018      	movs	r0, r3
 80018e2:	f000 f82f 	bl	8001944 <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80018e6:	2317      	movs	r3, #23
 80018e8:	18fc      	adds	r4, r7, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2215      	movs	r2, #21
 80018ee:	18b9      	adds	r1, r7, r2
 80018f0:	2216      	movs	r2, #22
 80018f2:	18b8      	adds	r0, r7, r2
 80018f4:	2201      	movs	r2, #1
 80018f6:	f7ff fc63 	bl	80011c0 <bme280_set_regs>
 80018fa:	0003      	movs	r3, r0
 80018fc:	7023      	strb	r3, [r4, #0]
	}

	return rslt;
 80018fe:	2317      	movs	r3, #23
 8001900:	18fb      	adds	r3, r7, r3
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	b25b      	sxtb	r3, r3
}
 8001906:	0018      	movs	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	b007      	add	sp, #28
 800190c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800190e <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b082      	sub	sp, #8
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
 8001916:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	b25b      	sxtb	r3, r3
 800191e:	221c      	movs	r2, #28
 8001920:	4393      	bics	r3, r2
 8001922:	b25a      	sxtb	r2, r3
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	78db      	ldrb	r3, [r3, #3]
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	b25b      	sxtb	r3, r3
 800192c:	211c      	movs	r1, #28
 800192e:	400b      	ands	r3, r1
 8001930:	b25b      	sxtb	r3, r3
 8001932:	4313      	orrs	r3, r2
 8001934:	b25b      	sxtb	r3, r3
 8001936:	b2da      	uxtb	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	701a      	strb	r2, [r3, #0]
}
 800193c:	46c0      	nop			; (mov r8, r8)
 800193e:	46bd      	mov	sp, r7
 8001940:	b002      	add	sp, #8
 8001942:	bd80      	pop	{r7, pc}

08001944 <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	b25b      	sxtb	r3, r3
 8001954:	221f      	movs	r2, #31
 8001956:	4013      	ands	r3, r2
 8001958:	b25a      	sxtb	r2, r3
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	791b      	ldrb	r3, [r3, #4]
 800195e:	015b      	lsls	r3, r3, #5
 8001960:	b25b      	sxtb	r3, r3
 8001962:	4313      	orrs	r3, r2
 8001964:	b25b      	sxtb	r3, r3
 8001966:	b2da      	uxtb	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	701a      	strb	r2, [r3, #0]
}
 800196c:	46c0      	nop			; (mov r8, r8)
 800196e:	46bd      	mov	sp, r7
 8001970:	b002      	add	sp, #8
 8001972:	bd80      	pop	{r7, pc}

08001974 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	b25b      	sxtb	r3, r3
 8001984:	221c      	movs	r2, #28
 8001986:	4393      	bics	r3, r2
 8001988:	b25a      	sxtb	r2, r3
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	b25b      	sxtb	r3, r3
 8001992:	211c      	movs	r1, #28
 8001994:	400b      	ands	r3, r1
 8001996:	b25b      	sxtb	r3, r3
 8001998:	4313      	orrs	r3, r2
 800199a:	b25b      	sxtb	r3, r3
 800199c:	b2da      	uxtb	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	701a      	strb	r2, [r3, #0]
}
 80019a2:	46c0      	nop			; (mov r8, r8)
 80019a4:	46bd      	mov	sp, r7
 80019a6:	b002      	add	sp, #8
 80019a8:	bd80      	pop	{r7, pc}

080019aa <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
 80019b2:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	b25b      	sxtb	r3, r3
 80019ba:	221f      	movs	r2, #31
 80019bc:	4013      	ands	r3, r2
 80019be:	b25a      	sxtb	r2, r3
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	785b      	ldrb	r3, [r3, #1]
 80019c4:	015b      	lsls	r3, r3, #5
 80019c6:	b25b      	sxtb	r3, r3
 80019c8:	4313      	orrs	r3, r2
 80019ca:	b25b      	sxtb	r3, r3
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	701a      	strb	r2, [r3, #0]
}
 80019d2:	46c0      	nop			; (mov r8, r8)
 80019d4:	46bd      	mov	sp, r7
 80019d6:	b002      	add	sp, #8
 80019d8:	bd80      	pop	{r7, pc}

080019da <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
 80019e2:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2207      	movs	r2, #7
 80019ea:	4013      	ands	r3, r2
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	3302      	adds	r3, #2
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	109b      	asrs	r3, r3, #2
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2207      	movs	r2, #7
 80019fe:	4013      	ands	r3, r2
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	3302      	adds	r3, #2
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	095b      	lsrs	r3, r3, #5
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3303      	adds	r3, #3
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	109b      	asrs	r3, r3, #2
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2207      	movs	r2, #7
 8001a20:	4013      	ands	r3, r2
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3303      	adds	r3, #3
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	095b      	lsrs	r3, r3, #5
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	711a      	strb	r2, [r3, #4]
}
 8001a36:	46c0      	nop			; (mov r8, r8)
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	b002      	add	sp, #8
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <write_power_mode>:
/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8001a3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a40:	b085      	sub	sp, #20
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	0002      	movs	r2, r0
 8001a46:	6039      	str	r1, [r7, #0]
 8001a48:	1dfb      	adds	r3, r7, #7
 8001a4a:	701a      	strb	r2, [r3, #0]
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 8001a4c:	260e      	movs	r6, #14
 8001a4e:	19bb      	adds	r3, r7, r6
 8001a50:	22f4      	movs	r2, #244	; 0xf4
 8001a52:	701a      	strb	r2, [r3, #0]
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 8001a54:	19bb      	adds	r3, r7, r6
 8001a56:	7818      	ldrb	r0, [r3, #0]
 8001a58:	240f      	movs	r4, #15
 8001a5a:	193c      	adds	r4, r7, r4
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	250d      	movs	r5, #13
 8001a60:	1979      	adds	r1, r7, r5
 8001a62:	2201      	movs	r2, #1
 8001a64:	f7ff fb64 	bl	8001130 <bme280_get_regs>
 8001a68:	0003      	movs	r3, r0
 8001a6a:	7023      	strb	r3, [r4, #0]
	/* Set the power mode */
	if (rslt == BME280_OK) {
 8001a6c:	240f      	movs	r4, #15
 8001a6e:	193b      	adds	r3, r7, r4
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	b25b      	sxtb	r3, r3
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d11a      	bne.n	8001aae <write_power_mode+0x70>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 8001a78:	0028      	movs	r0, r5
 8001a7a:	183b      	adds	r3, r7, r0
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	b25b      	sxtb	r3, r3
 8001a80:	2203      	movs	r2, #3
 8001a82:	4393      	bics	r3, r2
 8001a84:	b25a      	sxtb	r2, r3
 8001a86:	1dfb      	adds	r3, r7, #7
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	b25b      	sxtb	r3, r3
 8001a8c:	2103      	movs	r1, #3
 8001a8e:	400b      	ands	r3, r1
 8001a90:	b25b      	sxtb	r3, r3
 8001a92:	4313      	orrs	r3, r2
 8001a94:	b25b      	sxtb	r3, r3
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	183b      	adds	r3, r7, r0
 8001a9a:	701a      	strb	r2, [r3, #0]
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 8001a9c:	193c      	adds	r4, r7, r4
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	1839      	adds	r1, r7, r0
 8001aa2:	19b8      	adds	r0, r7, r6
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f7ff fb8b 	bl	80011c0 <bme280_set_regs>
 8001aaa:	0003      	movs	r3, r0
 8001aac:	7023      	strb	r3, [r4, #0]
	}

	return rslt;
 8001aae:	230f      	movs	r3, #15
 8001ab0:	18fb      	adds	r3, r7, r3
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	b25b      	sxtb	r3, r3
}
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	b005      	add	sp, #20
 8001abc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001abe <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 8001abe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ac0:	b087      	sub	sp, #28
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 8001ac6:	2517      	movs	r5, #23
 8001ac8:	197c      	adds	r4, r7, r5
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2610      	movs	r6, #16
 8001ace:	19b9      	adds	r1, r7, r6
 8001ad0:	2204      	movs	r2, #4
 8001ad2:	20f2      	movs	r0, #242	; 0xf2
 8001ad4:	f7ff fb2c 	bl	8001130 <bme280_get_regs>
 8001ad8:	0003      	movs	r3, r0
 8001ada:	7023      	strb	r3, [r4, #0]
	if (rslt == BME280_OK) {
 8001adc:	002c      	movs	r4, r5
 8001ade:	193b      	adds	r3, r7, r4
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	b25b      	sxtb	r3, r3
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d11d      	bne.n	8001b24 <put_device_to_sleep+0x66>
		parse_device_settings(reg_data, &settings);
 8001ae8:	2308      	movs	r3, #8
 8001aea:	18fa      	adds	r2, r7, r3
 8001aec:	19bb      	adds	r3, r7, r6
 8001aee:	0011      	movs	r1, r2
 8001af0:	0018      	movs	r0, r3
 8001af2:	f7ff ff72 	bl	80019da <parse_device_settings>
		rslt = bme280_soft_reset(dev);
 8001af6:	0025      	movs	r5, r4
 8001af8:	193c      	adds	r4, r7, r4
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	0018      	movs	r0, r3
 8001afe:	f7ff fcd0 	bl	80014a2 <bme280_soft_reset>
 8001b02:	0003      	movs	r3, r0
 8001b04:	7023      	strb	r3, [r4, #0]
		if (rslt == BME280_OK)
 8001b06:	197b      	adds	r3, r7, r5
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	b25b      	sxtb	r3, r3
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d109      	bne.n	8001b24 <put_device_to_sleep+0x66>
			rslt = reload_device_settings(&settings, dev);
 8001b10:	197c      	adds	r4, r7, r5
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	2308      	movs	r3, #8
 8001b16:	18fb      	adds	r3, r7, r3
 8001b18:	0011      	movs	r1, r2
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	f000 f80a 	bl	8001b34 <reload_device_settings>
 8001b20:	0003      	movs	r3, r0
 8001b22:	7023      	strb	r3, [r4, #0]
	}

	return rslt;
 8001b24:	2317      	movs	r3, #23
 8001b26:	18fb      	adds	r3, r7, r3
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	b25b      	sxtb	r3, r3
}
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	b007      	add	sp, #28
 8001b32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b34 <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8001b34:	b5b0      	push	{r4, r5, r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8001b3e:	250f      	movs	r5, #15
 8001b40:	197c      	adds	r4, r7, r5
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	0019      	movs	r1, r3
 8001b48:	201f      	movs	r0, #31
 8001b4a:	f7ff fdcf 	bl	80016ec <set_osr_settings>
 8001b4e:	0003      	movs	r3, r0
 8001b50:	7023      	strb	r3, [r4, #0]
	if (rslt == BME280_OK)
 8001b52:	197b      	adds	r3, r7, r5
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	b25b      	sxtb	r3, r3
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d108      	bne.n	8001b6e <reload_device_settings+0x3a>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8001b5c:	197c      	adds	r4, r7, r5
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	0019      	movs	r1, r3
 8001b64:	201f      	movs	r0, #31
 8001b66:	f7ff fe87 	bl	8001878 <set_filter_standby_settings>
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	7023      	strb	r3, [r4, #0]

	return rslt;
 8001b6e:	230f      	movs	r3, #15
 8001b70:	18fb      	adds	r3, r7, r3
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	b25b      	sxtb	r3, r3
}
 8001b76:	0018      	movs	r0, r3
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	b004      	add	sp, #16
 8001b7c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001b80 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in integer data type.
 */
static int32_t compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
						struct bme280_calib_data *calib_data)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b088      	sub	sp, #32
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
	int32_t var1;
	int32_t var2;
	int32_t temperature;
	int32_t temperature_min = -4000;
 8001b8a:	4b2b      	ldr	r3, [pc, #172]	; (8001c38 <compensate_temperature+0xb8>)
 8001b8c:	61bb      	str	r3, [r7, #24]
	int32_t temperature_max = 8500;
 8001b8e:	4b2b      	ldr	r3, [pc, #172]	; (8001c3c <compensate_temperature+0xbc>)
 8001b90:	617b      	str	r3, [r7, #20]

	var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_T1 * 2));
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	08db      	lsrs	r3, r3, #3
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	8812      	ldrh	r2, [r2, #0]
 8001b9c:	0052      	lsls	r2, r2, #1
 8001b9e:	1a9b      	subs	r3, r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	2202      	movs	r2, #2
 8001ba6:	5e9b      	ldrsh	r3, [r3, r2]
 8001ba8:	001a      	movs	r2, r3
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	4353      	muls	r3, r2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	da02      	bge.n	8001bb8 <compensate_temperature+0x38>
 8001bb2:	4a23      	ldr	r2, [pc, #140]	; (8001c40 <compensate_temperature+0xc0>)
 8001bb4:	4694      	mov	ip, r2
 8001bb6:	4463      	add	r3, ip
 8001bb8:	12db      	asrs	r3, r3, #11
 8001bba:	613b      	str	r3, [r7, #16]
	var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_T1));
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	091b      	lsrs	r3, r3, #4
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	8812      	ldrh	r2, [r2, #0]
 8001bc6:	1a9b      	subs	r3, r3, r2
 8001bc8:	60fb      	str	r3, [r7, #12]
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	435b      	muls	r3, r3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	da02      	bge.n	8001bd8 <compensate_temperature+0x58>
 8001bd2:	4a1c      	ldr	r2, [pc, #112]	; (8001c44 <compensate_temperature+0xc4>)
 8001bd4:	4694      	mov	ip, r2
 8001bd6:	4463      	add	r3, ip
 8001bd8:	131b      	asrs	r3, r3, #12
 8001bda:	001a      	movs	r2, r3
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	2104      	movs	r1, #4
 8001be0:	5e5b      	ldrsh	r3, [r3, r1]
 8001be2:	4353      	muls	r3, r2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	da02      	bge.n	8001bee <compensate_temperature+0x6e>
 8001be8:	4a17      	ldr	r2, [pc, #92]	; (8001c48 <compensate_temperature+0xc8>)
 8001bea:	4694      	mov	ip, r2
 8001bec:	4463      	add	r3, ip
 8001bee:	139b      	asrs	r3, r3, #14
 8001bf0:	60fb      	str	r3, [r7, #12]
	calib_data->t_fine = var1 + var2;
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	18d2      	adds	r2, r2, r3
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	625a      	str	r2, [r3, #36]	; 0x24
	temperature = (calib_data->t_fine * 5 + 128) / 256;
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c00:	0013      	movs	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	189b      	adds	r3, r3, r2
 8001c06:	3380      	adds	r3, #128	; 0x80
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	da00      	bge.n	8001c0e <compensate_temperature+0x8e>
 8001c0c:	33ff      	adds	r3, #255	; 0xff
 8001c0e:	121b      	asrs	r3, r3, #8
 8001c10:	61fb      	str	r3, [r7, #28]

	if (temperature < temperature_min)
 8001c12:	69fa      	ldr	r2, [r7, #28]
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	da02      	bge.n	8001c20 <compensate_temperature+0xa0>
		temperature = temperature_min;
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	61fb      	str	r3, [r7, #28]
 8001c1e:	e005      	b.n	8001c2c <compensate_temperature+0xac>
	else if (temperature > temperature_max)
 8001c20:	69fa      	ldr	r2, [r7, #28]
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	dd01      	ble.n	8001c2c <compensate_temperature+0xac>
		temperature = temperature_max;
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	61fb      	str	r3, [r7, #28]

	return temperature;
 8001c2c:	69fb      	ldr	r3, [r7, #28]
}
 8001c2e:	0018      	movs	r0, r3
 8001c30:	46bd      	mov	sp, r7
 8001c32:	b008      	add	sp, #32
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	46c0      	nop			; (mov r8, r8)
 8001c38:	fffff060 	.word	0xfffff060
 8001c3c:	00002134 	.word	0x00002134
 8001c40:	000007ff 	.word	0x000007ff
 8001c44:	00000fff 	.word	0x00000fff
 8001c48:	00003fff 	.word	0x00003fff

08001c4c <compensate_pressure>:
 * return the compensated pressure data in integer data type with higher
 * accuracy.
 */
static uint32_t compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8001c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c4e:	b0bf      	sub	sp, #252	; 0xfc
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	23bc      	movs	r3, #188	; 0xbc
 8001c54:	2208      	movs	r2, #8
 8001c56:	189b      	adds	r3, r3, r2
 8001c58:	19db      	adds	r3, r3, r7
 8001c5a:	6018      	str	r0, [r3, #0]
 8001c5c:	22b8      	movs	r2, #184	; 0xb8
 8001c5e:	2308      	movs	r3, #8
 8001c60:	18d3      	adds	r3, r2, r3
 8001c62:	19db      	adds	r3, r3, r7
 8001c64:	6019      	str	r1, [r3, #0]
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int64_t var4;
	uint32_t pressure;
	uint32_t pressure_min = 3000000;
 8001c66:	4be5      	ldr	r3, [pc, #916]	; (8001ffc <compensate_pressure+0x3b0>)
 8001c68:	21e8      	movs	r1, #232	; 0xe8
 8001c6a:	2008      	movs	r0, #8
 8001c6c:	1809      	adds	r1, r1, r0
 8001c6e:	19c9      	adds	r1, r1, r7
 8001c70:	600b      	str	r3, [r1, #0]
	uint32_t pressure_max = 11000000;
 8001c72:	4be3      	ldr	r3, [pc, #908]	; (8002000 <compensate_pressure+0x3b4>)
 8001c74:	21e4      	movs	r1, #228	; 0xe4
 8001c76:	2008      	movs	r0, #8
 8001c78:	1809      	adds	r1, r1, r0
 8001c7a:	19c9      	adds	r1, r1, r7
 8001c7c:	600b      	str	r3, [r1, #0]

	var1 = ((int64_t)calib_data->t_fine) - 128000;
 8001c7e:	2308      	movs	r3, #8
 8001c80:	18d3      	adds	r3, r2, r3
 8001c82:	19db      	adds	r3, r3, r7
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c88:	663b      	str	r3, [r7, #96]	; 0x60
 8001c8a:	17db      	asrs	r3, r3, #31
 8001c8c:	667b      	str	r3, [r7, #100]	; 0x64
 8001c8e:	4add      	ldr	r2, [pc, #884]	; (8002004 <compensate_pressure+0x3b8>)
 8001c90:	2301      	movs	r3, #1
 8001c92:	425b      	negs	r3, r3
 8001c94:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001c96:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001c98:	1880      	adds	r0, r0, r2
 8001c9a:	4159      	adcs	r1, r3
 8001c9c:	0002      	movs	r2, r0
 8001c9e:	000b      	movs	r3, r1
 8001ca0:	26d8      	movs	r6, #216	; 0xd8
 8001ca2:	2108      	movs	r1, #8
 8001ca4:	1871      	adds	r1, r6, r1
 8001ca6:	19c9      	adds	r1, r1, r7
 8001ca8:	600a      	str	r2, [r1, #0]
 8001caa:	604b      	str	r3, [r1, #4]
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 8001cac:	2308      	movs	r3, #8
 8001cae:	18f3      	adds	r3, r6, r3
 8001cb0:	19db      	adds	r3, r3, r7
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2108      	movs	r1, #8
 8001cb8:	1871      	adds	r1, r6, r1
 8001cba:	19c9      	adds	r1, r1, r7
 8001cbc:	6808      	ldr	r0, [r1, #0]
 8001cbe:	6849      	ldr	r1, [r1, #4]
 8001cc0:	f7fe fbda 	bl	8000478 <__aeabi_lmul>
 8001cc4:	0002      	movs	r2, r0
 8001cc6:	000b      	movs	r3, r1
 8001cc8:	0010      	movs	r0, r2
 8001cca:	0019      	movs	r1, r3
 8001ccc:	22b8      	movs	r2, #184	; 0xb8
 8001cce:	2308      	movs	r3, #8
 8001cd0:	18d3      	adds	r3, r2, r3
 8001cd2:	19db      	adds	r3, r3, r7
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2210      	movs	r2, #16
 8001cd8:	5e9b      	ldrsh	r3, [r3, r2]
 8001cda:	65bb      	str	r3, [r7, #88]	; 0x58
 8001cdc:	17db      	asrs	r3, r3, #31
 8001cde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ce0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ce2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ce4:	f7fe fbc8 	bl	8000478 <__aeabi_lmul>
 8001ce8:	0002      	movs	r2, r0
 8001cea:	000b      	movs	r3, r1
 8001cec:	21d0      	movs	r1, #208	; 0xd0
 8001cee:	2008      	movs	r0, #8
 8001cf0:	1809      	adds	r1, r1, r0
 8001cf2:	19c8      	adds	r0, r1, r7
 8001cf4:	6002      	str	r2, [r0, #0]
 8001cf6:	6043      	str	r3, [r0, #4]
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 8001cf8:	22b8      	movs	r2, #184	; 0xb8
 8001cfa:	2308      	movs	r3, #8
 8001cfc:	18d3      	adds	r3, r2, r3
 8001cfe:	19db      	adds	r3, r3, r7
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	220e      	movs	r2, #14
 8001d04:	5e9b      	ldrsh	r3, [r3, r2]
 8001d06:	653b      	str	r3, [r7, #80]	; 0x50
 8001d08:	17db      	asrs	r3, r3, #31
 8001d0a:	657b      	str	r3, [r7, #84]	; 0x54
 8001d0c:	2308      	movs	r3, #8
 8001d0e:	18f3      	adds	r3, r6, r3
 8001d10:	19db      	adds	r3, r3, r7
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001d18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001d1a:	f7fe fbad 	bl	8000478 <__aeabi_lmul>
 8001d1e:	0002      	movs	r2, r0
 8001d20:	000b      	movs	r3, r1
 8001d22:	0bd1      	lsrs	r1, r2, #15
 8001d24:	045d      	lsls	r5, r3, #17
 8001d26:	430d      	orrs	r5, r1
 8001d28:	0454      	lsls	r4, r2, #17
 8001d2a:	21d0      	movs	r1, #208	; 0xd0
 8001d2c:	2308      	movs	r3, #8
 8001d2e:	18cb      	adds	r3, r1, r3
 8001d30:	19db      	adds	r3, r3, r7
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	1912      	adds	r2, r2, r4
 8001d38:	416b      	adcs	r3, r5
 8001d3a:	2008      	movs	r0, #8
 8001d3c:	1808      	adds	r0, r1, r0
 8001d3e:	19c0      	adds	r0, r0, r7
 8001d40:	6002      	str	r2, [r0, #0]
 8001d42:	6043      	str	r3, [r0, #4]
	var2 = var2 + (((int64_t)calib_data->dig_P4) * 34359738368);
 8001d44:	24b8      	movs	r4, #184	; 0xb8
 8001d46:	2308      	movs	r3, #8
 8001d48:	18e3      	adds	r3, r4, r3
 8001d4a:	19db      	adds	r3, r3, r7
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	220c      	movs	r2, #12
 8001d50:	5e9b      	ldrsh	r3, [r3, r2]
 8001d52:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d54:	17db      	asrs	r3, r3, #31
 8001d56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	647b      	str	r3, [r7, #68]	; 0x44
 8001d5e:	2300      	movs	r3, #0
 8001d60:	643b      	str	r3, [r7, #64]	; 0x40
 8001d62:	000d      	movs	r5, r1
 8001d64:	2308      	movs	r3, #8
 8001d66:	18cb      	adds	r3, r1, r3
 8001d68:	19db      	adds	r3, r3, r7
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001d70:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001d72:	1812      	adds	r2, r2, r0
 8001d74:	414b      	adcs	r3, r1
 8001d76:	2108      	movs	r1, #8
 8001d78:	1869      	adds	r1, r5, r1
 8001d7a:	19c9      	adds	r1, r1, r7
 8001d7c:	600a      	str	r2, [r1, #0]
 8001d7e:	604b      	str	r3, [r1, #4]
	var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) / 256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 8001d80:	2308      	movs	r3, #8
 8001d82:	18f3      	adds	r3, r6, r3
 8001d84:	19db      	adds	r3, r3, r7
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2108      	movs	r1, #8
 8001d8c:	1871      	adds	r1, r6, r1
 8001d8e:	19c9      	adds	r1, r1, r7
 8001d90:	6808      	ldr	r0, [r1, #0]
 8001d92:	6849      	ldr	r1, [r1, #4]
 8001d94:	f7fe fb70 	bl	8000478 <__aeabi_lmul>
 8001d98:	0002      	movs	r2, r0
 8001d9a:	000b      	movs	r3, r1
 8001d9c:	0010      	movs	r0, r2
 8001d9e:	0019      	movs	r1, r3
 8001da0:	2308      	movs	r3, #8
 8001da2:	18e3      	adds	r3, r4, r3
 8001da4:	19db      	adds	r3, r3, r7
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	220a      	movs	r2, #10
 8001daa:	5e9b      	ldrsh	r3, [r3, r2]
 8001dac:	63bb      	str	r3, [r7, #56]	; 0x38
 8001dae:	17db      	asrs	r3, r3, #31
 8001db0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001db2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001db4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001db6:	f7fe fb5f 	bl	8000478 <__aeabi_lmul>
 8001dba:	0002      	movs	r2, r0
 8001dbc:	000b      	movs	r3, r1
 8001dbe:	0010      	movs	r0, r2
 8001dc0:	0019      	movs	r1, r3
 8001dc2:	2900      	cmp	r1, #0
 8001dc4:	da05      	bge.n	8001dd2 <compensate_pressure+0x186>
 8001dc6:	22ff      	movs	r2, #255	; 0xff
 8001dc8:	2300      	movs	r3, #0
 8001dca:	1812      	adds	r2, r2, r0
 8001dcc:	414b      	adcs	r3, r1
 8001dce:	0010      	movs	r0, r2
 8001dd0:	0019      	movs	r1, r3
 8001dd2:	060b      	lsls	r3, r1, #24
 8001dd4:	0a02      	lsrs	r2, r0, #8
 8001dd6:	2498      	movs	r4, #152	; 0x98
 8001dd8:	2508      	movs	r5, #8
 8001dda:	1965      	adds	r5, r4, r5
 8001ddc:	19ed      	adds	r5, r5, r7
 8001dde:	602a      	str	r2, [r5, #0]
 8001de0:	2208      	movs	r2, #8
 8001de2:	18a2      	adds	r2, r4, r2
 8001de4:	19d2      	adds	r2, r2, r7
 8001de6:	6812      	ldr	r2, [r2, #0]
 8001de8:	431a      	orrs	r2, r3
 8001dea:	2308      	movs	r3, #8
 8001dec:	18e3      	adds	r3, r4, r3
 8001dee:	19db      	adds	r3, r3, r7
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	120b      	asrs	r3, r1, #8
 8001df4:	229c      	movs	r2, #156	; 0x9c
 8001df6:	2108      	movs	r1, #8
 8001df8:	1852      	adds	r2, r2, r1
 8001dfa:	19d2      	adds	r2, r2, r7
 8001dfc:	6013      	str	r3, [r2, #0]
 8001dfe:	2308      	movs	r3, #8
 8001e00:	18e3      	adds	r3, r4, r3
 8001e02:	19db      	adds	r3, r3, r7
 8001e04:	685c      	ldr	r4, [r3, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	603b      	str	r3, [r7, #0]
 8001e0a:	607c      	str	r4, [r7, #4]
 8001e0c:	25b8      	movs	r5, #184	; 0xb8
 8001e0e:	2308      	movs	r3, #8
 8001e10:	18eb      	adds	r3, r5, r3
 8001e12:	19db      	adds	r3, r3, r7
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2208      	movs	r2, #8
 8001e18:	5e9b      	ldrsh	r3, [r3, r2]
 8001e1a:	633b      	str	r3, [r7, #48]	; 0x30
 8001e1c:	17db      	asrs	r3, r3, #31
 8001e1e:	637b      	str	r3, [r7, #52]	; 0x34
 8001e20:	26d8      	movs	r6, #216	; 0xd8
 8001e22:	2308      	movs	r3, #8
 8001e24:	18f3      	adds	r3, r6, r3
 8001e26:	19db      	adds	r3, r3, r7
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e2e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001e30:	f7fe fb22 	bl	8000478 <__aeabi_lmul>
 8001e34:	0002      	movs	r2, r0
 8001e36:	000b      	movs	r3, r1
 8001e38:	0d11      	lsrs	r1, r2, #20
 8001e3a:	468c      	mov	ip, r1
 8001e3c:	0318      	lsls	r0, r3, #12
 8001e3e:	24b4      	movs	r4, #180	; 0xb4
 8001e40:	2108      	movs	r1, #8
 8001e42:	1864      	adds	r4, r4, r1
 8001e44:	19e4      	adds	r4, r4, r7
 8001e46:	6020      	str	r0, [r4, #0]
 8001e48:	20b4      	movs	r0, #180	; 0xb4
 8001e4a:	2108      	movs	r1, #8
 8001e4c:	1841      	adds	r1, r0, r1
 8001e4e:	19cc      	adds	r4, r1, r7
 8001e50:	6820      	ldr	r0, [r4, #0]
 8001e52:	4661      	mov	r1, ip
 8001e54:	4308      	orrs	r0, r1
 8001e56:	21b4      	movs	r1, #180	; 0xb4
 8001e58:	2408      	movs	r4, #8
 8001e5a:	1909      	adds	r1, r1, r4
 8001e5c:	19c9      	adds	r1, r1, r7
 8001e5e:	6008      	str	r0, [r1, #0]
 8001e60:	0313      	lsls	r3, r2, #12
 8001e62:	22b0      	movs	r2, #176	; 0xb0
 8001e64:	2108      	movs	r1, #8
 8001e66:	1851      	adds	r1, r2, r1
 8001e68:	19c9      	adds	r1, r1, r7
 8001e6a:	600b      	str	r3, [r1, #0]
 8001e6c:	2308      	movs	r3, #8
 8001e6e:	18d3      	adds	r3, r2, r3
 8001e70:	19db      	adds	r3, r3, r7
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	6838      	ldr	r0, [r7, #0]
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	1812      	adds	r2, r2, r0
 8001e7c:	414b      	adcs	r3, r1
 8001e7e:	2108      	movs	r1, #8
 8001e80:	1871      	adds	r1, r6, r1
 8001e82:	19c9      	adds	r1, r1, r7
 8001e84:	600a      	str	r2, [r1, #0]
 8001e86:	604b      	str	r3, [r1, #4]
	var3 = ((int64_t)1) * 140737488355328;
 8001e88:	2200      	movs	r2, #0
 8001e8a:	2380      	movs	r3, #128	; 0x80
 8001e8c:	021b      	lsls	r3, r3, #8
 8001e8e:	21c8      	movs	r1, #200	; 0xc8
 8001e90:	2008      	movs	r0, #8
 8001e92:	1808      	adds	r0, r1, r0
 8001e94:	19c0      	adds	r0, r0, r7
 8001e96:	6002      	str	r2, [r0, #0]
 8001e98:	6043      	str	r3, [r0, #4]
	var1 = (var3 + var1) * ((int64_t)calib_data->dig_P1) / 8589934592;
 8001e9a:	2308      	movs	r3, #8
 8001e9c:	18cb      	adds	r3, r1, r3
 8001e9e:	19db      	adds	r3, r3, r7
 8001ea0:	6818      	ldr	r0, [r3, #0]
 8001ea2:	6859      	ldr	r1, [r3, #4]
 8001ea4:	2308      	movs	r3, #8
 8001ea6:	18f3      	adds	r3, r6, r3
 8001ea8:	19db      	adds	r3, r3, r7
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	1880      	adds	r0, r0, r2
 8001eb0:	4159      	adcs	r1, r3
 8001eb2:	2308      	movs	r3, #8
 8001eb4:	18eb      	adds	r3, r5, r3
 8001eb6:	19db      	adds	r3, r3, r7
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	88db      	ldrh	r3, [r3, #6]
 8001ebc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ec2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec6:	f7fe fad7 	bl	8000478 <__aeabi_lmul>
 8001eca:	0002      	movs	r2, r0
 8001ecc:	000b      	movs	r3, r1
 8001ece:	0010      	movs	r0, r2
 8001ed0:	0019      	movs	r1, r3
 8001ed2:	2900      	cmp	r1, #0
 8001ed4:	da06      	bge.n	8001ee4 <compensate_pressure+0x298>
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	4252      	negs	r2, r2
 8001eda:	2301      	movs	r3, #1
 8001edc:	1812      	adds	r2, r2, r0
 8001ede:	414b      	adcs	r3, r1
 8001ee0:	0010      	movs	r0, r2
 8001ee2:	0019      	movs	r1, r3
 8001ee4:	104b      	asrs	r3, r1, #1
 8001ee6:	60bb      	str	r3, [r7, #8]
 8001ee8:	17cb      	asrs	r3, r1, #31
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	68fc      	ldr	r4, [r7, #12]
 8001ef0:	25d8      	movs	r5, #216	; 0xd8
 8001ef2:	2208      	movs	r2, #8
 8001ef4:	18aa      	adds	r2, r5, r2
 8001ef6:	19d2      	adds	r2, r2, r7
 8001ef8:	6013      	str	r3, [r2, #0]
 8001efa:	6054      	str	r4, [r2, #4]

	/* To avoid divide by zero exception */
	if (var1 != 0) {
 8001efc:	2308      	movs	r3, #8
 8001efe:	18eb      	adds	r3, r5, r3
 8001f00:	19db      	adds	r3, r3, r7
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	23dc      	movs	r3, #220	; 0xdc
 8001f06:	2108      	movs	r1, #8
 8001f08:	185b      	adds	r3, r3, r1
 8001f0a:	19db      	adds	r3, r3, r7
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	431a      	orrs	r2, r3
 8001f10:	d100      	bne.n	8001f14 <compensate_pressure+0x2c8>
 8001f12:	e1ed      	b.n	80022f0 <compensate_pressure+0x6a4>
		var4 = 1048576 - uncomp_data->pressure;
 8001f14:	23bc      	movs	r3, #188	; 0xbc
 8001f16:	2208      	movs	r2, #8
 8001f18:	189b      	adds	r3, r3, r2
 8001f1a:	19db      	adds	r3, r3, r7
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	2380      	movs	r3, #128	; 0x80
 8001f22:	035b      	lsls	r3, r3, #13
 8001f24:	1a9b      	subs	r3, r3, r2
 8001f26:	24c0      	movs	r4, #192	; 0xc0
 8001f28:	2208      	movs	r2, #8
 8001f2a:	18a2      	adds	r2, r4, r2
 8001f2c:	19d2      	adds	r2, r2, r7
 8001f2e:	6013      	str	r3, [r2, #0]
 8001f30:	2300      	movs	r3, #0
 8001f32:	21c4      	movs	r1, #196	; 0xc4
 8001f34:	2208      	movs	r2, #8
 8001f36:	188a      	adds	r2, r1, r2
 8001f38:	19d2      	adds	r2, r2, r7
 8001f3a:	6013      	str	r3, [r2, #0]
		var4 = (((var4 * 2147483648) - var2) * 3125) / var1;
 8001f3c:	2308      	movs	r3, #8
 8001f3e:	18e3      	adds	r3, r4, r3
 8001f40:	19db      	adds	r3, r3, r7
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	085a      	lsrs	r2, r3, #1
 8001f46:	2308      	movs	r3, #8
 8001f48:	18cb      	adds	r3, r1, r3
 8001f4a:	19db      	adds	r3, r3, r7
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	07db      	lsls	r3, r3, #31
 8001f50:	21ac      	movs	r1, #172	; 0xac
 8001f52:	2008      	movs	r0, #8
 8001f54:	1808      	adds	r0, r1, r0
 8001f56:	19c0      	adds	r0, r0, r7
 8001f58:	6003      	str	r3, [r0, #0]
 8001f5a:	2308      	movs	r3, #8
 8001f5c:	18cb      	adds	r3, r1, r3
 8001f5e:	19db      	adds	r3, r3, r7
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	2208      	movs	r2, #8
 8001f66:	188a      	adds	r2, r1, r2
 8001f68:	19d2      	adds	r2, r2, r7
 8001f6a:	6013      	str	r3, [r2, #0]
 8001f6c:	2308      	movs	r3, #8
 8001f6e:	18e3      	adds	r3, r4, r3
 8001f70:	19db      	adds	r3, r3, r7
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	07db      	lsls	r3, r3, #31
 8001f76:	21a8      	movs	r1, #168	; 0xa8
 8001f78:	2208      	movs	r2, #8
 8001f7a:	188a      	adds	r2, r1, r2
 8001f7c:	19d2      	adds	r2, r2, r7
 8001f7e:	6013      	str	r3, [r2, #0]
 8001f80:	23d0      	movs	r3, #208	; 0xd0
 8001f82:	2208      	movs	r2, #8
 8001f84:	189b      	adds	r3, r3, r2
 8001f86:	19db      	adds	r3, r3, r7
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	2008      	movs	r0, #8
 8001f8e:	1809      	adds	r1, r1, r0
 8001f90:	19c9      	adds	r1, r1, r7
 8001f92:	6808      	ldr	r0, [r1, #0]
 8001f94:	6849      	ldr	r1, [r1, #4]
 8001f96:	1a80      	subs	r0, r0, r2
 8001f98:	4199      	sbcs	r1, r3
 8001f9a:	4a1b      	ldr	r2, [pc, #108]	; (8002008 <compensate_pressure+0x3bc>)
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	f7fe fa6b 	bl	8000478 <__aeabi_lmul>
 8001fa2:	0002      	movs	r2, r0
 8001fa4:	000b      	movs	r3, r1
 8001fa6:	0010      	movs	r0, r2
 8001fa8:	0019      	movs	r1, r3
 8001faa:	2308      	movs	r3, #8
 8001fac:	18eb      	adds	r3, r5, r3
 8001fae:	19db      	adds	r3, r3, r7
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f7fe fa1c 	bl	80003f0 <__aeabi_ldivmod>
 8001fb8:	0002      	movs	r2, r0
 8001fba:	000b      	movs	r3, r1
 8001fbc:	2108      	movs	r1, #8
 8001fbe:	1861      	adds	r1, r4, r1
 8001fc0:	19c9      	adds	r1, r1, r7
 8001fc2:	600a      	str	r2, [r1, #0]
 8001fc4:	604b      	str	r3, [r1, #4]
		var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 8001fc6:	23b8      	movs	r3, #184	; 0xb8
 8001fc8:	2208      	movs	r2, #8
 8001fca:	189b      	adds	r3, r3, r2
 8001fcc:	19db      	adds	r3, r3, r7
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2216      	movs	r2, #22
 8001fd2:	5e9b      	ldrsh	r3, [r3, r2]
 8001fd4:	623b      	str	r3, [r7, #32]
 8001fd6:	17db      	asrs	r3, r3, #31
 8001fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8001fda:	2308      	movs	r3, #8
 8001fdc:	18e3      	adds	r3, r4, r3
 8001fde:	19db      	adds	r3, r3, r7
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	0010      	movs	r0, r2
 8001fe6:	0019      	movs	r1, r3
 8001fe8:	2900      	cmp	r1, #0
 8001fea:	da11      	bge.n	8002010 <compensate_pressure+0x3c4>
 8001fec:	4a07      	ldr	r2, [pc, #28]	; (800200c <compensate_pressure+0x3c0>)
 8001fee:	2300      	movs	r3, #0
 8001ff0:	1812      	adds	r2, r2, r0
 8001ff2:	414b      	adcs	r3, r1
 8001ff4:	0010      	movs	r0, r2
 8001ff6:	0019      	movs	r1, r3
 8001ff8:	e00a      	b.n	8002010 <compensate_pressure+0x3c4>
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	002dc6c0 	.word	0x002dc6c0
 8002000:	00a7d8c0 	.word	0x00a7d8c0
 8002004:	fffe0c00 	.word	0xfffe0c00
 8002008:	00000c35 	.word	0x00000c35
 800200c:	00001fff 	.word	0x00001fff
 8002010:	04cb      	lsls	r3, r1, #19
 8002012:	0b42      	lsrs	r2, r0, #13
 8002014:	2490      	movs	r4, #144	; 0x90
 8002016:	2508      	movs	r5, #8
 8002018:	1965      	adds	r5, r4, r5
 800201a:	19ed      	adds	r5, r5, r7
 800201c:	602a      	str	r2, [r5, #0]
 800201e:	2208      	movs	r2, #8
 8002020:	18a2      	adds	r2, r4, r2
 8002022:	19d2      	adds	r2, r2, r7
 8002024:	6812      	ldr	r2, [r2, #0]
 8002026:	431a      	orrs	r2, r3
 8002028:	2308      	movs	r3, #8
 800202a:	18e3      	adds	r3, r4, r3
 800202c:	19db      	adds	r3, r3, r7
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	134b      	asrs	r3, r1, #13
 8002032:	2294      	movs	r2, #148	; 0x94
 8002034:	2108      	movs	r1, #8
 8002036:	1852      	adds	r2, r2, r1
 8002038:	19d2      	adds	r2, r2, r7
 800203a:	6013      	str	r3, [r2, #0]
 800203c:	2308      	movs	r3, #8
 800203e:	18e3      	adds	r3, r4, r3
 8002040:	19db      	adds	r3, r3, r7
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	6a38      	ldr	r0, [r7, #32]
 8002048:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800204a:	f7fe fa15 	bl	8000478 <__aeabi_lmul>
 800204e:	0002      	movs	r2, r0
 8002050:	000b      	movs	r3, r1
 8002052:	0014      	movs	r4, r2
 8002054:	001d      	movs	r5, r3
 8002056:	23c0      	movs	r3, #192	; 0xc0
 8002058:	2208      	movs	r2, #8
 800205a:	189b      	adds	r3, r3, r2
 800205c:	19db      	adds	r3, r3, r7
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	0010      	movs	r0, r2
 8002064:	0019      	movs	r1, r3
 8002066:	2900      	cmp	r1, #0
 8002068:	da05      	bge.n	8002076 <compensate_pressure+0x42a>
 800206a:	4aab      	ldr	r2, [pc, #684]	; (8002318 <compensate_pressure+0x6cc>)
 800206c:	2300      	movs	r3, #0
 800206e:	1812      	adds	r2, r2, r0
 8002070:	414b      	adcs	r3, r1
 8002072:	0010      	movs	r0, r2
 8002074:	0019      	movs	r1, r3
 8002076:	04cb      	lsls	r3, r1, #19
 8002078:	469c      	mov	ip, r3
 800207a:	0b42      	lsrs	r2, r0, #13
 800207c:	2688      	movs	r6, #136	; 0x88
 800207e:	2308      	movs	r3, #8
 8002080:	18f3      	adds	r3, r6, r3
 8002082:	19db      	adds	r3, r3, r7
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	2308      	movs	r3, #8
 8002088:	18f3      	adds	r3, r6, r3
 800208a:	19da      	adds	r2, r3, r7
 800208c:	6812      	ldr	r2, [r2, #0]
 800208e:	4663      	mov	r3, ip
 8002090:	431a      	orrs	r2, r3
 8002092:	2308      	movs	r3, #8
 8002094:	18f3      	adds	r3, r6, r3
 8002096:	19db      	adds	r3, r3, r7
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	134b      	asrs	r3, r1, #13
 800209c:	228c      	movs	r2, #140	; 0x8c
 800209e:	2108      	movs	r1, #8
 80020a0:	1852      	adds	r2, r2, r1
 80020a2:	19d2      	adds	r2, r2, r7
 80020a4:	6013      	str	r3, [r2, #0]
 80020a6:	2308      	movs	r3, #8
 80020a8:	18f3      	adds	r3, r6, r3
 80020aa:	19db      	adds	r3, r3, r7
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	0020      	movs	r0, r4
 80020b2:	0029      	movs	r1, r5
 80020b4:	f7fe f9e0 	bl	8000478 <__aeabi_lmul>
 80020b8:	0002      	movs	r2, r0
 80020ba:	000b      	movs	r3, r1
 80020bc:	0010      	movs	r0, r2
 80020be:	0019      	movs	r1, r3
 80020c0:	2900      	cmp	r1, #0
 80020c2:	da05      	bge.n	80020d0 <compensate_pressure+0x484>
 80020c4:	4a95      	ldr	r2, [pc, #596]	; (800231c <compensate_pressure+0x6d0>)
 80020c6:	2300      	movs	r3, #0
 80020c8:	1812      	adds	r2, r2, r0
 80020ca:	414b      	adcs	r3, r1
 80020cc:	0010      	movs	r0, r2
 80020ce:	0019      	movs	r1, r3
 80020d0:	01cb      	lsls	r3, r1, #7
 80020d2:	0e42      	lsrs	r2, r0, #25
 80020d4:	2480      	movs	r4, #128	; 0x80
 80020d6:	2508      	movs	r5, #8
 80020d8:	1965      	adds	r5, r4, r5
 80020da:	19ed      	adds	r5, r5, r7
 80020dc:	602a      	str	r2, [r5, #0]
 80020de:	2208      	movs	r2, #8
 80020e0:	18a2      	adds	r2, r4, r2
 80020e2:	19d2      	adds	r2, r2, r7
 80020e4:	6812      	ldr	r2, [r2, #0]
 80020e6:	431a      	orrs	r2, r3
 80020e8:	2308      	movs	r3, #8
 80020ea:	18e3      	adds	r3, r4, r3
 80020ec:	19db      	adds	r3, r3, r7
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	164b      	asrs	r3, r1, #25
 80020f2:	2284      	movs	r2, #132	; 0x84
 80020f4:	2108      	movs	r1, #8
 80020f6:	1852      	adds	r2, r2, r1
 80020f8:	19d2      	adds	r2, r2, r7
 80020fa:	6013      	str	r3, [r2, #0]
 80020fc:	2308      	movs	r3, #8
 80020fe:	18e3      	adds	r3, r4, r3
 8002100:	19db      	adds	r3, r3, r7
 8002102:	685c      	ldr	r4, [r3, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	22d8      	movs	r2, #216	; 0xd8
 8002108:	2108      	movs	r1, #8
 800210a:	1852      	adds	r2, r2, r1
 800210c:	19d2      	adds	r2, r2, r7
 800210e:	6013      	str	r3, [r2, #0]
 8002110:	6054      	str	r4, [r2, #4]
		var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
 8002112:	23b8      	movs	r3, #184	; 0xb8
 8002114:	2208      	movs	r2, #8
 8002116:	189b      	adds	r3, r3, r2
 8002118:	19db      	adds	r3, r3, r7
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2214      	movs	r2, #20
 800211e:	5e9b      	ldrsh	r3, [r3, r2]
 8002120:	61bb      	str	r3, [r7, #24]
 8002122:	17db      	asrs	r3, r3, #31
 8002124:	61fb      	str	r3, [r7, #28]
 8002126:	23c0      	movs	r3, #192	; 0xc0
 8002128:	2208      	movs	r2, #8
 800212a:	189b      	adds	r3, r3, r2
 800212c:	19db      	adds	r3, r3, r7
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	69b8      	ldr	r0, [r7, #24]
 8002134:	69f9      	ldr	r1, [r7, #28]
 8002136:	f7fe f99f 	bl	8000478 <__aeabi_lmul>
 800213a:	0002      	movs	r2, r0
 800213c:	000b      	movs	r3, r1
 800213e:	0010      	movs	r0, r2
 8002140:	0019      	movs	r1, r3
 8002142:	2900      	cmp	r1, #0
 8002144:	da05      	bge.n	8002152 <compensate_pressure+0x506>
 8002146:	4a76      	ldr	r2, [pc, #472]	; (8002320 <compensate_pressure+0x6d4>)
 8002148:	2300      	movs	r3, #0
 800214a:	1812      	adds	r2, r2, r0
 800214c:	414b      	adcs	r3, r1
 800214e:	0010      	movs	r0, r2
 8002150:	0019      	movs	r1, r3
 8002152:	034b      	lsls	r3, r1, #13
 8002154:	0cc2      	lsrs	r2, r0, #19
 8002156:	2480      	movs	r4, #128	; 0x80
 8002158:	193c      	adds	r4, r7, r4
 800215a:	6022      	str	r2, [r4, #0]
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	18ba      	adds	r2, r7, r2
 8002160:	6812      	ldr	r2, [r2, #0]
 8002162:	431a      	orrs	r2, r3
 8002164:	2380      	movs	r3, #128	; 0x80
 8002166:	18fb      	adds	r3, r7, r3
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	14cb      	asrs	r3, r1, #19
 800216c:	2284      	movs	r2, #132	; 0x84
 800216e:	18ba      	adds	r2, r7, r2
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	2380      	movs	r3, #128	; 0x80
 8002174:	18fb      	adds	r3, r7, r3
 8002176:	685c      	ldr	r4, [r3, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	25d0      	movs	r5, #208	; 0xd0
 800217c:	2208      	movs	r2, #8
 800217e:	18aa      	adds	r2, r5, r2
 8002180:	19d2      	adds	r2, r2, r7
 8002182:	6013      	str	r3, [r2, #0]
 8002184:	6054      	str	r4, [r2, #4]
		var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_P7) * 16);
 8002186:	23c0      	movs	r3, #192	; 0xc0
 8002188:	2208      	movs	r2, #8
 800218a:	189b      	adds	r3, r3, r2
 800218c:	19db      	adds	r3, r3, r7
 800218e:	6818      	ldr	r0, [r3, #0]
 8002190:	6859      	ldr	r1, [r3, #4]
 8002192:	23d8      	movs	r3, #216	; 0xd8
 8002194:	2208      	movs	r2, #8
 8002196:	189b      	adds	r3, r3, r2
 8002198:	19db      	adds	r3, r3, r7
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	1880      	adds	r0, r0, r2
 80021a0:	4159      	adcs	r1, r3
 80021a2:	2308      	movs	r3, #8
 80021a4:	18eb      	adds	r3, r5, r3
 80021a6:	19db      	adds	r3, r3, r7
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	1812      	adds	r2, r2, r0
 80021ae:	414b      	adcs	r3, r1
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	da03      	bge.n	80021bc <compensate_pressure+0x570>
 80021b4:	20ff      	movs	r0, #255	; 0xff
 80021b6:	2100      	movs	r1, #0
 80021b8:	1812      	adds	r2, r2, r0
 80021ba:	414b      	adcs	r3, r1
 80021bc:	0619      	lsls	r1, r3, #24
 80021be:	0a10      	lsrs	r0, r2, #8
 80021c0:	67b8      	str	r0, [r7, #120]	; 0x78
 80021c2:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80021c4:	4308      	orrs	r0, r1
 80021c6:	67b8      	str	r0, [r7, #120]	; 0x78
 80021c8:	121b      	asrs	r3, r3, #8
 80021ca:	67fb      	str	r3, [r7, #124]	; 0x7c
 80021cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021ce:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 80021d0:	603b      	str	r3, [r7, #0]
 80021d2:	607c      	str	r4, [r7, #4]
 80021d4:	21b8      	movs	r1, #184	; 0xb8
 80021d6:	2308      	movs	r3, #8
 80021d8:	18cb      	adds	r3, r1, r3
 80021da:	19d9      	adds	r1, r3, r7
 80021dc:	6809      	ldr	r1, [r1, #0]
 80021de:	2012      	movs	r0, #18
 80021e0:	5e09      	ldrsh	r1, [r1, r0]
 80021e2:	6139      	str	r1, [r7, #16]
 80021e4:	17c9      	asrs	r1, r1, #31
 80021e6:	6179      	str	r1, [r7, #20]
 80021e8:	693c      	ldr	r4, [r7, #16]
 80021ea:	697d      	ldr	r5, [r7, #20]
 80021ec:	0021      	movs	r1, r4
 80021ee:	0f09      	lsrs	r1, r1, #28
 80021f0:	0028      	movs	r0, r5
 80021f2:	0100      	lsls	r0, r0, #4
 80021f4:	26a4      	movs	r6, #164	; 0xa4
 80021f6:	2308      	movs	r3, #8
 80021f8:	18f3      	adds	r3, r6, r3
 80021fa:	19db      	adds	r3, r3, r7
 80021fc:	6018      	str	r0, [r3, #0]
 80021fe:	2308      	movs	r3, #8
 8002200:	18f3      	adds	r3, r6, r3
 8002202:	19d8      	adds	r0, r3, r7
 8002204:	6800      	ldr	r0, [r0, #0]
 8002206:	4308      	orrs	r0, r1
 8002208:	2308      	movs	r3, #8
 800220a:	18f3      	adds	r3, r6, r3
 800220c:	19d9      	adds	r1, r3, r7
 800220e:	6008      	str	r0, [r1, #0]
 8002210:	0021      	movs	r1, r4
 8002212:	0109      	lsls	r1, r1, #4
 8002214:	20a0      	movs	r0, #160	; 0xa0
 8002216:	2308      	movs	r3, #8
 8002218:	18c3      	adds	r3, r0, r3
 800221a:	19dc      	adds	r4, r3, r7
 800221c:	6021      	str	r1, [r4, #0]
 800221e:	2308      	movs	r3, #8
 8002220:	18c3      	adds	r3, r0, r3
 8002222:	19d9      	adds	r1, r3, r7
 8002224:	6808      	ldr	r0, [r1, #0]
 8002226:	6849      	ldr	r1, [r1, #4]
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	1812      	adds	r2, r2, r0
 800222e:	414b      	adcs	r3, r1
 8002230:	21c0      	movs	r1, #192	; 0xc0
 8002232:	2008      	movs	r0, #8
 8002234:	1808      	adds	r0, r1, r0
 8002236:	19c0      	adds	r0, r0, r7
 8002238:	6002      	str	r2, [r0, #0]
 800223a:	6043      	str	r3, [r0, #4]
		pressure = (uint32_t)(((var4 / 2) * 100) / 128);
 800223c:	2308      	movs	r3, #8
 800223e:	18cb      	adds	r3, r1, r3
 8002240:	19db      	adds	r3, r3, r7
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	da03      	bge.n	8002252 <compensate_pressure+0x606>
 800224a:	2001      	movs	r0, #1
 800224c:	2100      	movs	r1, #0
 800224e:	1812      	adds	r2, r2, r0
 8002250:	414b      	adcs	r3, r1
 8002252:	07d9      	lsls	r1, r3, #31
 8002254:	0850      	lsrs	r0, r2, #1
 8002256:	6738      	str	r0, [r7, #112]	; 0x70
 8002258:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800225a:	4308      	orrs	r0, r1
 800225c:	6738      	str	r0, [r7, #112]	; 0x70
 800225e:	105b      	asrs	r3, r3, #1
 8002260:	677b      	str	r3, [r7, #116]	; 0x74
 8002262:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002264:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002266:	2264      	movs	r2, #100	; 0x64
 8002268:	2300      	movs	r3, #0
 800226a:	f7fe f905 	bl	8000478 <__aeabi_lmul>
 800226e:	0002      	movs	r2, r0
 8002270:	000b      	movs	r3, r1
 8002272:	2b00      	cmp	r3, #0
 8002274:	da03      	bge.n	800227e <compensate_pressure+0x632>
 8002276:	207f      	movs	r0, #127	; 0x7f
 8002278:	2100      	movs	r1, #0
 800227a:	1812      	adds	r2, r2, r0
 800227c:	414b      	adcs	r3, r1
 800227e:	0659      	lsls	r1, r3, #25
 8002280:	09d0      	lsrs	r0, r2, #7
 8002282:	66b8      	str	r0, [r7, #104]	; 0x68
 8002284:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002286:	4308      	orrs	r0, r1
 8002288:	66b8      	str	r0, [r7, #104]	; 0x68
 800228a:	11db      	asrs	r3, r3, #7
 800228c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800228e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002290:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002292:	0013      	movs	r3, r2
 8002294:	21ec      	movs	r1, #236	; 0xec
 8002296:	2208      	movs	r2, #8
 8002298:	188a      	adds	r2, r1, r2
 800229a:	19d2      	adds	r2, r2, r7
 800229c:	6013      	str	r3, [r2, #0]

		if (pressure < pressure_min)
 800229e:	2308      	movs	r3, #8
 80022a0:	18cb      	adds	r3, r1, r3
 80022a2:	19db      	adds	r3, r3, r7
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	20e8      	movs	r0, #232	; 0xe8
 80022a8:	2308      	movs	r3, #8
 80022aa:	18c3      	adds	r3, r0, r3
 80022ac:	19db      	adds	r3, r3, r7
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d208      	bcs.n	80022c6 <compensate_pressure+0x67a>
			pressure = pressure_min;
 80022b4:	2308      	movs	r3, #8
 80022b6:	18c3      	adds	r3, r0, r3
 80022b8:	19db      	adds	r3, r3, r7
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2208      	movs	r2, #8
 80022be:	188a      	adds	r2, r1, r2
 80022c0:	19d2      	adds	r2, r2, r7
 80022c2:	6013      	str	r3, [r2, #0]
 80022c4:	e01e      	b.n	8002304 <compensate_pressure+0x6b8>
		else if (pressure > pressure_max)
 80022c6:	20ec      	movs	r0, #236	; 0xec
 80022c8:	2308      	movs	r3, #8
 80022ca:	18c3      	adds	r3, r0, r3
 80022cc:	19db      	adds	r3, r3, r7
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	21e4      	movs	r1, #228	; 0xe4
 80022d2:	2308      	movs	r3, #8
 80022d4:	18cb      	adds	r3, r1, r3
 80022d6:	19db      	adds	r3, r3, r7
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d912      	bls.n	8002304 <compensate_pressure+0x6b8>
			pressure = pressure_max;
 80022de:	2308      	movs	r3, #8
 80022e0:	18cb      	adds	r3, r1, r3
 80022e2:	19db      	adds	r3, r3, r7
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2208      	movs	r2, #8
 80022e8:	1882      	adds	r2, r0, r2
 80022ea:	19d2      	adds	r2, r2, r7
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	e009      	b.n	8002304 <compensate_pressure+0x6b8>
	} else {
		pressure = pressure_min;
 80022f0:	23e8      	movs	r3, #232	; 0xe8
 80022f2:	2208      	movs	r2, #8
 80022f4:	189b      	adds	r3, r3, r2
 80022f6:	19db      	adds	r3, r3, r7
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	22ec      	movs	r2, #236	; 0xec
 80022fc:	2108      	movs	r1, #8
 80022fe:	1852      	adds	r2, r2, r1
 8002300:	19d2      	adds	r2, r2, r7
 8002302:	6013      	str	r3, [r2, #0]
	}

	return pressure;
 8002304:	23ec      	movs	r3, #236	; 0xec
 8002306:	2208      	movs	r2, #8
 8002308:	189b      	adds	r3, r3, r2
 800230a:	19db      	adds	r3, r3, r7
 800230c:	681b      	ldr	r3, [r3, #0]
}
 800230e:	0018      	movs	r0, r3
 8002310:	46bd      	mov	sp, r7
 8002312:	b03f      	add	sp, #252	; 0xfc
 8002314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	00001fff 	.word	0x00001fff
 800231c:	01ffffff 	.word	0x01ffffff
 8002320:	0007ffff 	.word	0x0007ffff

08002324 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in integer data type.
 */
static uint32_t compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08a      	sub	sp, #40	; 0x28
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
	int32_t var2;
	int32_t var3;
	int32_t var4;
	int32_t var5;
	uint32_t humidity;
	uint32_t humidity_max = 102400;
 800232e:	23c8      	movs	r3, #200	; 0xc8
 8002330:	025b      	lsls	r3, r3, #9
 8002332:	623b      	str	r3, [r7, #32]

	var1 = calib_data->t_fine - ((int32_t)76800);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	4a53      	ldr	r2, [pc, #332]	; (8002488 <compensate_humidity+0x164>)
 800233a:	4694      	mov	ip, r2
 800233c:	4463      	add	r3, ip
 800233e:	61fb      	str	r3, [r7, #28]
	var2 = (int32_t)(uncomp_data->humidity * 16384);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	039b      	lsls	r3, r3, #14
 8002346:	61bb      	str	r3, [r7, #24]
	var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048576);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	221e      	movs	r2, #30
 800234c:	5e9b      	ldrsh	r3, [r3, r2]
 800234e:	051b      	lsls	r3, r3, #20
 8002350:	617b      	str	r3, [r7, #20]
	var4 = ((int32_t)calib_data->dig_H5) * var1;
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	2220      	movs	r2, #32
 8002356:	5e9b      	ldrsh	r3, [r3, r2]
 8002358:	001a      	movs	r2, r3
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	4353      	muls	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	1ad2      	subs	r2, r2, r3
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2280      	movs	r2, #128	; 0x80
 800236c:	01d2      	lsls	r2, r2, #7
 800236e:	4694      	mov	ip, r2
 8002370:	4463      	add	r3, ip
 8002372:	2b00      	cmp	r3, #0
 8002374:	da02      	bge.n	800237c <compensate_humidity+0x58>
 8002376:	4a45      	ldr	r2, [pc, #276]	; (800248c <compensate_humidity+0x168>)
 8002378:	4694      	mov	ip, r2
 800237a:	4463      	add	r3, ip
 800237c:	13db      	asrs	r3, r3, #15
 800237e:	60fb      	str	r3, [r7, #12]
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	2222      	movs	r2, #34	; 0x22
 8002384:	569b      	ldrsb	r3, [r3, r2]
 8002386:	001a      	movs	r2, r3
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	4353      	muls	r3, r2
 800238c:	2b00      	cmp	r3, #0
 800238e:	da02      	bge.n	8002396 <compensate_humidity+0x72>
 8002390:	4a3f      	ldr	r2, [pc, #252]	; (8002490 <compensate_humidity+0x16c>)
 8002392:	4694      	mov	ip, r2
 8002394:	4463      	add	r3, ip
 8002396:	129b      	asrs	r3, r3, #10
 8002398:	61bb      	str	r3, [r7, #24]
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	7f1b      	ldrb	r3, [r3, #28]
 800239e:	001a      	movs	r2, r3
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	4353      	muls	r3, r2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	da02      	bge.n	80023ae <compensate_humidity+0x8a>
 80023a8:	4a3a      	ldr	r2, [pc, #232]	; (8002494 <compensate_humidity+0x170>)
 80023aa:	4694      	mov	ip, r2
 80023ac:	4463      	add	r3, ip
 80023ae:	12db      	asrs	r3, r3, #11
 80023b0:	617b      	str	r3, [r7, #20]
	var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	2280      	movs	r2, #128	; 0x80
 80023b6:	0212      	lsls	r2, r2, #8
 80023b8:	4694      	mov	ip, r2
 80023ba:	4463      	add	r3, ip
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4353      	muls	r3, r2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	da02      	bge.n	80023ca <compensate_humidity+0xa6>
 80023c4:	4a32      	ldr	r2, [pc, #200]	; (8002490 <compensate_humidity+0x16c>)
 80023c6:	4694      	mov	ip, r2
 80023c8:	4463      	add	r3, ip
 80023ca:	129b      	asrs	r3, r3, #10
 80023cc:	2280      	movs	r2, #128	; 0x80
 80023ce:	0392      	lsls	r2, r2, #14
 80023d0:	4694      	mov	ip, r2
 80023d2:	4463      	add	r3, ip
 80023d4:	613b      	str	r3, [r7, #16]
	var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	221a      	movs	r2, #26
 80023da:	5e9b      	ldrsh	r3, [r3, r2]
 80023dc:	001a      	movs	r2, r3
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	4353      	muls	r3, r2
 80023e2:	2280      	movs	r2, #128	; 0x80
 80023e4:	0192      	lsls	r2, r2, #6
 80023e6:	4694      	mov	ip, r2
 80023e8:	4463      	add	r3, ip
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	da02      	bge.n	80023f4 <compensate_humidity+0xd0>
 80023ee:	4a2a      	ldr	r2, [pc, #168]	; (8002498 <compensate_humidity+0x174>)
 80023f0:	4694      	mov	ip, r2
 80023f2:	4463      	add	r3, ip
 80023f4:	139b      	asrs	r3, r3, #14
 80023f6:	61bb      	str	r3, [r7, #24]
	var3 = var5 * var2;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4353      	muls	r3, r2
 80023fe:	617b      	str	r3, [r7, #20]
	var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	2b00      	cmp	r3, #0
 8002404:	da02      	bge.n	800240c <compensate_humidity+0xe8>
 8002406:	4a21      	ldr	r2, [pc, #132]	; (800248c <compensate_humidity+0x168>)
 8002408:	4694      	mov	ip, r2
 800240a:	4463      	add	r3, ip
 800240c:	13db      	asrs	r3, r3, #15
 800240e:	001a      	movs	r2, r3
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	2b00      	cmp	r3, #0
 8002414:	da02      	bge.n	800241c <compensate_humidity+0xf8>
 8002416:	491d      	ldr	r1, [pc, #116]	; (800248c <compensate_humidity+0x168>)
 8002418:	468c      	mov	ip, r1
 800241a:	4463      	add	r3, ip
 800241c:	13db      	asrs	r3, r3, #15
 800241e:	4353      	muls	r3, r2
 8002420:	2b00      	cmp	r3, #0
 8002422:	da00      	bge.n	8002426 <compensate_humidity+0x102>
 8002424:	337f      	adds	r3, #127	; 0x7f
 8002426:	11db      	asrs	r3, r3, #7
 8002428:	613b      	str	r3, [r7, #16]
	var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) / 16);
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	7e1b      	ldrb	r3, [r3, #24]
 800242e:	001a      	movs	r2, r3
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	4353      	muls	r3, r2
 8002434:	2b00      	cmp	r3, #0
 8002436:	da00      	bge.n	800243a <compensate_humidity+0x116>
 8002438:	330f      	adds	r3, #15
 800243a:	111b      	asrs	r3, r3, #4
 800243c:	425b      	negs	r3, r3
 800243e:	001a      	movs	r2, r3
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	189b      	adds	r3, r3, r2
 8002444:	60fb      	str	r3, [r7, #12]
	var5 = (var5 < 0 ? 0 : var5);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2b00      	cmp	r3, #0
 800244a:	da00      	bge.n	800244e <compensate_humidity+0x12a>
 800244c:	2300      	movs	r3, #0
 800244e:	60fb      	str	r3, [r7, #12]
	var5 = (var5 > 419430400 ? 419430400 : var5);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	22c8      	movs	r2, #200	; 0xc8
 8002454:	0552      	lsls	r2, r2, #21
 8002456:	4293      	cmp	r3, r2
 8002458:	dd01      	ble.n	800245e <compensate_humidity+0x13a>
 800245a:	23c8      	movs	r3, #200	; 0xc8
 800245c:	055b      	lsls	r3, r3, #21
 800245e:	60fb      	str	r3, [r7, #12]
	humidity = (uint32_t)(var5 / 4096);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2b00      	cmp	r3, #0
 8002464:	da02      	bge.n	800246c <compensate_humidity+0x148>
 8002466:	4a0d      	ldr	r2, [pc, #52]	; (800249c <compensate_humidity+0x178>)
 8002468:	4694      	mov	ip, r2
 800246a:	4463      	add	r3, ip
 800246c:	131b      	asrs	r3, r3, #12
 800246e:	627b      	str	r3, [r7, #36]	; 0x24

	if (humidity > humidity_max)
 8002470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002472:	6a3b      	ldr	r3, [r7, #32]
 8002474:	429a      	cmp	r2, r3
 8002476:	d901      	bls.n	800247c <compensate_humidity+0x158>
		humidity = humidity_max;
 8002478:	6a3b      	ldr	r3, [r7, #32]
 800247a:	627b      	str	r3, [r7, #36]	; 0x24

	return humidity;
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800247e:	0018      	movs	r0, r3
 8002480:	46bd      	mov	sp, r7
 8002482:	b00a      	add	sp, #40	; 0x28
 8002484:	bd80      	pop	{r7, pc}
 8002486:	46c0      	nop			; (mov r8, r8)
 8002488:	fffed400 	.word	0xfffed400
 800248c:	00007fff 	.word	0x00007fff
 8002490:	000003ff 	.word	0x000003ff
 8002494:	000007ff 	.word	0x000007ff
 8002498:	00003fff 	.word	0x00003fff
 800249c:	00000fff 	.word	0x00000fff

080024a0 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 80024a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024a2:	b08b      	sub	sp, #44	; 0x2c
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 80024a8:	2626      	movs	r6, #38	; 0x26
 80024aa:	19bb      	adds	r3, r7, r6
 80024ac:	2288      	movs	r2, #136	; 0x88
 80024ae:	701a      	strb	r2, [r3, #0]
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 80024b0:	250c      	movs	r5, #12
 80024b2:	197b      	adds	r3, r7, r5
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	3304      	adds	r3, #4
 80024ba:	2216      	movs	r2, #22
 80024bc:	2100      	movs	r1, #0
 80024be:	0018      	movs	r0, r3
 80024c0:	f003 fcac 	bl	8005e1c <memset>

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 80024c4:	2427      	movs	r4, #39	; 0x27
 80024c6:	193c      	adds	r4, r7, r4
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	1979      	adds	r1, r7, r5
 80024cc:	19bb      	adds	r3, r7, r6
 80024ce:	7818      	ldrb	r0, [r3, #0]
 80024d0:	0013      	movs	r3, r2
 80024d2:	221a      	movs	r2, #26
 80024d4:	f7fe fe2c 	bl	8001130 <bme280_get_regs>
 80024d8:	0003      	movs	r3, r0
 80024da:	7023      	strb	r3, [r4, #0]

	if (rslt == BME280_OK) {
 80024dc:	2427      	movs	r4, #39	; 0x27
 80024de:	193b      	adds	r3, r7, r4
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	b25b      	sxtb	r3, r3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d11f      	bne.n	8002528 <get_calib_data+0x88>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	197b      	adds	r3, r7, r5
 80024ec:	0011      	movs	r1, r2
 80024ee:	0018      	movs	r0, r3
 80024f0:	f000 f85a 	bl	80025a8 <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 80024f4:	19bb      	adds	r3, r7, r6
 80024f6:	22e1      	movs	r2, #225	; 0xe1
 80024f8:	701a      	strb	r2, [r3, #0]
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 80024fa:	193c      	adds	r4, r7, r4
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	1979      	adds	r1, r7, r5
 8002500:	19bb      	adds	r3, r7, r6
 8002502:	7818      	ldrb	r0, [r3, #0]
 8002504:	0013      	movs	r3, r2
 8002506:	2207      	movs	r2, #7
 8002508:	f7fe fe12 	bl	8001130 <bme280_get_regs>
 800250c:	0003      	movs	r3, r0
 800250e:	7023      	strb	r3, [r4, #0]
		if (rslt == BME280_OK) {
 8002510:	2427      	movs	r4, #39	; 0x27
 8002512:	193b      	adds	r3, r7, r4
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	b25b      	sxtb	r3, r3
 8002518:	2b00      	cmp	r3, #0
 800251a:	d105      	bne.n	8002528 <get_calib_data+0x88>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	197b      	adds	r3, r7, r5
 8002520:	0011      	movs	r1, r2
 8002522:	0018      	movs	r0, r3
 8002524:	f000 f8ee 	bl	8002704 <parse_humidity_calib_data>
		}
	}

	return rslt;
 8002528:	2327      	movs	r3, #39	; 0x27
 800252a:	18fb      	adds	r3, r7, r3
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	b25b      	sxtb	r3, r3
}
 8002530:	0018      	movs	r0, r3
 8002532:	46bd      	mov	sp, r7
 8002534:	b00b      	add	sp, #44	; 0x2c
 8002536:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002538 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
 8002544:	001a      	movs	r2, r3
 8002546:	1cfb      	adds	r3, r7, #3
 8002548:	701a      	strb	r2, [r3, #0]
	uint8_t index;

	for (index = 1; index < len; index++) {
 800254a:	2317      	movs	r3, #23
 800254c:	18fb      	adds	r3, r7, r3
 800254e:	2201      	movs	r2, #1
 8002550:	701a      	strb	r2, [r3, #0]
 8002552:	e01d      	b.n	8002590 <interleave_reg_addr+0x58>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 8002554:	2017      	movs	r0, #23
 8002556:	183b      	adds	r3, r7, r0
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	18d2      	adds	r2, r2, r3
 800255e:	183b      	adds	r3, r7, r0
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	3b01      	subs	r3, #1
 8002566:	68b9      	ldr	r1, [r7, #8]
 8002568:	18cb      	adds	r3, r1, r3
 800256a:	7812      	ldrb	r2, [r2, #0]
 800256c:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 800256e:	183b      	adds	r3, r7, r0
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	18d2      	adds	r2, r2, r3
 8002576:	183b      	adds	r3, r7, r0
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	0019      	movs	r1, r3
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	185b      	adds	r3, r3, r1
 8002582:	7812      	ldrb	r2, [r2, #0]
 8002584:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 8002586:	183b      	adds	r3, r7, r0
 8002588:	781a      	ldrb	r2, [r3, #0]
 800258a:	183b      	adds	r3, r7, r0
 800258c:	3201      	adds	r2, #1
 800258e:	701a      	strb	r2, [r3, #0]
 8002590:	2317      	movs	r3, #23
 8002592:	18fa      	adds	r2, r7, r3
 8002594:	1cfb      	adds	r3, r7, #3
 8002596:	7812      	ldrb	r2, [r2, #0]
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	429a      	cmp	r2, r3
 800259c:	d3da      	bcc.n	8002554 <interleave_reg_addr+0x1c>
	}
}
 800259e:	46c0      	nop			; (mov r8, r8)
 80025a0:	46c0      	nop			; (mov r8, r8)
 80025a2:	46bd      	mov	sp, r7
 80025a4:	b006      	add	sp, #24
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	3310      	adds	r3, #16
 80025b6:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3301      	adds	r3, #1
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	021b      	lsls	r3, r3, #8
 80025c0:	b21a      	sxth	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	b21b      	sxth	r3, r3
 80025c8:	4313      	orrs	r3, r2
 80025ca:	b21b      	sxth	r3, r3
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	3303      	adds	r3, #3
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	021b      	lsls	r3, r3, #8
 80025da:	b21a      	sxth	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3302      	adds	r3, #2
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	b21b      	sxth	r3, r3
 80025e4:	4313      	orrs	r3, r2
 80025e6:	b21a      	sxth	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3305      	adds	r3, #5
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	021b      	lsls	r3, r3, #8
 80025f4:	b21a      	sxth	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	3304      	adds	r3, #4
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	b21b      	sxth	r3, r3
 80025fe:	4313      	orrs	r3, r2
 8002600:	b21a      	sxth	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	3307      	adds	r3, #7
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	021b      	lsls	r3, r3, #8
 800260e:	b21a      	sxth	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3306      	adds	r3, #6
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	b21b      	sxth	r3, r3
 8002618:	4313      	orrs	r3, r2
 800261a:	b21b      	sxth	r3, r3
 800261c:	b29a      	uxth	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3309      	adds	r3, #9
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	021b      	lsls	r3, r3, #8
 800262a:	b21a      	sxth	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3308      	adds	r3, #8
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	b21b      	sxth	r3, r3
 8002634:	4313      	orrs	r3, r2
 8002636:	b21a      	sxth	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	330b      	adds	r3, #11
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	021b      	lsls	r3, r3, #8
 8002644:	b21a      	sxth	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	330a      	adds	r3, #10
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	b21b      	sxth	r3, r3
 800264e:	4313      	orrs	r3, r2
 8002650:	b21a      	sxth	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	330d      	adds	r3, #13
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	021b      	lsls	r3, r3, #8
 800265e:	b21a      	sxth	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	330c      	adds	r3, #12
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	b21b      	sxth	r3, r3
 8002668:	4313      	orrs	r3, r2
 800266a:	b21a      	sxth	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	330f      	adds	r3, #15
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	021b      	lsls	r3, r3, #8
 8002678:	b21a      	sxth	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	330e      	adds	r3, #14
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	b21b      	sxth	r3, r3
 8002682:	4313      	orrs	r3, r2
 8002684:	b21a      	sxth	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	3311      	adds	r3, #17
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	021b      	lsls	r3, r3, #8
 8002692:	b21a      	sxth	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3310      	adds	r3, #16
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	b21b      	sxth	r3, r3
 800269c:	4313      	orrs	r3, r2
 800269e:	b21a      	sxth	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3313      	adds	r3, #19
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	021b      	lsls	r3, r3, #8
 80026ac:	b21a      	sxth	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	3312      	adds	r3, #18
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	b21b      	sxth	r3, r3
 80026b6:	4313      	orrs	r3, r2
 80026b8:	b21a      	sxth	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	3315      	adds	r3, #21
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	021b      	lsls	r3, r3, #8
 80026c6:	b21a      	sxth	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3314      	adds	r3, #20
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	b21b      	sxth	r3, r3
 80026d0:	4313      	orrs	r3, r2
 80026d2:	b21a      	sxth	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	3317      	adds	r3, #23
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	021b      	lsls	r3, r3, #8
 80026e0:	b21a      	sxth	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3316      	adds	r3, #22
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	b21b      	sxth	r3, r3
 80026ea:	4313      	orrs	r3, r2
 80026ec:	b21a      	sxth	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	3319      	adds	r3, #25
 80026f6:	781a      	ldrb	r2, [r3, #0]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	761a      	strb	r2, [r3, #24]

}
 80026fc:	46c0      	nop			; (mov r8, r8)
 80026fe:	46bd      	mov	sp, r7
 8002700:	b004      	add	sp, #16
 8002702:	bd80      	pop	{r7, pc}

08002704 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8002704:	b590      	push	{r4, r7, lr}
 8002706:	b087      	sub	sp, #28
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	3310      	adds	r3, #16
 8002712:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3301      	adds	r3, #1
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	021b      	lsls	r3, r3, #8
 800271c:	b21a      	sxth	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	b21b      	sxth	r3, r3
 8002724:	4313      	orrs	r3, r2
 8002726:	b21a      	sxth	r2, r3
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	3302      	adds	r3, #2
 8002730:	781a      	ldrb	r2, [r3, #0]
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	3303      	adds	r3, #3
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	b25b      	sxtb	r3, r3
 800273e:	b29b      	uxth	r3, r3
 8002740:	011b      	lsls	r3, r3, #4
 8002742:	b29a      	uxth	r2, r3
 8002744:	2012      	movs	r0, #18
 8002746:	183b      	adds	r3, r7, r0
 8002748:	801a      	strh	r2, [r3, #0]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	3304      	adds	r3, #4
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	b21a      	sxth	r2, r3
 8002752:	2410      	movs	r4, #16
 8002754:	193b      	adds	r3, r7, r4
 8002756:	210f      	movs	r1, #15
 8002758:	400a      	ands	r2, r1
 800275a:	801a      	strh	r2, [r3, #0]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 800275c:	183a      	adds	r2, r7, r0
 800275e:	193b      	adds	r3, r7, r4
 8002760:	8812      	ldrh	r2, [r2, #0]
 8002762:	881b      	ldrh	r3, [r3, #0]
 8002764:	4313      	orrs	r3, r2
 8002766:	b21a      	sxth	r2, r3
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3305      	adds	r3, #5
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	b25b      	sxtb	r3, r3
 8002774:	b29b      	uxth	r3, r3
 8002776:	011b      	lsls	r3, r3, #4
 8002778:	b29a      	uxth	r2, r3
 800277a:	210e      	movs	r1, #14
 800277c:	187b      	adds	r3, r7, r1
 800277e:	801a      	strh	r2, [r3, #0]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3304      	adds	r3, #4
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	091b      	lsrs	r3, r3, #4
 8002788:	b2da      	uxtb	r2, r3
 800278a:	200c      	movs	r0, #12
 800278c:	183b      	adds	r3, r7, r0
 800278e:	801a      	strh	r2, [r3, #0]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 8002790:	187a      	adds	r2, r7, r1
 8002792:	183b      	adds	r3, r7, r0
 8002794:	8812      	ldrh	r2, [r2, #0]
 8002796:	881b      	ldrh	r3, [r3, #0]
 8002798:	4313      	orrs	r3, r2
 800279a:	b21a      	sxth	r2, r3
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3306      	adds	r3, #6
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	b259      	sxtb	r1, r3
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	2222      	movs	r2, #34	; 0x22
 80027ac:	5499      	strb	r1, [r3, r2]
}
 80027ae:	46c0      	nop			; (mov r8, r8)
 80027b0:	46bd      	mov	sp, r7
 80027b2:	b007      	add	sp, #28
 80027b4:	bd90      	pop	{r4, r7, pc}

080027b6 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b084      	sub	sp, #16
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	0002      	movs	r2, r0
 80027be:	1dfb      	adds	r3, r7, #7
 80027c0:	701a      	strb	r2, [r3, #0]
 80027c2:	1dbb      	adds	r3, r7, #6
 80027c4:	1c0a      	adds	r2, r1, #0
 80027c6:	701a      	strb	r2, [r3, #0]
	uint8_t settings_changed = FALSE;
 80027c8:	210f      	movs	r1, #15
 80027ca:	187b      	adds	r3, r7, r1
 80027cc:	2200      	movs	r2, #0
 80027ce:	701a      	strb	r2, [r3, #0]

	if (sub_settings & desired_settings) {
 80027d0:	1dfb      	adds	r3, r7, #7
 80027d2:	1dba      	adds	r2, r7, #6
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	7812      	ldrb	r2, [r2, #0]
 80027d8:	4013      	ands	r3, r2
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <are_settings_changed+0x32>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 80027e0:	187b      	adds	r3, r7, r1
 80027e2:	2201      	movs	r2, #1
 80027e4:	701a      	strb	r2, [r3, #0]
 80027e6:	e003      	b.n	80027f0 <are_settings_changed+0x3a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 80027e8:	230f      	movs	r3, #15
 80027ea:	18fb      	adds	r3, r7, r3
 80027ec:	2200      	movs	r2, #0
 80027ee:	701a      	strb	r2, [r3, #0]
	}

	return settings_changed;
 80027f0:	230f      	movs	r3, #15
 80027f2:	18fb      	adds	r3, r7, r3
 80027f4:	781b      	ldrb	r3, [r3, #0]
}
 80027f6:	0018      	movs	r0, r3
 80027f8:	46bd      	mov	sp, r7
 80027fa:	b004      	add	sp, #16
 80027fc:	bd80      	pop	{r7, pc}

080027fe <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b084      	sub	sp, #16
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00b      	beq.n	8002824 <null_ptr_check+0x26>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d007      	beq.n	8002824 <null_ptr_check+0x26>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d003      	beq.n	8002824 <null_ptr_check+0x26>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d104      	bne.n	800282e <null_ptr_check+0x30>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 8002824:	230f      	movs	r3, #15
 8002826:	18fb      	adds	r3, r7, r3
 8002828:	22ff      	movs	r2, #255	; 0xff
 800282a:	701a      	strb	r2, [r3, #0]
 800282c:	e003      	b.n	8002836 <null_ptr_check+0x38>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 800282e:	230f      	movs	r3, #15
 8002830:	18fb      	adds	r3, r7, r3
 8002832:	2200      	movs	r2, #0
 8002834:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 8002836:	230f      	movs	r3, #15
 8002838:	18fb      	adds	r3, r7, r3
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	b25b      	sxtb	r3, r3
}
 800283e:	0018      	movs	r0, r3
 8002840:	46bd      	mov	sp, r7
 8002842:	b004      	add	sp, #16
 8002844:	bd80      	pop	{r7, pc}
	...

08002848 <user_i2c_read>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8002848:	b590      	push	{r4, r7, lr}
 800284a:	b085      	sub	sp, #20
 800284c:	af02      	add	r7, sp, #8
 800284e:	0004      	movs	r4, r0
 8002850:	0008      	movs	r0, r1
 8002852:	603a      	str	r2, [r7, #0]
 8002854:	0019      	movs	r1, r3
 8002856:	1dfb      	adds	r3, r7, #7
 8002858:	1c22      	adds	r2, r4, #0
 800285a:	701a      	strb	r2, [r3, #0]
 800285c:	1dbb      	adds	r3, r7, #6
 800285e:	1c02      	adds	r2, r0, #0
 8002860:	701a      	strb	r2, [r3, #0]
 8002862:	1d3b      	adds	r3, r7, #4
 8002864:	1c0a      	adds	r2, r1, #0
 8002866:	801a      	strh	r2, [r3, #0]
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8002868:	1dfb      	adds	r3, r7, #7
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	b29b      	uxth	r3, r3
 800286e:	18db      	adds	r3, r3, r3
 8002870:	b299      	uxth	r1, r3
 8002872:	1dba      	adds	r2, r7, #6
 8002874:	4812      	ldr	r0, [pc, #72]	; (80028c0 <user_i2c_read+0x78>)
 8002876:	230a      	movs	r3, #10
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	2301      	movs	r3, #1
 800287c:	f000 ff36 	bl	80036ec <HAL_I2C_Master_Transmit>
 8002880:	1e03      	subs	r3, r0, #0
 8002882:	d002      	beq.n	800288a <user_i2c_read+0x42>
 8002884:	2301      	movs	r3, #1
 8002886:	425b      	negs	r3, r3
 8002888:	e015      	b.n	80028b6 <user_i2c_read+0x6e>
  if(HAL_I2C_Master_Receive(&hi2c1, (id << 1) | 0x01, data, len, 10) != HAL_OK) return -1;
 800288a:	1dfb      	adds	r3, r7, #7
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	b21b      	sxth	r3, r3
 8002892:	2201      	movs	r2, #1
 8002894:	4313      	orrs	r3, r2
 8002896:	b21b      	sxth	r3, r3
 8002898:	b299      	uxth	r1, r3
 800289a:	1d3b      	adds	r3, r7, #4
 800289c:	881b      	ldrh	r3, [r3, #0]
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	4807      	ldr	r0, [pc, #28]	; (80028c0 <user_i2c_read+0x78>)
 80028a2:	240a      	movs	r4, #10
 80028a4:	9400      	str	r4, [sp, #0]
 80028a6:	f001 f84b 	bl	8003940 <HAL_I2C_Master_Receive>
 80028aa:	1e03      	subs	r3, r0, #0
 80028ac:	d002      	beq.n	80028b4 <user_i2c_read+0x6c>
 80028ae:	2301      	movs	r3, #1
 80028b0:	425b      	negs	r3, r3
 80028b2:	e000      	b.n	80028b6 <user_i2c_read+0x6e>

  return 0;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	0018      	movs	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	b003      	add	sp, #12
 80028bc:	bd90      	pop	{r4, r7, pc}
 80028be:	46c0      	nop			; (mov r8, r8)
 80028c0:	20000078 	.word	0x20000078

080028c4 <user_delay_ms>:

void user_delay_ms(uint32_t period)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  HAL_Delay(period);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	0018      	movs	r0, r3
 80028d0:	f000 fc0c 	bl	80030ec <HAL_Delay>
}
 80028d4:	46c0      	nop			; (mov r8, r8)
 80028d6:	46bd      	mov	sp, r7
 80028d8:	b002      	add	sp, #8
 80028da:	bd80      	pop	{r7, pc}

080028dc <user_i2c_write>:

int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 80028dc:	b590      	push	{r4, r7, lr}
 80028de:	b087      	sub	sp, #28
 80028e0:	af02      	add	r7, sp, #8
 80028e2:	0004      	movs	r4, r0
 80028e4:	0008      	movs	r0, r1
 80028e6:	603a      	str	r2, [r7, #0]
 80028e8:	0019      	movs	r1, r3
 80028ea:	1dfb      	adds	r3, r7, #7
 80028ec:	1c22      	adds	r2, r4, #0
 80028ee:	701a      	strb	r2, [r3, #0]
 80028f0:	1dbb      	adds	r3, r7, #6
 80028f2:	1c02      	adds	r2, r0, #0
 80028f4:	701a      	strb	r2, [r3, #0]
 80028f6:	1d3b      	adds	r3, r7, #4
 80028f8:	1c0a      	adds	r2, r1, #0
 80028fa:	801a      	strh	r2, [r3, #0]
  int8_t *buf;
  buf = malloc(len +1);
 80028fc:	1d3b      	adds	r3, r7, #4
 80028fe:	881b      	ldrh	r3, [r3, #0]
 8002900:	3301      	adds	r3, #1
 8002902:	0018      	movs	r0, r3
 8002904:	f003 f9c2 	bl	8005c8c <malloc>
 8002908:	0003      	movs	r3, r0
 800290a:	60fb      	str	r3, [r7, #12]
  buf[0] = reg_addr;
 800290c:	1dbb      	adds	r3, r7, #6
 800290e:	2200      	movs	r2, #0
 8002910:	569a      	ldrsb	r2, [r3, r2]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	701a      	strb	r2, [r3, #0]
  memcpy(buf +1, data, len);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	1c58      	adds	r0, r3, #1
 800291a:	1d3b      	adds	r3, r7, #4
 800291c:	881a      	ldrh	r2, [r3, #0]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	0019      	movs	r1, r3
 8002922:	f003 fac1 	bl	8005ea8 <memcpy>

  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 8002926:	1dfb      	adds	r3, r7, #7
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	b29b      	uxth	r3, r3
 800292c:	18db      	adds	r3, r3, r3
 800292e:	b299      	uxth	r1, r3
 8002930:	1d3b      	adds	r3, r7, #4
 8002932:	881b      	ldrh	r3, [r3, #0]
 8002934:	3301      	adds	r3, #1
 8002936:	b29c      	uxth	r4, r3
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	480a      	ldr	r0, [pc, #40]	; (8002964 <user_i2c_write+0x88>)
 800293c:	2301      	movs	r3, #1
 800293e:	425b      	negs	r3, r3
 8002940:	9300      	str	r3, [sp, #0]
 8002942:	0023      	movs	r3, r4
 8002944:	f000 fed2 	bl	80036ec <HAL_I2C_Master_Transmit>
 8002948:	1e03      	subs	r3, r0, #0
 800294a:	d002      	beq.n	8002952 <user_i2c_write+0x76>
 800294c:	2301      	movs	r3, #1
 800294e:	425b      	negs	r3, r3
 8002950:	e004      	b.n	800295c <user_i2c_write+0x80>

  free(buf);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	0018      	movs	r0, r3
 8002956:	f003 f9a3 	bl	8005ca0 <free>
  return 0;
 800295a:	2300      	movs	r3, #0
}
 800295c:	0018      	movs	r0, r3
 800295e:	46bd      	mov	sp, r7
 8002960:	b005      	add	sp, #20
 8002962:	bd90      	pop	{r4, r7, pc}
 8002964:	20000078 	.word	0x20000078

08002968 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800296c:	f000 fb38 	bl	8002fe0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002970:	f000 f8a6 	bl	8002ac0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002974:	f000 f97a 	bl	8002c6c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002978:	f000 f92a 	bl	8002bd0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800297c:	f000 f8e8 	bl	8002b50 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  dev.dev_id = BME280_I2C_ADDR_PRIM;
 8002980:	4b43      	ldr	r3, [pc, #268]	; (8002a90 <main+0x128>)
 8002982:	2276      	movs	r2, #118	; 0x76
 8002984:	705a      	strb	r2, [r3, #1]
  dev.intf = BME280_I2C_INTF;
 8002986:	4b42      	ldr	r3, [pc, #264]	; (8002a90 <main+0x128>)
 8002988:	2201      	movs	r2, #1
 800298a:	709a      	strb	r2, [r3, #2]
  dev.read = user_i2c_read;
 800298c:	4b40      	ldr	r3, [pc, #256]	; (8002a90 <main+0x128>)
 800298e:	4a41      	ldr	r2, [pc, #260]	; (8002a94 <main+0x12c>)
 8002990:	605a      	str	r2, [r3, #4]
  dev.write = user_i2c_write;
 8002992:	4b3f      	ldr	r3, [pc, #252]	; (8002a90 <main+0x128>)
 8002994:	4a40      	ldr	r2, [pc, #256]	; (8002a98 <main+0x130>)
 8002996:	609a      	str	r2, [r3, #8]
  dev.delay_ms = user_delay_ms;
 8002998:	4b3d      	ldr	r3, [pc, #244]	; (8002a90 <main+0x128>)
 800299a:	4a40      	ldr	r2, [pc, #256]	; (8002a9c <main+0x134>)
 800299c:	60da      	str	r2, [r3, #12]

  rslt = bme280_init(&dev);
 800299e:	4b3c      	ldr	r3, [pc, #240]	; (8002a90 <main+0x128>)
 80029a0:	0018      	movs	r0, r3
 80029a2:	f7fe fb5b 	bl	800105c <bme280_init>
 80029a6:	0003      	movs	r3, r0
 80029a8:	001a      	movs	r2, r3
 80029aa:	4b3d      	ldr	r3, [pc, #244]	; (8002aa0 <main+0x138>)
 80029ac:	701a      	strb	r2, [r3, #0]
  dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 80029ae:	4b38      	ldr	r3, [pc, #224]	; (8002a90 <main+0x128>)
 80029b0:	223a      	movs	r2, #58	; 0x3a
 80029b2:	2101      	movs	r1, #1
 80029b4:	5499      	strb	r1, [r3, r2]
	dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 80029b6:	4b36      	ldr	r3, [pc, #216]	; (8002a90 <main+0x128>)
 80029b8:	2238      	movs	r2, #56	; 0x38
 80029ba:	2105      	movs	r1, #5
 80029bc:	5499      	strb	r1, [r3, r2]
	dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 80029be:	4b34      	ldr	r3, [pc, #208]	; (8002a90 <main+0x128>)
 80029c0:	2239      	movs	r2, #57	; 0x39
 80029c2:	2102      	movs	r1, #2
 80029c4:	5499      	strb	r1, [r3, r2]
	dev.settings.filter = BME280_FILTER_COEFF_16;
 80029c6:	4b32      	ldr	r3, [pc, #200]	; (8002a90 <main+0x128>)
 80029c8:	223b      	movs	r2, #59	; 0x3b
 80029ca:	2104      	movs	r1, #4
 80029cc:	5499      	strb	r1, [r3, r2]
	rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 80029ce:	4b30      	ldr	r3, [pc, #192]	; (8002a90 <main+0x128>)
 80029d0:	0019      	movs	r1, r3
 80029d2:	200f      	movs	r0, #15
 80029d4:	f7fe fc89 	bl	80012ea <bme280_set_sensor_settings>
 80029d8:	0003      	movs	r3, r0
 80029da:	001a      	movs	r2, r3
 80029dc:	4b30      	ldr	r3, [pc, #192]	; (8002aa0 <main+0x138>)
 80029de:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  		rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 80029e0:	4b2b      	ldr	r3, [pc, #172]	; (8002a90 <main+0x128>)
 80029e2:	0019      	movs	r1, r3
 80029e4:	2003      	movs	r0, #3
 80029e6:	f7fe fceb 	bl	80013c0 <bme280_set_sensor_mode>
 80029ea:	0003      	movs	r3, r0
 80029ec:	001a      	movs	r2, r3
 80029ee:	4b2c      	ldr	r3, [pc, #176]	; (8002aa0 <main+0x138>)
 80029f0:	701a      	strb	r2, [r3, #0]
			dev.delay_ms(40);
 80029f2:	4b27      	ldr	r3, [pc, #156]	; (8002a90 <main+0x128>)
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	2028      	movs	r0, #40	; 0x28
 80029f8:	4798      	blx	r3
			/*Get Data */
			rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 80029fa:	4a25      	ldr	r2, [pc, #148]	; (8002a90 <main+0x128>)
 80029fc:	4b29      	ldr	r3, [pc, #164]	; (8002aa4 <main+0x13c>)
 80029fe:	0019      	movs	r1, r3
 8002a00:	2007      	movs	r0, #7
 8002a02:	f7fe fd7d 	bl	8001500 <bme280_get_sensor_data>
 8002a06:	0003      	movs	r3, r0
 8002a08:	001a      	movs	r2, r3
 8002a0a:	4b25      	ldr	r3, [pc, #148]	; (8002aa0 <main+0x138>)
 8002a0c:	701a      	strb	r2, [r3, #0]
			if(rslt == BME280_OK)
 8002a0e:	4b24      	ldr	r3, [pc, #144]	; (8002aa0 <main+0x138>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	b25b      	sxtb	r3, r3
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d135      	bne.n	8002a84 <main+0x11c>
			{
				temperature = comp_data.temperature / 100.0;
 8002a18:	4b22      	ldr	r3, [pc, #136]	; (8002aa4 <main+0x13c>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f7fe f931 	bl	8000c84 <__aeabi_i2d>
 8002a22:	2200      	movs	r2, #0
 8002a24:	4b20      	ldr	r3, [pc, #128]	; (8002aa8 <main+0x140>)
 8002a26:	f7fd fe3f 	bl	80006a8 <__aeabi_ddiv>
 8002a2a:	0002      	movs	r2, r0
 8002a2c:	000b      	movs	r3, r1
 8002a2e:	0010      	movs	r0, r2
 8002a30:	0019      	movs	r1, r3
 8002a32:	f7fe f97d 	bl	8000d30 <__aeabi_d2f>
 8002a36:	1c02      	adds	r2, r0, #0
 8002a38:	4b1c      	ldr	r3, [pc, #112]	; (8002aac <main+0x144>)
 8002a3a:	601a      	str	r2, [r3, #0]
				humidity = comp_data.humidity / 1024.0;
 8002a3c:	4b19      	ldr	r3, [pc, #100]	; (8002aa4 <main+0x13c>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	0018      	movs	r0, r3
 8002a42:	f7fe f94f 	bl	8000ce4 <__aeabi_ui2d>
 8002a46:	2200      	movs	r2, #0
 8002a48:	4b19      	ldr	r3, [pc, #100]	; (8002ab0 <main+0x148>)
 8002a4a:	f7fd fe2d 	bl	80006a8 <__aeabi_ddiv>
 8002a4e:	0002      	movs	r2, r0
 8002a50:	000b      	movs	r3, r1
 8002a52:	0010      	movs	r0, r2
 8002a54:	0019      	movs	r1, r3
 8002a56:	f7fe f96b 	bl	8000d30 <__aeabi_d2f>
 8002a5a:	1c02      	adds	r2, r0, #0
 8002a5c:	4b15      	ldr	r3, [pc, #84]	; (8002ab4 <main+0x14c>)
 8002a5e:	601a      	str	r2, [r3, #0]
				pressure = comp_data.pressure / 10000.0;
 8002a60:	4b10      	ldr	r3, [pc, #64]	; (8002aa4 <main+0x13c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	0018      	movs	r0, r3
 8002a66:	f7fe f93d 	bl	8000ce4 <__aeabi_ui2d>
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	4b12      	ldr	r3, [pc, #72]	; (8002ab8 <main+0x150>)
 8002a6e:	f7fd fe1b 	bl	80006a8 <__aeabi_ddiv>
 8002a72:	0002      	movs	r2, r0
 8002a74:	000b      	movs	r3, r1
 8002a76:	0010      	movs	r0, r2
 8002a78:	0019      	movs	r1, r3
 8002a7a:	f7fe f959 	bl	8000d30 <__aeabi_d2f>
 8002a7e:	1c02      	adds	r2, r0, #0
 8002a80:	4b0e      	ldr	r3, [pc, #56]	; (8002abc <main+0x154>)
 8002a82:	601a      	str	r2, [r3, #0]
			}
			HAL_Delay(1000);
 8002a84:	23fa      	movs	r3, #250	; 0xfa
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	0018      	movs	r0, r3
 8002a8a:	f000 fb2f 	bl	80030ec <HAL_Delay>
  		rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 8002a8e:	e7a7      	b.n	80029e0 <main+0x78>
 8002a90:	2000016c 	.word	0x2000016c
 8002a94:	08002849 	.word	0x08002849
 8002a98:	080028dd 	.word	0x080028dd
 8002a9c:	080028c5 	.word	0x080028c5
 8002aa0:	200001b8 	.word	0x200001b8
 8002aa4:	200001ac 	.word	0x200001ac
 8002aa8:	40590000 	.word	0x40590000
 8002aac:	20000160 	.word	0x20000160
 8002ab0:	40900000 	.word	0x40900000
 8002ab4:	20000164 	.word	0x20000164
 8002ab8:	40c38800 	.word	0x40c38800
 8002abc:	20000168 	.word	0x20000168

08002ac0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ac0:	b590      	push	{r4, r7, lr}
 8002ac2:	b093      	sub	sp, #76	; 0x4c
 8002ac4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ac6:	2410      	movs	r4, #16
 8002ac8:	193b      	adds	r3, r7, r4
 8002aca:	0018      	movs	r0, r3
 8002acc:	2338      	movs	r3, #56	; 0x38
 8002ace:	001a      	movs	r2, r3
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	f003 f9a3 	bl	8005e1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ad6:	003b      	movs	r3, r7
 8002ad8:	0018      	movs	r0, r3
 8002ada:	2310      	movs	r3, #16
 8002adc:	001a      	movs	r2, r3
 8002ade:	2100      	movs	r1, #0
 8002ae0:	f003 f99c 	bl	8005e1c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ae4:	2380      	movs	r3, #128	; 0x80
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	0018      	movs	r0, r3
 8002aea:	f001 fba5 	bl	8004238 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002aee:	193b      	adds	r3, r7, r4
 8002af0:	2202      	movs	r2, #2
 8002af2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002af4:	193b      	adds	r3, r7, r4
 8002af6:	2280      	movs	r2, #128	; 0x80
 8002af8:	0052      	lsls	r2, r2, #1
 8002afa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002afc:	193b      	adds	r3, r7, r4
 8002afe:	2200      	movs	r2, #0
 8002b00:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b02:	193b      	adds	r3, r7, r4
 8002b04:	2240      	movs	r2, #64	; 0x40
 8002b06:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002b08:	193b      	adds	r3, r7, r4
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b0e:	193b      	adds	r3, r7, r4
 8002b10:	0018      	movs	r0, r3
 8002b12:	f001 fbdd 	bl	80042d0 <HAL_RCC_OscConfig>
 8002b16:	1e03      	subs	r3, r0, #0
 8002b18:	d001      	beq.n	8002b1e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002b1a:	f000 f8f7 	bl	8002d0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b1e:	003b      	movs	r3, r7
 8002b20:	2207      	movs	r2, #7
 8002b22:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002b24:	003b      	movs	r3, r7
 8002b26:	2200      	movs	r2, #0
 8002b28:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b2a:	003b      	movs	r3, r7
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b30:	003b      	movs	r3, r7
 8002b32:	2200      	movs	r2, #0
 8002b34:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002b36:	003b      	movs	r3, r7
 8002b38:	2100      	movs	r1, #0
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	f001 fee2 	bl	8004904 <HAL_RCC_ClockConfig>
 8002b40:	1e03      	subs	r3, r0, #0
 8002b42:	d001      	beq.n	8002b48 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002b44:	f000 f8e2 	bl	8002d0c <Error_Handler>
  }
}
 8002b48:	46c0      	nop			; (mov r8, r8)
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	b013      	add	sp, #76	; 0x4c
 8002b4e:	bd90      	pop	{r4, r7, pc}

08002b50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002b54:	4b1b      	ldr	r3, [pc, #108]	; (8002bc4 <MX_I2C1_Init+0x74>)
 8002b56:	4a1c      	ldr	r2, [pc, #112]	; (8002bc8 <MX_I2C1_Init+0x78>)
 8002b58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8002b5a:	4b1a      	ldr	r3, [pc, #104]	; (8002bc4 <MX_I2C1_Init+0x74>)
 8002b5c:	4a1b      	ldr	r2, [pc, #108]	; (8002bcc <MX_I2C1_Init+0x7c>)
 8002b5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002b60:	4b18      	ldr	r3, [pc, #96]	; (8002bc4 <MX_I2C1_Init+0x74>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b66:	4b17      	ldr	r3, [pc, #92]	; (8002bc4 <MX_I2C1_Init+0x74>)
 8002b68:	2201      	movs	r2, #1
 8002b6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b6c:	4b15      	ldr	r3, [pc, #84]	; (8002bc4 <MX_I2C1_Init+0x74>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002b72:	4b14      	ldr	r3, [pc, #80]	; (8002bc4 <MX_I2C1_Init+0x74>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002b78:	4b12      	ldr	r3, [pc, #72]	; (8002bc4 <MX_I2C1_Init+0x74>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b7e:	4b11      	ldr	r3, [pc, #68]	; (8002bc4 <MX_I2C1_Init+0x74>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b84:	4b0f      	ldr	r3, [pc, #60]	; (8002bc4 <MX_I2C1_Init+0x74>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b8a:	4b0e      	ldr	r3, [pc, #56]	; (8002bc4 <MX_I2C1_Init+0x74>)
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	f000 fd07 	bl	80035a0 <HAL_I2C_Init>
 8002b92:	1e03      	subs	r3, r0, #0
 8002b94:	d001      	beq.n	8002b9a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002b96:	f000 f8b9 	bl	8002d0c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b9a:	4b0a      	ldr	r3, [pc, #40]	; (8002bc4 <MX_I2C1_Init+0x74>)
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	f001 fab2 	bl	8004108 <HAL_I2CEx_ConfigAnalogFilter>
 8002ba4:	1e03      	subs	r3, r0, #0
 8002ba6:	d001      	beq.n	8002bac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002ba8:	f000 f8b0 	bl	8002d0c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002bac:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <MX_I2C1_Init+0x74>)
 8002bae:	2100      	movs	r1, #0
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	f001 faf5 	bl	80041a0 <HAL_I2CEx_ConfigDigitalFilter>
 8002bb6:	1e03      	subs	r3, r0, #0
 8002bb8:	d001      	beq.n	8002bbe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002bba:	f000 f8a7 	bl	8002d0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	20000078 	.word	0x20000078
 8002bc8:	40005400 	.word	0x40005400
 8002bcc:	00303d5b 	.word	0x00303d5b

08002bd0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002bd4:	4b23      	ldr	r3, [pc, #140]	; (8002c64 <MX_USART2_UART_Init+0x94>)
 8002bd6:	4a24      	ldr	r2, [pc, #144]	; (8002c68 <MX_USART2_UART_Init+0x98>)
 8002bd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002bda:	4b22      	ldr	r3, [pc, #136]	; (8002c64 <MX_USART2_UART_Init+0x94>)
 8002bdc:	22e1      	movs	r2, #225	; 0xe1
 8002bde:	0252      	lsls	r2, r2, #9
 8002be0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002be2:	4b20      	ldr	r3, [pc, #128]	; (8002c64 <MX_USART2_UART_Init+0x94>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002be8:	4b1e      	ldr	r3, [pc, #120]	; (8002c64 <MX_USART2_UART_Init+0x94>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002bee:	4b1d      	ldr	r3, [pc, #116]	; (8002c64 <MX_USART2_UART_Init+0x94>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002bf4:	4b1b      	ldr	r3, [pc, #108]	; (8002c64 <MX_USART2_UART_Init+0x94>)
 8002bf6:	220c      	movs	r2, #12
 8002bf8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bfa:	4b1a      	ldr	r3, [pc, #104]	; (8002c64 <MX_USART2_UART_Init+0x94>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c00:	4b18      	ldr	r3, [pc, #96]	; (8002c64 <MX_USART2_UART_Init+0x94>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c06:	4b17      	ldr	r3, [pc, #92]	; (8002c64 <MX_USART2_UART_Init+0x94>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c0c:	4b15      	ldr	r3, [pc, #84]	; (8002c64 <MX_USART2_UART_Init+0x94>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c12:	4b14      	ldr	r3, [pc, #80]	; (8002c64 <MX_USART2_UART_Init+0x94>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c18:	4b12      	ldr	r3, [pc, #72]	; (8002c64 <MX_USART2_UART_Init+0x94>)
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	f002 f9d4 	bl	8004fc8 <HAL_UART_Init>
 8002c20:	1e03      	subs	r3, r0, #0
 8002c22:	d001      	beq.n	8002c28 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002c24:	f000 f872 	bl	8002d0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c28:	4b0e      	ldr	r3, [pc, #56]	; (8002c64 <MX_USART2_UART_Init+0x94>)
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	f002 ff4d 	bl	8005acc <HAL_UARTEx_SetTxFifoThreshold>
 8002c32:	1e03      	subs	r3, r0, #0
 8002c34:	d001      	beq.n	8002c3a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002c36:	f000 f869 	bl	8002d0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c3a:	4b0a      	ldr	r3, [pc, #40]	; (8002c64 <MX_USART2_UART_Init+0x94>)
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f002 ff84 	bl	8005b4c <HAL_UARTEx_SetRxFifoThreshold>
 8002c44:	1e03      	subs	r3, r0, #0
 8002c46:	d001      	beq.n	8002c4c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002c48:	f000 f860 	bl	8002d0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002c4c:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <MX_USART2_UART_Init+0x94>)
 8002c4e:	0018      	movs	r0, r3
 8002c50:	f002 ff02 	bl	8005a58 <HAL_UARTEx_DisableFifoMode>
 8002c54:	1e03      	subs	r3, r0, #0
 8002c56:	d001      	beq.n	8002c5c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002c58:	f000 f858 	bl	8002d0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c5c:	46c0      	nop			; (mov r8, r8)
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	46c0      	nop			; (mov r8, r8)
 8002c64:	200000cc 	.word	0x200000cc
 8002c68:	40004400 	.word	0x40004400

08002c6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c6c:	b590      	push	{r4, r7, lr}
 8002c6e:	b089      	sub	sp, #36	; 0x24
 8002c70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c72:	240c      	movs	r4, #12
 8002c74:	193b      	adds	r3, r7, r4
 8002c76:	0018      	movs	r0, r3
 8002c78:	2314      	movs	r3, #20
 8002c7a:	001a      	movs	r2, r3
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	f003 f8cd 	bl	8005e1c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c82:	4b21      	ldr	r3, [pc, #132]	; (8002d08 <MX_GPIO_Init+0x9c>)
 8002c84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c86:	4b20      	ldr	r3, [pc, #128]	; (8002d08 <MX_GPIO_Init+0x9c>)
 8002c88:	2104      	movs	r1, #4
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	635a      	str	r2, [r3, #52]	; 0x34
 8002c8e:	4b1e      	ldr	r3, [pc, #120]	; (8002d08 <MX_GPIO_Init+0x9c>)
 8002c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c92:	2204      	movs	r2, #4
 8002c94:	4013      	ands	r3, r2
 8002c96:	60bb      	str	r3, [r7, #8]
 8002c98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c9a:	4b1b      	ldr	r3, [pc, #108]	; (8002d08 <MX_GPIO_Init+0x9c>)
 8002c9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c9e:	4b1a      	ldr	r3, [pc, #104]	; (8002d08 <MX_GPIO_Init+0x9c>)
 8002ca0:	2120      	movs	r1, #32
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	635a      	str	r2, [r3, #52]	; 0x34
 8002ca6:	4b18      	ldr	r3, [pc, #96]	; (8002d08 <MX_GPIO_Init+0x9c>)
 8002ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002caa:	2220      	movs	r2, #32
 8002cac:	4013      	ands	r3, r2
 8002cae:	607b      	str	r3, [r7, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cb2:	4b15      	ldr	r3, [pc, #84]	; (8002d08 <MX_GPIO_Init+0x9c>)
 8002cb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cb6:	4b14      	ldr	r3, [pc, #80]	; (8002d08 <MX_GPIO_Init+0x9c>)
 8002cb8:	2101      	movs	r1, #1
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	635a      	str	r2, [r3, #52]	; 0x34
 8002cbe:	4b12      	ldr	r3, [pc, #72]	; (8002d08 <MX_GPIO_Init+0x9c>)
 8002cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	603b      	str	r3, [r7, #0]
 8002cc8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8002cca:	23a0      	movs	r3, #160	; 0xa0
 8002ccc:	05db      	lsls	r3, r3, #23
 8002cce:	2200      	movs	r2, #0
 8002cd0:	2120      	movs	r1, #32
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	f000 fc46 	bl	8003564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8002cd8:	0021      	movs	r1, r4
 8002cda:	187b      	adds	r3, r7, r1
 8002cdc:	2220      	movs	r2, #32
 8002cde:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ce0:	187b      	adds	r3, r7, r1
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce6:	187b      	adds	r3, r7, r1
 8002ce8:	2200      	movs	r2, #0
 8002cea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cec:	187b      	adds	r3, r7, r1
 8002cee:	2202      	movs	r2, #2
 8002cf0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8002cf2:	187a      	adds	r2, r7, r1
 8002cf4:	23a0      	movs	r3, #160	; 0xa0
 8002cf6:	05db      	lsls	r3, r3, #23
 8002cf8:	0011      	movs	r1, r2
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	f000 face 	bl	800329c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002d00:	46c0      	nop			; (mov r8, r8)
 8002d02:	46bd      	mov	sp, r7
 8002d04:	b009      	add	sp, #36	; 0x24
 8002d06:	bd90      	pop	{r4, r7, pc}
 8002d08:	40021000 	.word	0x40021000

08002d0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d10:	b672      	cpsid	i
}
 8002d12:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d14:	e7fe      	b.n	8002d14 <Error_Handler+0x8>
	...

08002d18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d1e:	4b0f      	ldr	r3, [pc, #60]	; (8002d5c <HAL_MspInit+0x44>)
 8002d20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d22:	4b0e      	ldr	r3, [pc, #56]	; (8002d5c <HAL_MspInit+0x44>)
 8002d24:	2101      	movs	r1, #1
 8002d26:	430a      	orrs	r2, r1
 8002d28:	641a      	str	r2, [r3, #64]	; 0x40
 8002d2a:	4b0c      	ldr	r3, [pc, #48]	; (8002d5c <HAL_MspInit+0x44>)
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	2201      	movs	r2, #1
 8002d30:	4013      	ands	r3, r2
 8002d32:	607b      	str	r3, [r7, #4]
 8002d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d36:	4b09      	ldr	r3, [pc, #36]	; (8002d5c <HAL_MspInit+0x44>)
 8002d38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d3a:	4b08      	ldr	r3, [pc, #32]	; (8002d5c <HAL_MspInit+0x44>)
 8002d3c:	2180      	movs	r1, #128	; 0x80
 8002d3e:	0549      	lsls	r1, r1, #21
 8002d40:	430a      	orrs	r2, r1
 8002d42:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d44:	4b05      	ldr	r3, [pc, #20]	; (8002d5c <HAL_MspInit+0x44>)
 8002d46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d48:	2380      	movs	r3, #128	; 0x80
 8002d4a:	055b      	lsls	r3, r3, #21
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	603b      	str	r3, [r7, #0]
 8002d50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d52:	46c0      	nop			; (mov r8, r8)
 8002d54:	46bd      	mov	sp, r7
 8002d56:	b002      	add	sp, #8
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	46c0      	nop			; (mov r8, r8)
 8002d5c:	40021000 	.word	0x40021000

08002d60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d60:	b590      	push	{r4, r7, lr}
 8002d62:	b097      	sub	sp, #92	; 0x5c
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d68:	2344      	movs	r3, #68	; 0x44
 8002d6a:	18fb      	adds	r3, r7, r3
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	2314      	movs	r3, #20
 8002d70:	001a      	movs	r2, r3
 8002d72:	2100      	movs	r1, #0
 8002d74:	f003 f852 	bl	8005e1c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d78:	2410      	movs	r4, #16
 8002d7a:	193b      	adds	r3, r7, r4
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	2334      	movs	r3, #52	; 0x34
 8002d80:	001a      	movs	r2, r3
 8002d82:	2100      	movs	r1, #0
 8002d84:	f003 f84a 	bl	8005e1c <memset>
  if(hi2c->Instance==I2C1)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a23      	ldr	r2, [pc, #140]	; (8002e1c <HAL_I2C_MspInit+0xbc>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d13f      	bne.n	8002e12 <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002d92:	193b      	adds	r3, r7, r4
 8002d94:	2220      	movs	r2, #32
 8002d96:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002d98:	193b      	adds	r3, r7, r4
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d9e:	193b      	adds	r3, r7, r4
 8002da0:	0018      	movs	r0, r3
 8002da2:	f001 ff59 	bl	8004c58 <HAL_RCCEx_PeriphCLKConfig>
 8002da6:	1e03      	subs	r3, r0, #0
 8002da8:	d001      	beq.n	8002dae <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002daa:	f7ff ffaf 	bl	8002d0c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dae:	4b1c      	ldr	r3, [pc, #112]	; (8002e20 <HAL_I2C_MspInit+0xc0>)
 8002db0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002db2:	4b1b      	ldr	r3, [pc, #108]	; (8002e20 <HAL_I2C_MspInit+0xc0>)
 8002db4:	2101      	movs	r1, #1
 8002db6:	430a      	orrs	r2, r1
 8002db8:	635a      	str	r2, [r3, #52]	; 0x34
 8002dba:	4b19      	ldr	r3, [pc, #100]	; (8002e20 <HAL_I2C_MspInit+0xc0>)
 8002dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002dc6:	2144      	movs	r1, #68	; 0x44
 8002dc8:	187b      	adds	r3, r7, r1
 8002dca:	22c0      	movs	r2, #192	; 0xc0
 8002dcc:	00d2      	lsls	r2, r2, #3
 8002dce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dd0:	187b      	adds	r3, r7, r1
 8002dd2:	2212      	movs	r2, #18
 8002dd4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd6:	187b      	adds	r3, r7, r1
 8002dd8:	2200      	movs	r2, #0
 8002dda:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ddc:	187b      	adds	r3, r7, r1
 8002dde:	2200      	movs	r2, #0
 8002de0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002de2:	187b      	adds	r3, r7, r1
 8002de4:	2206      	movs	r2, #6
 8002de6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de8:	187a      	adds	r2, r7, r1
 8002dea:	23a0      	movs	r3, #160	; 0xa0
 8002dec:	05db      	lsls	r3, r3, #23
 8002dee:	0011      	movs	r1, r2
 8002df0:	0018      	movs	r0, r3
 8002df2:	f000 fa53 	bl	800329c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002df6:	4b0a      	ldr	r3, [pc, #40]	; (8002e20 <HAL_I2C_MspInit+0xc0>)
 8002df8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dfa:	4b09      	ldr	r3, [pc, #36]	; (8002e20 <HAL_I2C_MspInit+0xc0>)
 8002dfc:	2180      	movs	r1, #128	; 0x80
 8002dfe:	0389      	lsls	r1, r1, #14
 8002e00:	430a      	orrs	r2, r1
 8002e02:	63da      	str	r2, [r3, #60]	; 0x3c
 8002e04:	4b06      	ldr	r3, [pc, #24]	; (8002e20 <HAL_I2C_MspInit+0xc0>)
 8002e06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e08:	2380      	movs	r3, #128	; 0x80
 8002e0a:	039b      	lsls	r3, r3, #14
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	60bb      	str	r3, [r7, #8]
 8002e10:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002e12:	46c0      	nop			; (mov r8, r8)
 8002e14:	46bd      	mov	sp, r7
 8002e16:	b017      	add	sp, #92	; 0x5c
 8002e18:	bd90      	pop	{r4, r7, pc}
 8002e1a:	46c0      	nop			; (mov r8, r8)
 8002e1c:	40005400 	.word	0x40005400
 8002e20:	40021000 	.word	0x40021000

08002e24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e24:	b590      	push	{r4, r7, lr}
 8002e26:	b097      	sub	sp, #92	; 0x5c
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e2c:	2344      	movs	r3, #68	; 0x44
 8002e2e:	18fb      	adds	r3, r7, r3
 8002e30:	0018      	movs	r0, r3
 8002e32:	2314      	movs	r3, #20
 8002e34:	001a      	movs	r2, r3
 8002e36:	2100      	movs	r1, #0
 8002e38:	f002 fff0 	bl	8005e1c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e3c:	2410      	movs	r4, #16
 8002e3e:	193b      	adds	r3, r7, r4
 8002e40:	0018      	movs	r0, r3
 8002e42:	2334      	movs	r3, #52	; 0x34
 8002e44:	001a      	movs	r2, r3
 8002e46:	2100      	movs	r1, #0
 8002e48:	f002 ffe8 	bl	8005e1c <memset>
  if(huart->Instance==USART2)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a22      	ldr	r2, [pc, #136]	; (8002edc <HAL_UART_MspInit+0xb8>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d13e      	bne.n	8002ed4 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002e56:	193b      	adds	r3, r7, r4
 8002e58:	2202      	movs	r2, #2
 8002e5a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002e5c:	193b      	adds	r3, r7, r4
 8002e5e:	2200      	movs	r2, #0
 8002e60:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e62:	193b      	adds	r3, r7, r4
 8002e64:	0018      	movs	r0, r3
 8002e66:	f001 fef7 	bl	8004c58 <HAL_RCCEx_PeriphCLKConfig>
 8002e6a:	1e03      	subs	r3, r0, #0
 8002e6c:	d001      	beq.n	8002e72 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002e6e:	f7ff ff4d 	bl	8002d0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e72:	4b1b      	ldr	r3, [pc, #108]	; (8002ee0 <HAL_UART_MspInit+0xbc>)
 8002e74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e76:	4b1a      	ldr	r3, [pc, #104]	; (8002ee0 <HAL_UART_MspInit+0xbc>)
 8002e78:	2180      	movs	r1, #128	; 0x80
 8002e7a:	0289      	lsls	r1, r1, #10
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002e80:	4b17      	ldr	r3, [pc, #92]	; (8002ee0 <HAL_UART_MspInit+0xbc>)
 8002e82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e84:	2380      	movs	r3, #128	; 0x80
 8002e86:	029b      	lsls	r3, r3, #10
 8002e88:	4013      	ands	r3, r2
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e8e:	4b14      	ldr	r3, [pc, #80]	; (8002ee0 <HAL_UART_MspInit+0xbc>)
 8002e90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e92:	4b13      	ldr	r3, [pc, #76]	; (8002ee0 <HAL_UART_MspInit+0xbc>)
 8002e94:	2101      	movs	r1, #1
 8002e96:	430a      	orrs	r2, r1
 8002e98:	635a      	str	r2, [r3, #52]	; 0x34
 8002e9a:	4b11      	ldr	r3, [pc, #68]	; (8002ee0 <HAL_UART_MspInit+0xbc>)
 8002e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	60bb      	str	r3, [r7, #8]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8002ea6:	2144      	movs	r1, #68	; 0x44
 8002ea8:	187b      	adds	r3, r7, r1
 8002eaa:	220c      	movs	r2, #12
 8002eac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eae:	187b      	adds	r3, r7, r1
 8002eb0:	2202      	movs	r2, #2
 8002eb2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002eb4:	187b      	adds	r3, r7, r1
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eba:	187b      	adds	r3, r7, r1
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002ec0:	187b      	adds	r3, r7, r1
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ec6:	187a      	adds	r2, r7, r1
 8002ec8:	23a0      	movs	r3, #160	; 0xa0
 8002eca:	05db      	lsls	r3, r3, #23
 8002ecc:	0011      	movs	r1, r2
 8002ece:	0018      	movs	r0, r3
 8002ed0:	f000 f9e4 	bl	800329c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002ed4:	46c0      	nop			; (mov r8, r8)
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	b017      	add	sp, #92	; 0x5c
 8002eda:	bd90      	pop	{r4, r7, pc}
 8002edc:	40004400 	.word	0x40004400
 8002ee0:	40021000 	.word	0x40021000

08002ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ee8:	e7fe      	b.n	8002ee8 <NMI_Handler+0x4>

08002eea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002eee:	e7fe      	b.n	8002eee <HardFault_Handler+0x4>

08002ef0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002ef4:	46c0      	nop			; (mov r8, r8)
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002efe:	46c0      	nop			; (mov r8, r8)
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f08:	f000 f8d4 	bl	80030b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f0c:	46c0      	nop			; (mov r8, r8)
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
	...

08002f14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f1c:	4a14      	ldr	r2, [pc, #80]	; (8002f70 <_sbrk+0x5c>)
 8002f1e:	4b15      	ldr	r3, [pc, #84]	; (8002f74 <_sbrk+0x60>)
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f28:	4b13      	ldr	r3, [pc, #76]	; (8002f78 <_sbrk+0x64>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d102      	bne.n	8002f36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f30:	4b11      	ldr	r3, [pc, #68]	; (8002f78 <_sbrk+0x64>)
 8002f32:	4a12      	ldr	r2, [pc, #72]	; (8002f7c <_sbrk+0x68>)
 8002f34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f36:	4b10      	ldr	r3, [pc, #64]	; (8002f78 <_sbrk+0x64>)
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	18d3      	adds	r3, r2, r3
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d207      	bcs.n	8002f54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f44:	f002 ff84 	bl	8005e50 <__errno>
 8002f48:	0003      	movs	r3, r0
 8002f4a:	220c      	movs	r2, #12
 8002f4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	425b      	negs	r3, r3
 8002f52:	e009      	b.n	8002f68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f54:	4b08      	ldr	r3, [pc, #32]	; (8002f78 <_sbrk+0x64>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f5a:	4b07      	ldr	r3, [pc, #28]	; (8002f78 <_sbrk+0x64>)
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	18d2      	adds	r2, r2, r3
 8002f62:	4b05      	ldr	r3, [pc, #20]	; (8002f78 <_sbrk+0x64>)
 8002f64:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002f66:	68fb      	ldr	r3, [r7, #12]
}
 8002f68:	0018      	movs	r0, r3
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	b006      	add	sp, #24
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	20009000 	.word	0x20009000
 8002f74:	00000400 	.word	0x00000400
 8002f78:	200001bc 	.word	0x200001bc
 8002f7c:	20000310 	.word	0x20000310

08002f80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f84:	46c0      	nop			; (mov r8, r8)
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
	...

08002f8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f8c:	480d      	ldr	r0, [pc, #52]	; (8002fc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f8e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f90:	f7ff fff6 	bl	8002f80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f94:	480c      	ldr	r0, [pc, #48]	; (8002fc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f96:	490d      	ldr	r1, [pc, #52]	; (8002fcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f98:	4a0d      	ldr	r2, [pc, #52]	; (8002fd0 <LoopForever+0xe>)
  movs r3, #0
 8002f9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f9c:	e002      	b.n	8002fa4 <LoopCopyDataInit>

08002f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fa2:	3304      	adds	r3, #4

08002fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fa8:	d3f9      	bcc.n	8002f9e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002faa:	4a0a      	ldr	r2, [pc, #40]	; (8002fd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002fac:	4c0a      	ldr	r4, [pc, #40]	; (8002fd8 <LoopForever+0x16>)
  movs r3, #0
 8002fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fb0:	e001      	b.n	8002fb6 <LoopFillZerobss>

08002fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fb4:	3204      	adds	r2, #4

08002fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fb8:	d3fb      	bcc.n	8002fb2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002fba:	f002 ff4f 	bl	8005e5c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002fbe:	f7ff fcd3 	bl	8002968 <main>

08002fc2 <LoopForever>:

LoopForever:
  b LoopForever
 8002fc2:	e7fe      	b.n	8002fc2 <LoopForever>
  ldr   r0, =_estack
 8002fc4:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8002fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fcc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002fd0:	08006040 	.word	0x08006040
  ldr r2, =_sbss
 8002fd4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002fd8:	2000030c 	.word	0x2000030c

08002fdc <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002fdc:	e7fe      	b.n	8002fdc <ADC1_COMP_IRQHandler>
	...

08002fe0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002fe6:	1dfb      	adds	r3, r7, #7
 8002fe8:	2200      	movs	r2, #0
 8002fea:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fec:	4b0b      	ldr	r3, [pc, #44]	; (800301c <HAL_Init+0x3c>)
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	4b0a      	ldr	r3, [pc, #40]	; (800301c <HAL_Init+0x3c>)
 8002ff2:	2180      	movs	r1, #128	; 0x80
 8002ff4:	0049      	lsls	r1, r1, #1
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ffa:	2000      	movs	r0, #0
 8002ffc:	f000 f810 	bl	8003020 <HAL_InitTick>
 8003000:	1e03      	subs	r3, r0, #0
 8003002:	d003      	beq.n	800300c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003004:	1dfb      	adds	r3, r7, #7
 8003006:	2201      	movs	r2, #1
 8003008:	701a      	strb	r2, [r3, #0]
 800300a:	e001      	b.n	8003010 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800300c:	f7ff fe84 	bl	8002d18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003010:	1dfb      	adds	r3, r7, #7
 8003012:	781b      	ldrb	r3, [r3, #0]
}
 8003014:	0018      	movs	r0, r3
 8003016:	46bd      	mov	sp, r7
 8003018:	b002      	add	sp, #8
 800301a:	bd80      	pop	{r7, pc}
 800301c:	40022000 	.word	0x40022000

08003020 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003020:	b590      	push	{r4, r7, lr}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003028:	230f      	movs	r3, #15
 800302a:	18fb      	adds	r3, r7, r3
 800302c:	2200      	movs	r2, #0
 800302e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003030:	4b1d      	ldr	r3, [pc, #116]	; (80030a8 <HAL_InitTick+0x88>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d02b      	beq.n	8003090 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003038:	4b1c      	ldr	r3, [pc, #112]	; (80030ac <HAL_InitTick+0x8c>)
 800303a:	681c      	ldr	r4, [r3, #0]
 800303c:	4b1a      	ldr	r3, [pc, #104]	; (80030a8 <HAL_InitTick+0x88>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	0019      	movs	r1, r3
 8003042:	23fa      	movs	r3, #250	; 0xfa
 8003044:	0098      	lsls	r0, r3, #2
 8003046:	f7fd f85d 	bl	8000104 <__udivsi3>
 800304a:	0003      	movs	r3, r0
 800304c:	0019      	movs	r1, r3
 800304e:	0020      	movs	r0, r4
 8003050:	f7fd f858 	bl	8000104 <__udivsi3>
 8003054:	0003      	movs	r3, r0
 8003056:	0018      	movs	r0, r3
 8003058:	f000 f913 	bl	8003282 <HAL_SYSTICK_Config>
 800305c:	1e03      	subs	r3, r0, #0
 800305e:	d112      	bne.n	8003086 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b03      	cmp	r3, #3
 8003064:	d80a      	bhi.n	800307c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	2301      	movs	r3, #1
 800306a:	425b      	negs	r3, r3
 800306c:	2200      	movs	r2, #0
 800306e:	0018      	movs	r0, r3
 8003070:	f000 f8f2 	bl	8003258 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003074:	4b0e      	ldr	r3, [pc, #56]	; (80030b0 <HAL_InitTick+0x90>)
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	601a      	str	r2, [r3, #0]
 800307a:	e00d      	b.n	8003098 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800307c:	230f      	movs	r3, #15
 800307e:	18fb      	adds	r3, r7, r3
 8003080:	2201      	movs	r2, #1
 8003082:	701a      	strb	r2, [r3, #0]
 8003084:	e008      	b.n	8003098 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003086:	230f      	movs	r3, #15
 8003088:	18fb      	adds	r3, r7, r3
 800308a:	2201      	movs	r2, #1
 800308c:	701a      	strb	r2, [r3, #0]
 800308e:	e003      	b.n	8003098 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003090:	230f      	movs	r3, #15
 8003092:	18fb      	adds	r3, r7, r3
 8003094:	2201      	movs	r2, #1
 8003096:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003098:	230f      	movs	r3, #15
 800309a:	18fb      	adds	r3, r7, r3
 800309c:	781b      	ldrb	r3, [r3, #0]
}
 800309e:	0018      	movs	r0, r3
 80030a0:	46bd      	mov	sp, r7
 80030a2:	b005      	add	sp, #20
 80030a4:	bd90      	pop	{r4, r7, pc}
 80030a6:	46c0      	nop			; (mov r8, r8)
 80030a8:	20000008 	.word	0x20000008
 80030ac:	20000000 	.word	0x20000000
 80030b0:	20000004 	.word	0x20000004

080030b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80030b8:	4b05      	ldr	r3, [pc, #20]	; (80030d0 <HAL_IncTick+0x1c>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	001a      	movs	r2, r3
 80030be:	4b05      	ldr	r3, [pc, #20]	; (80030d4 <HAL_IncTick+0x20>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	18d2      	adds	r2, r2, r3
 80030c4:	4b03      	ldr	r3, [pc, #12]	; (80030d4 <HAL_IncTick+0x20>)
 80030c6:	601a      	str	r2, [r3, #0]
}
 80030c8:	46c0      	nop			; (mov r8, r8)
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	46c0      	nop			; (mov r8, r8)
 80030d0:	20000008 	.word	0x20000008
 80030d4:	200001c0 	.word	0x200001c0

080030d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  return uwTick;
 80030dc:	4b02      	ldr	r3, [pc, #8]	; (80030e8 <HAL_GetTick+0x10>)
 80030de:	681b      	ldr	r3, [r3, #0]
}
 80030e0:	0018      	movs	r0, r3
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	46c0      	nop			; (mov r8, r8)
 80030e8:	200001c0 	.word	0x200001c0

080030ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030f4:	f7ff fff0 	bl	80030d8 <HAL_GetTick>
 80030f8:	0003      	movs	r3, r0
 80030fa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	3301      	adds	r3, #1
 8003104:	d005      	beq.n	8003112 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003106:	4b0a      	ldr	r3, [pc, #40]	; (8003130 <HAL_Delay+0x44>)
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	001a      	movs	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	189b      	adds	r3, r3, r2
 8003110:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003112:	46c0      	nop			; (mov r8, r8)
 8003114:	f7ff ffe0 	bl	80030d8 <HAL_GetTick>
 8003118:	0002      	movs	r2, r0
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	429a      	cmp	r2, r3
 8003122:	d8f7      	bhi.n	8003114 <HAL_Delay+0x28>
  {
  }
}
 8003124:	46c0      	nop			; (mov r8, r8)
 8003126:	46c0      	nop			; (mov r8, r8)
 8003128:	46bd      	mov	sp, r7
 800312a:	b004      	add	sp, #16
 800312c:	bd80      	pop	{r7, pc}
 800312e:	46c0      	nop			; (mov r8, r8)
 8003130:	20000008 	.word	0x20000008

08003134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003134:	b590      	push	{r4, r7, lr}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	0002      	movs	r2, r0
 800313c:	6039      	str	r1, [r7, #0]
 800313e:	1dfb      	adds	r3, r7, #7
 8003140:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003142:	1dfb      	adds	r3, r7, #7
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b7f      	cmp	r3, #127	; 0x7f
 8003148:	d828      	bhi.n	800319c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800314a:	4a2f      	ldr	r2, [pc, #188]	; (8003208 <__NVIC_SetPriority+0xd4>)
 800314c:	1dfb      	adds	r3, r7, #7
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	b25b      	sxtb	r3, r3
 8003152:	089b      	lsrs	r3, r3, #2
 8003154:	33c0      	adds	r3, #192	; 0xc0
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	589b      	ldr	r3, [r3, r2]
 800315a:	1dfa      	adds	r2, r7, #7
 800315c:	7812      	ldrb	r2, [r2, #0]
 800315e:	0011      	movs	r1, r2
 8003160:	2203      	movs	r2, #3
 8003162:	400a      	ands	r2, r1
 8003164:	00d2      	lsls	r2, r2, #3
 8003166:	21ff      	movs	r1, #255	; 0xff
 8003168:	4091      	lsls	r1, r2
 800316a:	000a      	movs	r2, r1
 800316c:	43d2      	mvns	r2, r2
 800316e:	401a      	ands	r2, r3
 8003170:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	019b      	lsls	r3, r3, #6
 8003176:	22ff      	movs	r2, #255	; 0xff
 8003178:	401a      	ands	r2, r3
 800317a:	1dfb      	adds	r3, r7, #7
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	0018      	movs	r0, r3
 8003180:	2303      	movs	r3, #3
 8003182:	4003      	ands	r3, r0
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003188:	481f      	ldr	r0, [pc, #124]	; (8003208 <__NVIC_SetPriority+0xd4>)
 800318a:	1dfb      	adds	r3, r7, #7
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	b25b      	sxtb	r3, r3
 8003190:	089b      	lsrs	r3, r3, #2
 8003192:	430a      	orrs	r2, r1
 8003194:	33c0      	adds	r3, #192	; 0xc0
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800319a:	e031      	b.n	8003200 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800319c:	4a1b      	ldr	r2, [pc, #108]	; (800320c <__NVIC_SetPriority+0xd8>)
 800319e:	1dfb      	adds	r3, r7, #7
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	0019      	movs	r1, r3
 80031a4:	230f      	movs	r3, #15
 80031a6:	400b      	ands	r3, r1
 80031a8:	3b08      	subs	r3, #8
 80031aa:	089b      	lsrs	r3, r3, #2
 80031ac:	3306      	adds	r3, #6
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	18d3      	adds	r3, r2, r3
 80031b2:	3304      	adds	r3, #4
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	1dfa      	adds	r2, r7, #7
 80031b8:	7812      	ldrb	r2, [r2, #0]
 80031ba:	0011      	movs	r1, r2
 80031bc:	2203      	movs	r2, #3
 80031be:	400a      	ands	r2, r1
 80031c0:	00d2      	lsls	r2, r2, #3
 80031c2:	21ff      	movs	r1, #255	; 0xff
 80031c4:	4091      	lsls	r1, r2
 80031c6:	000a      	movs	r2, r1
 80031c8:	43d2      	mvns	r2, r2
 80031ca:	401a      	ands	r2, r3
 80031cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	019b      	lsls	r3, r3, #6
 80031d2:	22ff      	movs	r2, #255	; 0xff
 80031d4:	401a      	ands	r2, r3
 80031d6:	1dfb      	adds	r3, r7, #7
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	0018      	movs	r0, r3
 80031dc:	2303      	movs	r3, #3
 80031de:	4003      	ands	r3, r0
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031e4:	4809      	ldr	r0, [pc, #36]	; (800320c <__NVIC_SetPriority+0xd8>)
 80031e6:	1dfb      	adds	r3, r7, #7
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	001c      	movs	r4, r3
 80031ec:	230f      	movs	r3, #15
 80031ee:	4023      	ands	r3, r4
 80031f0:	3b08      	subs	r3, #8
 80031f2:	089b      	lsrs	r3, r3, #2
 80031f4:	430a      	orrs	r2, r1
 80031f6:	3306      	adds	r3, #6
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	18c3      	adds	r3, r0, r3
 80031fc:	3304      	adds	r3, #4
 80031fe:	601a      	str	r2, [r3, #0]
}
 8003200:	46c0      	nop			; (mov r8, r8)
 8003202:	46bd      	mov	sp, r7
 8003204:	b003      	add	sp, #12
 8003206:	bd90      	pop	{r4, r7, pc}
 8003208:	e000e100 	.word	0xe000e100
 800320c:	e000ed00 	.word	0xe000ed00

08003210 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	1e5a      	subs	r2, r3, #1
 800321c:	2380      	movs	r3, #128	; 0x80
 800321e:	045b      	lsls	r3, r3, #17
 8003220:	429a      	cmp	r2, r3
 8003222:	d301      	bcc.n	8003228 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003224:	2301      	movs	r3, #1
 8003226:	e010      	b.n	800324a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003228:	4b0a      	ldr	r3, [pc, #40]	; (8003254 <SysTick_Config+0x44>)
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	3a01      	subs	r2, #1
 800322e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003230:	2301      	movs	r3, #1
 8003232:	425b      	negs	r3, r3
 8003234:	2103      	movs	r1, #3
 8003236:	0018      	movs	r0, r3
 8003238:	f7ff ff7c 	bl	8003134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800323c:	4b05      	ldr	r3, [pc, #20]	; (8003254 <SysTick_Config+0x44>)
 800323e:	2200      	movs	r2, #0
 8003240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003242:	4b04      	ldr	r3, [pc, #16]	; (8003254 <SysTick_Config+0x44>)
 8003244:	2207      	movs	r2, #7
 8003246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003248:	2300      	movs	r3, #0
}
 800324a:	0018      	movs	r0, r3
 800324c:	46bd      	mov	sp, r7
 800324e:	b002      	add	sp, #8
 8003250:	bd80      	pop	{r7, pc}
 8003252:	46c0      	nop			; (mov r8, r8)
 8003254:	e000e010 	.word	0xe000e010

08003258 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	60b9      	str	r1, [r7, #8]
 8003260:	607a      	str	r2, [r7, #4]
 8003262:	210f      	movs	r1, #15
 8003264:	187b      	adds	r3, r7, r1
 8003266:	1c02      	adds	r2, r0, #0
 8003268:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800326a:	68ba      	ldr	r2, [r7, #8]
 800326c:	187b      	adds	r3, r7, r1
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	b25b      	sxtb	r3, r3
 8003272:	0011      	movs	r1, r2
 8003274:	0018      	movs	r0, r3
 8003276:	f7ff ff5d 	bl	8003134 <__NVIC_SetPriority>
}
 800327a:	46c0      	nop			; (mov r8, r8)
 800327c:	46bd      	mov	sp, r7
 800327e:	b004      	add	sp, #16
 8003280:	bd80      	pop	{r7, pc}

08003282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b082      	sub	sp, #8
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	0018      	movs	r0, r3
 800328e:	f7ff ffbf 	bl	8003210 <SysTick_Config>
 8003292:	0003      	movs	r3, r0
}
 8003294:	0018      	movs	r0, r3
 8003296:	46bd      	mov	sp, r7
 8003298:	b002      	add	sp, #8
 800329a:	bd80      	pop	{r7, pc}

0800329c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032a6:	2300      	movs	r3, #0
 80032a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032aa:	e147      	b.n	800353c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2101      	movs	r1, #1
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	4091      	lsls	r1, r2
 80032b6:	000a      	movs	r2, r1
 80032b8:	4013      	ands	r3, r2
 80032ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d100      	bne.n	80032c4 <HAL_GPIO_Init+0x28>
 80032c2:	e138      	b.n	8003536 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	2203      	movs	r2, #3
 80032ca:	4013      	ands	r3, r2
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d005      	beq.n	80032dc <HAL_GPIO_Init+0x40>
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2203      	movs	r2, #3
 80032d6:	4013      	ands	r3, r2
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d130      	bne.n	800333e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	2203      	movs	r2, #3
 80032e8:	409a      	lsls	r2, r3
 80032ea:	0013      	movs	r3, r2
 80032ec:	43da      	mvns	r2, r3
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	4013      	ands	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	409a      	lsls	r2, r3
 80032fe:	0013      	movs	r3, r2
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	4313      	orrs	r3, r2
 8003304:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003312:	2201      	movs	r2, #1
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	409a      	lsls	r2, r3
 8003318:	0013      	movs	r3, r2
 800331a:	43da      	mvns	r2, r3
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	4013      	ands	r3, r2
 8003320:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	091b      	lsrs	r3, r3, #4
 8003328:	2201      	movs	r2, #1
 800332a:	401a      	ands	r2, r3
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	409a      	lsls	r2, r3
 8003330:	0013      	movs	r3, r2
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	4313      	orrs	r3, r2
 8003336:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2203      	movs	r2, #3
 8003344:	4013      	ands	r3, r2
 8003346:	2b03      	cmp	r3, #3
 8003348:	d017      	beq.n	800337a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	2203      	movs	r2, #3
 8003356:	409a      	lsls	r2, r3
 8003358:	0013      	movs	r3, r2
 800335a:	43da      	mvns	r2, r3
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	4013      	ands	r3, r2
 8003360:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	409a      	lsls	r2, r3
 800336c:	0013      	movs	r3, r2
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	4313      	orrs	r3, r2
 8003372:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2203      	movs	r2, #3
 8003380:	4013      	ands	r3, r2
 8003382:	2b02      	cmp	r3, #2
 8003384:	d123      	bne.n	80033ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	08da      	lsrs	r2, r3, #3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	3208      	adds	r2, #8
 800338e:	0092      	lsls	r2, r2, #2
 8003390:	58d3      	ldr	r3, [r2, r3]
 8003392:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	2207      	movs	r2, #7
 8003398:	4013      	ands	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	220f      	movs	r2, #15
 800339e:	409a      	lsls	r2, r3
 80033a0:	0013      	movs	r3, r2
 80033a2:	43da      	mvns	r2, r3
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	4013      	ands	r3, r2
 80033a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	691a      	ldr	r2, [r3, #16]
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	2107      	movs	r1, #7
 80033b2:	400b      	ands	r3, r1
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	409a      	lsls	r2, r3
 80033b8:	0013      	movs	r3, r2
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	4313      	orrs	r3, r2
 80033be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	08da      	lsrs	r2, r3, #3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3208      	adds	r2, #8
 80033c8:	0092      	lsls	r2, r2, #2
 80033ca:	6939      	ldr	r1, [r7, #16]
 80033cc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	2203      	movs	r2, #3
 80033da:	409a      	lsls	r2, r3
 80033dc:	0013      	movs	r3, r2
 80033de:	43da      	mvns	r2, r3
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	4013      	ands	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2203      	movs	r2, #3
 80033ec:	401a      	ands	r2, r3
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	409a      	lsls	r2, r3
 80033f4:	0013      	movs	r3, r2
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	23c0      	movs	r3, #192	; 0xc0
 8003408:	029b      	lsls	r3, r3, #10
 800340a:	4013      	ands	r3, r2
 800340c:	d100      	bne.n	8003410 <HAL_GPIO_Init+0x174>
 800340e:	e092      	b.n	8003536 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003410:	4a50      	ldr	r2, [pc, #320]	; (8003554 <HAL_GPIO_Init+0x2b8>)
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	089b      	lsrs	r3, r3, #2
 8003416:	3318      	adds	r3, #24
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	589b      	ldr	r3, [r3, r2]
 800341c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	2203      	movs	r2, #3
 8003422:	4013      	ands	r3, r2
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	220f      	movs	r2, #15
 8003428:	409a      	lsls	r2, r3
 800342a:	0013      	movs	r3, r2
 800342c:	43da      	mvns	r2, r3
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	4013      	ands	r3, r2
 8003432:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	23a0      	movs	r3, #160	; 0xa0
 8003438:	05db      	lsls	r3, r3, #23
 800343a:	429a      	cmp	r2, r3
 800343c:	d013      	beq.n	8003466 <HAL_GPIO_Init+0x1ca>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a45      	ldr	r2, [pc, #276]	; (8003558 <HAL_GPIO_Init+0x2bc>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d00d      	beq.n	8003462 <HAL_GPIO_Init+0x1c6>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a44      	ldr	r2, [pc, #272]	; (800355c <HAL_GPIO_Init+0x2c0>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d007      	beq.n	800345e <HAL_GPIO_Init+0x1c2>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a43      	ldr	r2, [pc, #268]	; (8003560 <HAL_GPIO_Init+0x2c4>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d101      	bne.n	800345a <HAL_GPIO_Init+0x1be>
 8003456:	2303      	movs	r3, #3
 8003458:	e006      	b.n	8003468 <HAL_GPIO_Init+0x1cc>
 800345a:	2305      	movs	r3, #5
 800345c:	e004      	b.n	8003468 <HAL_GPIO_Init+0x1cc>
 800345e:	2302      	movs	r3, #2
 8003460:	e002      	b.n	8003468 <HAL_GPIO_Init+0x1cc>
 8003462:	2301      	movs	r3, #1
 8003464:	e000      	b.n	8003468 <HAL_GPIO_Init+0x1cc>
 8003466:	2300      	movs	r3, #0
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	2103      	movs	r1, #3
 800346c:	400a      	ands	r2, r1
 800346e:	00d2      	lsls	r2, r2, #3
 8003470:	4093      	lsls	r3, r2
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	4313      	orrs	r3, r2
 8003476:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003478:	4936      	ldr	r1, [pc, #216]	; (8003554 <HAL_GPIO_Init+0x2b8>)
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	089b      	lsrs	r3, r3, #2
 800347e:	3318      	adds	r3, #24
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003486:	4b33      	ldr	r3, [pc, #204]	; (8003554 <HAL_GPIO_Init+0x2b8>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	43da      	mvns	r2, r3
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	4013      	ands	r3, r2
 8003494:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	2380      	movs	r3, #128	; 0x80
 800349c:	035b      	lsls	r3, r3, #13
 800349e:	4013      	ands	r3, r2
 80034a0:	d003      	beq.n	80034aa <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034aa:	4b2a      	ldr	r3, [pc, #168]	; (8003554 <HAL_GPIO_Init+0x2b8>)
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80034b0:	4b28      	ldr	r3, [pc, #160]	; (8003554 <HAL_GPIO_Init+0x2b8>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	43da      	mvns	r2, r3
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	4013      	ands	r3, r2
 80034be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685a      	ldr	r2, [r3, #4]
 80034c4:	2380      	movs	r3, #128	; 0x80
 80034c6:	039b      	lsls	r3, r3, #14
 80034c8:	4013      	ands	r3, r2
 80034ca:	d003      	beq.n	80034d4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80034d4:	4b1f      	ldr	r3, [pc, #124]	; (8003554 <HAL_GPIO_Init+0x2b8>)
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80034da:	4a1e      	ldr	r2, [pc, #120]	; (8003554 <HAL_GPIO_Init+0x2b8>)
 80034dc:	2384      	movs	r3, #132	; 0x84
 80034de:	58d3      	ldr	r3, [r2, r3]
 80034e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	43da      	mvns	r2, r3
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	4013      	ands	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	2380      	movs	r3, #128	; 0x80
 80034f2:	029b      	lsls	r3, r3, #10
 80034f4:	4013      	ands	r3, r2
 80034f6:	d003      	beq.n	8003500 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003500:	4914      	ldr	r1, [pc, #80]	; (8003554 <HAL_GPIO_Init+0x2b8>)
 8003502:	2284      	movs	r2, #132	; 0x84
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003508:	4a12      	ldr	r2, [pc, #72]	; (8003554 <HAL_GPIO_Init+0x2b8>)
 800350a:	2380      	movs	r3, #128	; 0x80
 800350c:	58d3      	ldr	r3, [r2, r3]
 800350e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	43da      	mvns	r2, r3
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	4013      	ands	r3, r2
 8003518:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	2380      	movs	r3, #128	; 0x80
 8003520:	025b      	lsls	r3, r3, #9
 8003522:	4013      	ands	r3, r2
 8003524:	d003      	beq.n	800352e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	4313      	orrs	r3, r2
 800352c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800352e:	4909      	ldr	r1, [pc, #36]	; (8003554 <HAL_GPIO_Init+0x2b8>)
 8003530:	2280      	movs	r2, #128	; 0x80
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	3301      	adds	r3, #1
 800353a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	40da      	lsrs	r2, r3
 8003544:	1e13      	subs	r3, r2, #0
 8003546:	d000      	beq.n	800354a <HAL_GPIO_Init+0x2ae>
 8003548:	e6b0      	b.n	80032ac <HAL_GPIO_Init+0x10>
  }
}
 800354a:	46c0      	nop			; (mov r8, r8)
 800354c:	46c0      	nop			; (mov r8, r8)
 800354e:	46bd      	mov	sp, r7
 8003550:	b006      	add	sp, #24
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40021800 	.word	0x40021800
 8003558:	50000400 	.word	0x50000400
 800355c:	50000800 	.word	0x50000800
 8003560:	50000c00 	.word	0x50000c00

08003564 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	0008      	movs	r0, r1
 800356e:	0011      	movs	r1, r2
 8003570:	1cbb      	adds	r3, r7, #2
 8003572:	1c02      	adds	r2, r0, #0
 8003574:	801a      	strh	r2, [r3, #0]
 8003576:	1c7b      	adds	r3, r7, #1
 8003578:	1c0a      	adds	r2, r1, #0
 800357a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800357c:	1c7b      	adds	r3, r7, #1
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d004      	beq.n	800358e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003584:	1cbb      	adds	r3, r7, #2
 8003586:	881a      	ldrh	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800358c:	e003      	b.n	8003596 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800358e:	1cbb      	adds	r3, r7, #2
 8003590:	881a      	ldrh	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003596:	46c0      	nop			; (mov r8, r8)
 8003598:	46bd      	mov	sp, r7
 800359a:	b002      	add	sp, #8
 800359c:	bd80      	pop	{r7, pc}
	...

080035a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e08f      	b.n	80036d2 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2241      	movs	r2, #65	; 0x41
 80035b6:	5c9b      	ldrb	r3, [r3, r2]
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d107      	bne.n	80035ce <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2240      	movs	r2, #64	; 0x40
 80035c2:	2100      	movs	r1, #0
 80035c4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	0018      	movs	r0, r3
 80035ca:	f7ff fbc9 	bl	8002d60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2241      	movs	r2, #65	; 0x41
 80035d2:	2124      	movs	r1, #36	; 0x24
 80035d4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2101      	movs	r1, #1
 80035e2:	438a      	bics	r2, r1
 80035e4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	493b      	ldr	r1, [pc, #236]	; (80036dc <HAL_I2C_Init+0x13c>)
 80035f0:	400a      	ands	r2, r1
 80035f2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689a      	ldr	r2, [r3, #8]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4938      	ldr	r1, [pc, #224]	; (80036e0 <HAL_I2C_Init+0x140>)
 8003600:	400a      	ands	r2, r1
 8003602:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d108      	bne.n	800361e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2180      	movs	r1, #128	; 0x80
 8003616:	0209      	lsls	r1, r1, #8
 8003618:	430a      	orrs	r2, r1
 800361a:	609a      	str	r2, [r3, #8]
 800361c:	e007      	b.n	800362e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	689a      	ldr	r2, [r3, #8]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2184      	movs	r1, #132	; 0x84
 8003628:	0209      	lsls	r1, r1, #8
 800362a:	430a      	orrs	r2, r1
 800362c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	2b02      	cmp	r3, #2
 8003634:	d109      	bne.n	800364a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2180      	movs	r1, #128	; 0x80
 8003642:	0109      	lsls	r1, r1, #4
 8003644:	430a      	orrs	r2, r1
 8003646:	605a      	str	r2, [r3, #4]
 8003648:	e007      	b.n	800365a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4923      	ldr	r1, [pc, #140]	; (80036e4 <HAL_I2C_Init+0x144>)
 8003656:	400a      	ands	r2, r1
 8003658:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4920      	ldr	r1, [pc, #128]	; (80036e8 <HAL_I2C_Init+0x148>)
 8003666:	430a      	orrs	r2, r1
 8003668:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68da      	ldr	r2, [r3, #12]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	491a      	ldr	r1, [pc, #104]	; (80036e0 <HAL_I2C_Init+0x140>)
 8003676:	400a      	ands	r2, r1
 8003678:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	691a      	ldr	r2, [r3, #16]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	431a      	orrs	r2, r3
 8003684:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	430a      	orrs	r2, r1
 8003692:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	69d9      	ldr	r1, [r3, #28]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a1a      	ldr	r2, [r3, #32]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2101      	movs	r1, #1
 80036b0:	430a      	orrs	r2, r1
 80036b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2241      	movs	r2, #65	; 0x41
 80036be:	2120      	movs	r1, #32
 80036c0:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2242      	movs	r2, #66	; 0x42
 80036cc:	2100      	movs	r1, #0
 80036ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	0018      	movs	r0, r3
 80036d4:	46bd      	mov	sp, r7
 80036d6:	b002      	add	sp, #8
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	46c0      	nop			; (mov r8, r8)
 80036dc:	f0ffffff 	.word	0xf0ffffff
 80036e0:	ffff7fff 	.word	0xffff7fff
 80036e4:	fffff7ff 	.word	0xfffff7ff
 80036e8:	02008000 	.word	0x02008000

080036ec <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80036ec:	b590      	push	{r4, r7, lr}
 80036ee:	b089      	sub	sp, #36	; 0x24
 80036f0:	af02      	add	r7, sp, #8
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	0008      	movs	r0, r1
 80036f6:	607a      	str	r2, [r7, #4]
 80036f8:	0019      	movs	r1, r3
 80036fa:	230a      	movs	r3, #10
 80036fc:	18fb      	adds	r3, r7, r3
 80036fe:	1c02      	adds	r2, r0, #0
 8003700:	801a      	strh	r2, [r3, #0]
 8003702:	2308      	movs	r3, #8
 8003704:	18fb      	adds	r3, r7, r3
 8003706:	1c0a      	adds	r2, r1, #0
 8003708:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2241      	movs	r2, #65	; 0x41
 800370e:	5c9b      	ldrb	r3, [r3, r2]
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b20      	cmp	r3, #32
 8003714:	d000      	beq.n	8003718 <HAL_I2C_Master_Transmit+0x2c>
 8003716:	e10a      	b.n	800392e <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2240      	movs	r2, #64	; 0x40
 800371c:	5c9b      	ldrb	r3, [r3, r2]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d101      	bne.n	8003726 <HAL_I2C_Master_Transmit+0x3a>
 8003722:	2302      	movs	r3, #2
 8003724:	e104      	b.n	8003930 <HAL_I2C_Master_Transmit+0x244>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2240      	movs	r2, #64	; 0x40
 800372a:	2101      	movs	r1, #1
 800372c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800372e:	f7ff fcd3 	bl	80030d8 <HAL_GetTick>
 8003732:	0003      	movs	r3, r0
 8003734:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003736:	2380      	movs	r3, #128	; 0x80
 8003738:	0219      	lsls	r1, r3, #8
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	2319      	movs	r3, #25
 8003742:	2201      	movs	r2, #1
 8003744:	f000 fa26 	bl	8003b94 <I2C_WaitOnFlagUntilTimeout>
 8003748:	1e03      	subs	r3, r0, #0
 800374a:	d001      	beq.n	8003750 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e0ef      	b.n	8003930 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2241      	movs	r2, #65	; 0x41
 8003754:	2121      	movs	r1, #33	; 0x21
 8003756:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2242      	movs	r2, #66	; 0x42
 800375c:	2110      	movs	r1, #16
 800375e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2208      	movs	r2, #8
 8003770:	18ba      	adds	r2, r7, r2
 8003772:	8812      	ldrh	r2, [r2, #0]
 8003774:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003780:	b29b      	uxth	r3, r3
 8003782:	2bff      	cmp	r3, #255	; 0xff
 8003784:	d906      	bls.n	8003794 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	22ff      	movs	r2, #255	; 0xff
 800378a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800378c:	2380      	movs	r3, #128	; 0x80
 800378e:	045b      	lsls	r3, r3, #17
 8003790:	617b      	str	r3, [r7, #20]
 8003792:	e007      	b.n	80037a4 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003798:	b29a      	uxth	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800379e:	2380      	movs	r3, #128	; 0x80
 80037a0:	049b      	lsls	r3, r3, #18
 80037a2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d027      	beq.n	80037fc <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	781a      	ldrb	r2, [r3, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037bc:	1c5a      	adds	r2, r3, #1
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	3b01      	subs	r3, #1
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d4:	3b01      	subs	r3, #1
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	3301      	adds	r3, #1
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	697c      	ldr	r4, [r7, #20]
 80037e8:	230a      	movs	r3, #10
 80037ea:	18fb      	adds	r3, r7, r3
 80037ec:	8819      	ldrh	r1, [r3, #0]
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	4b51      	ldr	r3, [pc, #324]	; (8003938 <HAL_I2C_Master_Transmit+0x24c>)
 80037f2:	9300      	str	r3, [sp, #0]
 80037f4:	0023      	movs	r3, r4
 80037f6:	f000 fc4d 	bl	8004094 <I2C_TransferConfig>
 80037fa:	e06f      	b.n	80038dc <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003800:	b2da      	uxtb	r2, r3
 8003802:	697c      	ldr	r4, [r7, #20]
 8003804:	230a      	movs	r3, #10
 8003806:	18fb      	adds	r3, r7, r3
 8003808:	8819      	ldrh	r1, [r3, #0]
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	4b4a      	ldr	r3, [pc, #296]	; (8003938 <HAL_I2C_Master_Transmit+0x24c>)
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	0023      	movs	r3, r4
 8003812:	f000 fc3f 	bl	8004094 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003816:	e061      	b.n	80038dc <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	0018      	movs	r0, r3
 8003820:	f000 fa10 	bl	8003c44 <I2C_WaitOnTXISFlagUntilTimeout>
 8003824:	1e03      	subs	r3, r0, #0
 8003826:	d001      	beq.n	800382c <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e081      	b.n	8003930 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	781a      	ldrb	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383c:	1c5a      	adds	r2, r3, #1
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003846:	b29b      	uxth	r3, r3
 8003848:	3b01      	subs	r3, #1
 800384a:	b29a      	uxth	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003854:	3b01      	subs	r3, #1
 8003856:	b29a      	uxth	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003860:	b29b      	uxth	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d03a      	beq.n	80038dc <HAL_I2C_Master_Transmit+0x1f0>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800386a:	2b00      	cmp	r3, #0
 800386c:	d136      	bne.n	80038dc <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800386e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003870:	68f8      	ldr	r0, [r7, #12]
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	0013      	movs	r3, r2
 8003878:	2200      	movs	r2, #0
 800387a:	2180      	movs	r1, #128	; 0x80
 800387c:	f000 f98a 	bl	8003b94 <I2C_WaitOnFlagUntilTimeout>
 8003880:	1e03      	subs	r3, r0, #0
 8003882:	d001      	beq.n	8003888 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e053      	b.n	8003930 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388c:	b29b      	uxth	r3, r3
 800388e:	2bff      	cmp	r3, #255	; 0xff
 8003890:	d911      	bls.n	80038b6 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	22ff      	movs	r2, #255	; 0xff
 8003896:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800389c:	b2da      	uxtb	r2, r3
 800389e:	2380      	movs	r3, #128	; 0x80
 80038a0:	045c      	lsls	r4, r3, #17
 80038a2:	230a      	movs	r3, #10
 80038a4:	18fb      	adds	r3, r7, r3
 80038a6:	8819      	ldrh	r1, [r3, #0]
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	2300      	movs	r3, #0
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	0023      	movs	r3, r4
 80038b0:	f000 fbf0 	bl	8004094 <I2C_TransferConfig>
 80038b4:	e012      	b.n	80038dc <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c4:	b2da      	uxtb	r2, r3
 80038c6:	2380      	movs	r3, #128	; 0x80
 80038c8:	049c      	lsls	r4, r3, #18
 80038ca:	230a      	movs	r3, #10
 80038cc:	18fb      	adds	r3, r7, r3
 80038ce:	8819      	ldrh	r1, [r3, #0]
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	2300      	movs	r3, #0
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	0023      	movs	r3, r4
 80038d8:	f000 fbdc 	bl	8004094 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d198      	bne.n	8003818 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	0018      	movs	r0, r3
 80038ee:	f000 f9ef 	bl	8003cd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80038f2:	1e03      	subs	r3, r0, #0
 80038f4:	d001      	beq.n	80038fa <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e01a      	b.n	8003930 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2220      	movs	r2, #32
 8003900:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	490b      	ldr	r1, [pc, #44]	; (800393c <HAL_I2C_Master_Transmit+0x250>)
 800390e:	400a      	ands	r2, r1
 8003910:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2241      	movs	r2, #65	; 0x41
 8003916:	2120      	movs	r1, #32
 8003918:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2242      	movs	r2, #66	; 0x42
 800391e:	2100      	movs	r1, #0
 8003920:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2240      	movs	r2, #64	; 0x40
 8003926:	2100      	movs	r1, #0
 8003928:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800392a:	2300      	movs	r3, #0
 800392c:	e000      	b.n	8003930 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 800392e:	2302      	movs	r3, #2
  }
}
 8003930:	0018      	movs	r0, r3
 8003932:	46bd      	mov	sp, r7
 8003934:	b007      	add	sp, #28
 8003936:	bd90      	pop	{r4, r7, pc}
 8003938:	80002000 	.word	0x80002000
 800393c:	fe00e800 	.word	0xfe00e800

08003940 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003940:	b590      	push	{r4, r7, lr}
 8003942:	b089      	sub	sp, #36	; 0x24
 8003944:	af02      	add	r7, sp, #8
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	0008      	movs	r0, r1
 800394a:	607a      	str	r2, [r7, #4]
 800394c:	0019      	movs	r1, r3
 800394e:	230a      	movs	r3, #10
 8003950:	18fb      	adds	r3, r7, r3
 8003952:	1c02      	adds	r2, r0, #0
 8003954:	801a      	strh	r2, [r3, #0]
 8003956:	2308      	movs	r3, #8
 8003958:	18fb      	adds	r3, r7, r3
 800395a:	1c0a      	adds	r2, r1, #0
 800395c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2241      	movs	r2, #65	; 0x41
 8003962:	5c9b      	ldrb	r3, [r3, r2]
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b20      	cmp	r3, #32
 8003968:	d000      	beq.n	800396c <HAL_I2C_Master_Receive+0x2c>
 800396a:	e0e8      	b.n	8003b3e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2240      	movs	r2, #64	; 0x40
 8003970:	5c9b      	ldrb	r3, [r3, r2]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d101      	bne.n	800397a <HAL_I2C_Master_Receive+0x3a>
 8003976:	2302      	movs	r3, #2
 8003978:	e0e2      	b.n	8003b40 <HAL_I2C_Master_Receive+0x200>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2240      	movs	r2, #64	; 0x40
 800397e:	2101      	movs	r1, #1
 8003980:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003982:	f7ff fba9 	bl	80030d8 <HAL_GetTick>
 8003986:	0003      	movs	r3, r0
 8003988:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800398a:	2380      	movs	r3, #128	; 0x80
 800398c:	0219      	lsls	r1, r3, #8
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	9300      	str	r3, [sp, #0]
 8003994:	2319      	movs	r3, #25
 8003996:	2201      	movs	r2, #1
 8003998:	f000 f8fc 	bl	8003b94 <I2C_WaitOnFlagUntilTimeout>
 800399c:	1e03      	subs	r3, r0, #0
 800399e:	d001      	beq.n	80039a4 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e0cd      	b.n	8003b40 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2241      	movs	r2, #65	; 0x41
 80039a8:	2122      	movs	r1, #34	; 0x22
 80039aa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2242      	movs	r2, #66	; 0x42
 80039b0:	2110      	movs	r1, #16
 80039b2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2208      	movs	r2, #8
 80039c4:	18ba      	adds	r2, r7, r2
 80039c6:	8812      	ldrh	r2, [r2, #0]
 80039c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	2bff      	cmp	r3, #255	; 0xff
 80039d8:	d911      	bls.n	80039fe <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	22ff      	movs	r2, #255	; 0xff
 80039de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	2380      	movs	r3, #128	; 0x80
 80039e8:	045c      	lsls	r4, r3, #17
 80039ea:	230a      	movs	r3, #10
 80039ec:	18fb      	adds	r3, r7, r3
 80039ee:	8819      	ldrh	r1, [r3, #0]
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	4b55      	ldr	r3, [pc, #340]	; (8003b48 <HAL_I2C_Master_Receive+0x208>)
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	0023      	movs	r3, r4
 80039f8:	f000 fb4c 	bl	8004094 <I2C_TransferConfig>
 80039fc:	e076      	b.n	8003aec <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	2380      	movs	r3, #128	; 0x80
 8003a10:	049c      	lsls	r4, r3, #18
 8003a12:	230a      	movs	r3, #10
 8003a14:	18fb      	adds	r3, r7, r3
 8003a16:	8819      	ldrh	r1, [r3, #0]
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	4b4b      	ldr	r3, [pc, #300]	; (8003b48 <HAL_I2C_Master_Receive+0x208>)
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	0023      	movs	r3, r4
 8003a20:	f000 fb38 	bl	8004094 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003a24:	e062      	b.n	8003aec <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	f000 f993 	bl	8003d58 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a32:	1e03      	subs	r3, r0, #0
 8003a34:	d001      	beq.n	8003a3a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e082      	b.n	8003b40 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	b2d2      	uxtb	r2, r2
 8003a46:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4c:	1c5a      	adds	r2, r3, #1
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a56:	3b01      	subs	r3, #1
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	3b01      	subs	r3, #1
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d03a      	beq.n	8003aec <HAL_I2C_Master_Receive+0x1ac>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d136      	bne.n	8003aec <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	9300      	str	r3, [sp, #0]
 8003a86:	0013      	movs	r3, r2
 8003a88:	2200      	movs	r2, #0
 8003a8a:	2180      	movs	r1, #128	; 0x80
 8003a8c:	f000 f882 	bl	8003b94 <I2C_WaitOnFlagUntilTimeout>
 8003a90:	1e03      	subs	r3, r0, #0
 8003a92:	d001      	beq.n	8003a98 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e053      	b.n	8003b40 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	2bff      	cmp	r3, #255	; 0xff
 8003aa0:	d911      	bls.n	8003ac6 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	22ff      	movs	r2, #255	; 0xff
 8003aa6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aac:	b2da      	uxtb	r2, r3
 8003aae:	2380      	movs	r3, #128	; 0x80
 8003ab0:	045c      	lsls	r4, r3, #17
 8003ab2:	230a      	movs	r3, #10
 8003ab4:	18fb      	adds	r3, r7, r3
 8003ab6:	8819      	ldrh	r1, [r3, #0]
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	2300      	movs	r3, #0
 8003abc:	9300      	str	r3, [sp, #0]
 8003abe:	0023      	movs	r3, r4
 8003ac0:	f000 fae8 	bl	8004094 <I2C_TransferConfig>
 8003ac4:	e012      	b.n	8003aec <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad4:	b2da      	uxtb	r2, r3
 8003ad6:	2380      	movs	r3, #128	; 0x80
 8003ad8:	049c      	lsls	r4, r3, #18
 8003ada:	230a      	movs	r3, #10
 8003adc:	18fb      	adds	r3, r7, r3
 8003ade:	8819      	ldrh	r1, [r3, #0]
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	9300      	str	r3, [sp, #0]
 8003ae6:	0023      	movs	r3, r4
 8003ae8:	f000 fad4 	bl	8004094 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d197      	bne.n	8003a26 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	0018      	movs	r0, r3
 8003afe:	f000 f8e7 	bl	8003cd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b02:	1e03      	subs	r3, r0, #0
 8003b04:	d001      	beq.n	8003b0a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e01a      	b.n	8003b40 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	490b      	ldr	r1, [pc, #44]	; (8003b4c <HAL_I2C_Master_Receive+0x20c>)
 8003b1e:	400a      	ands	r2, r1
 8003b20:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2241      	movs	r2, #65	; 0x41
 8003b26:	2120      	movs	r1, #32
 8003b28:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2242      	movs	r2, #66	; 0x42
 8003b2e:	2100      	movs	r1, #0
 8003b30:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2240      	movs	r2, #64	; 0x40
 8003b36:	2100      	movs	r1, #0
 8003b38:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	e000      	b.n	8003b40 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8003b3e:	2302      	movs	r3, #2
  }
}
 8003b40:	0018      	movs	r0, r3
 8003b42:	46bd      	mov	sp, r7
 8003b44:	b007      	add	sp, #28
 8003b46:	bd90      	pop	{r4, r7, pc}
 8003b48:	80002400 	.word	0x80002400
 8003b4c:	fe00e800 	.word	0xfe00e800

08003b50 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	2202      	movs	r2, #2
 8003b60:	4013      	ands	r3, r2
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d103      	bne.n	8003b6e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	2201      	movs	r2, #1
 8003b76:	4013      	ands	r3, r2
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d007      	beq.n	8003b8c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	699a      	ldr	r2, [r3, #24]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2101      	movs	r1, #1
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	619a      	str	r2, [r3, #24]
  }
}
 8003b8c:	46c0      	nop			; (mov r8, r8)
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	b002      	add	sp, #8
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	603b      	str	r3, [r7, #0]
 8003ba0:	1dfb      	adds	r3, r7, #7
 8003ba2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ba4:	e03a      	b.n	8003c1c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	6839      	ldr	r1, [r7, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	0018      	movs	r0, r3
 8003bae:	f000 f971 	bl	8003e94 <I2C_IsErrorOccurred>
 8003bb2:	1e03      	subs	r3, r0, #0
 8003bb4:	d001      	beq.n	8003bba <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e040      	b.n	8003c3c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	d02d      	beq.n	8003c1c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bc0:	f7ff fa8a 	bl	80030d8 <HAL_GetTick>
 8003bc4:	0002      	movs	r2, r0
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d302      	bcc.n	8003bd6 <I2C_WaitOnFlagUntilTimeout+0x42>
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d122      	bne.n	8003c1c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	4013      	ands	r3, r2
 8003be0:	68ba      	ldr	r2, [r7, #8]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	425a      	negs	r2, r3
 8003be6:	4153      	adcs	r3, r2
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	001a      	movs	r2, r3
 8003bec:	1dfb      	adds	r3, r7, #7
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d113      	bne.n	8003c1c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2241      	movs	r2, #65	; 0x41
 8003c04:	2120      	movs	r1, #32
 8003c06:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2242      	movs	r2, #66	; 0x42
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2240      	movs	r2, #64	; 0x40
 8003c14:	2100      	movs	r1, #0
 8003c16:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e00f      	b.n	8003c3c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	4013      	ands	r3, r2
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	425a      	negs	r2, r3
 8003c2c:	4153      	adcs	r3, r2
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	001a      	movs	r2, r3
 8003c32:	1dfb      	adds	r3, r7, #7
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d0b5      	beq.n	8003ba6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	0018      	movs	r0, r3
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	b004      	add	sp, #16
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c50:	e032      	b.n	8003cb8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	68b9      	ldr	r1, [r7, #8]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	0018      	movs	r0, r3
 8003c5a:	f000 f91b 	bl	8003e94 <I2C_IsErrorOccurred>
 8003c5e:	1e03      	subs	r3, r0, #0
 8003c60:	d001      	beq.n	8003c66 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e030      	b.n	8003cc8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	d025      	beq.n	8003cb8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c6c:	f7ff fa34 	bl	80030d8 <HAL_GetTick>
 8003c70:	0002      	movs	r2, r0
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d302      	bcc.n	8003c82 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d11a      	bne.n	8003cb8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	2202      	movs	r2, #2
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d013      	beq.n	8003cb8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c94:	2220      	movs	r2, #32
 8003c96:	431a      	orrs	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2241      	movs	r2, #65	; 0x41
 8003ca0:	2120      	movs	r1, #32
 8003ca2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2242      	movs	r2, #66	; 0x42
 8003ca8:	2100      	movs	r1, #0
 8003caa:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2240      	movs	r2, #64	; 0x40
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e007      	b.n	8003cc8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d1c5      	bne.n	8003c52 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	0018      	movs	r0, r3
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	b004      	add	sp, #16
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cdc:	e02f      	b.n	8003d3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	68b9      	ldr	r1, [r7, #8]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	0018      	movs	r0, r3
 8003ce6:	f000 f8d5 	bl	8003e94 <I2C_IsErrorOccurred>
 8003cea:	1e03      	subs	r3, r0, #0
 8003cec:	d001      	beq.n	8003cf2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e02d      	b.n	8003d4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cf2:	f7ff f9f1 	bl	80030d8 <HAL_GetTick>
 8003cf6:	0002      	movs	r2, r0
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d302      	bcc.n	8003d08 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d11a      	bne.n	8003d3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	4013      	ands	r3, r2
 8003d12:	2b20      	cmp	r3, #32
 8003d14:	d013      	beq.n	8003d3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	431a      	orrs	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2241      	movs	r2, #65	; 0x41
 8003d26:	2120      	movs	r1, #32
 8003d28:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2242      	movs	r2, #66	; 0x42
 8003d2e:	2100      	movs	r1, #0
 8003d30:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2240      	movs	r2, #64	; 0x40
 8003d36:	2100      	movs	r1, #0
 8003d38:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e007      	b.n	8003d4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	2220      	movs	r2, #32
 8003d46:	4013      	ands	r3, r2
 8003d48:	2b20      	cmp	r3, #32
 8003d4a:	d1c8      	bne.n	8003cde <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	0018      	movs	r0, r3
 8003d50:	46bd      	mov	sp, r7
 8003d52:	b004      	add	sp, #16
 8003d54:	bd80      	pop	{r7, pc}
	...

08003d58 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d64:	2317      	movs	r3, #23
 8003d66:	18fb      	adds	r3, r7, r3
 8003d68:	2200      	movs	r2, #0
 8003d6a:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003d6c:	e07b      	b.n	8003e66 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	68b9      	ldr	r1, [r7, #8]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	0018      	movs	r0, r3
 8003d76:	f000 f88d 	bl	8003e94 <I2C_IsErrorOccurred>
 8003d7a:	1e03      	subs	r3, r0, #0
 8003d7c:	d003      	beq.n	8003d86 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8003d7e:	2317      	movs	r3, #23
 8003d80:	18fb      	adds	r3, r7, r3
 8003d82:	2201      	movs	r2, #1
 8003d84:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	4013      	ands	r3, r2
 8003d90:	2b20      	cmp	r3, #32
 8003d92:	d140      	bne.n	8003e16 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8003d94:	2117      	movs	r1, #23
 8003d96:	187b      	adds	r3, r7, r1
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d13b      	bne.n	8003e16 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	2204      	movs	r2, #4
 8003da6:	4013      	ands	r3, r2
 8003da8:	2b04      	cmp	r3, #4
 8003daa:	d106      	bne.n	8003dba <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d002      	beq.n	8003dba <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003db4:	187b      	adds	r3, r7, r1
 8003db6:	2200      	movs	r2, #0
 8003db8:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	2210      	movs	r2, #16
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	2b10      	cmp	r3, #16
 8003dc6:	d123      	bne.n	8003e10 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2210      	movs	r2, #16
 8003dce:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2204      	movs	r2, #4
 8003dd4:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2220      	movs	r2, #32
 8003ddc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4929      	ldr	r1, [pc, #164]	; (8003e90 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8003dea:	400a      	ands	r2, r1
 8003dec:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2241      	movs	r2, #65	; 0x41
 8003df2:	2120      	movs	r1, #32
 8003df4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2242      	movs	r2, #66	; 0x42
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2240      	movs	r2, #64	; 0x40
 8003e02:	2100      	movs	r1, #0
 8003e04:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8003e06:	2317      	movs	r3, #23
 8003e08:	18fb      	adds	r3, r7, r3
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	701a      	strb	r2, [r3, #0]
 8003e0e:	e002      	b.n	8003e16 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003e16:	f7ff f95f 	bl	80030d8 <HAL_GetTick>
 8003e1a:	0002      	movs	r2, r0
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d302      	bcc.n	8003e2c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d11c      	bne.n	8003e66 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8003e2c:	2017      	movs	r0, #23
 8003e2e:	183b      	adds	r3, r7, r0
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d117      	bne.n	8003e66 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	2204      	movs	r2, #4
 8003e3e:	4013      	ands	r3, r2
 8003e40:	2b04      	cmp	r3, #4
 8003e42:	d010      	beq.n	8003e66 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e48:	2220      	movs	r2, #32
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2241      	movs	r2, #65	; 0x41
 8003e54:	2120      	movs	r1, #32
 8003e56:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2240      	movs	r2, #64	; 0x40
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8003e60:	183b      	adds	r3, r7, r0
 8003e62:	2201      	movs	r2, #1
 8003e64:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	2204      	movs	r2, #4
 8003e6e:	4013      	ands	r3, r2
 8003e70:	2b04      	cmp	r3, #4
 8003e72:	d005      	beq.n	8003e80 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8003e74:	2317      	movs	r3, #23
 8003e76:	18fb      	adds	r3, r7, r3
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d100      	bne.n	8003e80 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8003e7e:	e776      	b.n	8003d6e <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8003e80:	2317      	movs	r3, #23
 8003e82:	18fb      	adds	r3, r7, r3
 8003e84:	781b      	ldrb	r3, [r3, #0]
}
 8003e86:	0018      	movs	r0, r3
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	b006      	add	sp, #24
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	46c0      	nop			; (mov r8, r8)
 8003e90:	fe00e800 	.word	0xfe00e800

08003e94 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e94:	b590      	push	{r4, r7, lr}
 8003e96:	b08b      	sub	sp, #44	; 0x2c
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ea0:	2327      	movs	r3, #39	; 0x27
 8003ea2:	18fb      	adds	r3, r7, r3
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	2210      	movs	r2, #16
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	d100      	bne.n	8003ec2 <I2C_IsErrorOccurred+0x2e>
 8003ec0:	e082      	b.n	8003fc8 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2210      	movs	r2, #16
 8003ec8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003eca:	e060      	b.n	8003f8e <I2C_IsErrorOccurred+0xfa>
 8003ecc:	2427      	movs	r4, #39	; 0x27
 8003ece:	193b      	adds	r3, r7, r4
 8003ed0:	193a      	adds	r2, r7, r4
 8003ed2:	7812      	ldrb	r2, [r2, #0]
 8003ed4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	3301      	adds	r3, #1
 8003eda:	d058      	beq.n	8003f8e <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003edc:	f7ff f8fc 	bl	80030d8 <HAL_GetTick>
 8003ee0:	0002      	movs	r2, r0
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d306      	bcc.n	8003efa <I2C_IsErrorOccurred+0x66>
 8003eec:	193b      	adds	r3, r7, r4
 8003eee:	193a      	adds	r2, r7, r4
 8003ef0:	7812      	ldrb	r2, [r2, #0]
 8003ef2:	701a      	strb	r2, [r3, #0]
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d149      	bne.n	8003f8e <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	685a      	ldr	r2, [r3, #4]
 8003f00:	2380      	movs	r3, #128	; 0x80
 8003f02:	01db      	lsls	r3, r3, #7
 8003f04:	4013      	ands	r3, r2
 8003f06:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003f08:	2013      	movs	r0, #19
 8003f0a:	183b      	adds	r3, r7, r0
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	2142      	movs	r1, #66	; 0x42
 8003f10:	5c52      	ldrb	r2, [r2, r1]
 8003f12:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	699a      	ldr	r2, [r3, #24]
 8003f1a:	2380      	movs	r3, #128	; 0x80
 8003f1c:	021b      	lsls	r3, r3, #8
 8003f1e:	401a      	ands	r2, r3
 8003f20:	2380      	movs	r3, #128	; 0x80
 8003f22:	021b      	lsls	r3, r3, #8
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d126      	bne.n	8003f76 <I2C_IsErrorOccurred+0xe2>
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	2380      	movs	r3, #128	; 0x80
 8003f2c:	01db      	lsls	r3, r3, #7
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d021      	beq.n	8003f76 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8003f32:	183b      	adds	r3, r7, r0
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	2b20      	cmp	r3, #32
 8003f38:	d01d      	beq.n	8003f76 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2180      	movs	r1, #128	; 0x80
 8003f46:	01c9      	lsls	r1, r1, #7
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003f4c:	f7ff f8c4 	bl	80030d8 <HAL_GetTick>
 8003f50:	0003      	movs	r3, r0
 8003f52:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f54:	e00f      	b.n	8003f76 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003f56:	f7ff f8bf 	bl	80030d8 <HAL_GetTick>
 8003f5a:	0002      	movs	r2, r0
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b19      	cmp	r3, #25
 8003f62:	d908      	bls.n	8003f76 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003f64:	6a3b      	ldr	r3, [r7, #32]
 8003f66:	2220      	movs	r2, #32
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003f6c:	2327      	movs	r3, #39	; 0x27
 8003f6e:	18fb      	adds	r3, r7, r3
 8003f70:	2201      	movs	r2, #1
 8003f72:	701a      	strb	r2, [r3, #0]

              break;
 8003f74:	e00b      	b.n	8003f8e <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	4013      	ands	r3, r2
 8003f80:	2127      	movs	r1, #39	; 0x27
 8003f82:	187a      	adds	r2, r7, r1
 8003f84:	1879      	adds	r1, r7, r1
 8003f86:	7809      	ldrb	r1, [r1, #0]
 8003f88:	7011      	strb	r1, [r2, #0]
 8003f8a:	2b20      	cmp	r3, #32
 8003f8c:	d1e3      	bne.n	8003f56 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	2220      	movs	r2, #32
 8003f96:	4013      	ands	r3, r2
 8003f98:	2b20      	cmp	r3, #32
 8003f9a:	d004      	beq.n	8003fa6 <I2C_IsErrorOccurred+0x112>
 8003f9c:	2327      	movs	r3, #39	; 0x27
 8003f9e:	18fb      	adds	r3, r7, r3
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d092      	beq.n	8003ecc <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003fa6:	2327      	movs	r3, #39	; 0x27
 8003fa8:	18fb      	adds	r3, r7, r3
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d103      	bne.n	8003fb8 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003fb8:	6a3b      	ldr	r3, [r7, #32]
 8003fba:	2204      	movs	r2, #4
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003fc0:	2327      	movs	r3, #39	; 0x27
 8003fc2:	18fb      	adds	r3, r7, r3
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	2380      	movs	r3, #128	; 0x80
 8003fd4:	005b      	lsls	r3, r3, #1
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	d00c      	beq.n	8003ff4 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003fda:	6a3b      	ldr	r3, [r7, #32]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2280      	movs	r2, #128	; 0x80
 8003fe8:	0052      	lsls	r2, r2, #1
 8003fea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003fec:	2327      	movs	r3, #39	; 0x27
 8003fee:	18fb      	adds	r3, r7, r3
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	2380      	movs	r3, #128	; 0x80
 8003ff8:	00db      	lsls	r3, r3, #3
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	d00c      	beq.n	8004018 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003ffe:	6a3b      	ldr	r3, [r7, #32]
 8004000:	2208      	movs	r2, #8
 8004002:	4313      	orrs	r3, r2
 8004004:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2280      	movs	r2, #128	; 0x80
 800400c:	00d2      	lsls	r2, r2, #3
 800400e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004010:	2327      	movs	r3, #39	; 0x27
 8004012:	18fb      	adds	r3, r7, r3
 8004014:	2201      	movs	r2, #1
 8004016:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	2380      	movs	r3, #128	; 0x80
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	4013      	ands	r3, r2
 8004020:	d00c      	beq.n	800403c <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004022:	6a3b      	ldr	r3, [r7, #32]
 8004024:	2202      	movs	r2, #2
 8004026:	4313      	orrs	r3, r2
 8004028:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2280      	movs	r2, #128	; 0x80
 8004030:	0092      	lsls	r2, r2, #2
 8004032:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004034:	2327      	movs	r3, #39	; 0x27
 8004036:	18fb      	adds	r3, r7, r3
 8004038:	2201      	movs	r2, #1
 800403a:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800403c:	2327      	movs	r3, #39	; 0x27
 800403e:	18fb      	adds	r3, r7, r3
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d01d      	beq.n	8004082 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	0018      	movs	r0, r3
 800404a:	f7ff fd81 	bl	8003b50 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	685a      	ldr	r2, [r3, #4]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	490d      	ldr	r1, [pc, #52]	; (8004090 <I2C_IsErrorOccurred+0x1fc>)
 800405a:	400a      	ands	r2, r1
 800405c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004062:	6a3b      	ldr	r3, [r7, #32]
 8004064:	431a      	orrs	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2241      	movs	r2, #65	; 0x41
 800406e:	2120      	movs	r1, #32
 8004070:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2242      	movs	r2, #66	; 0x42
 8004076:	2100      	movs	r1, #0
 8004078:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2240      	movs	r2, #64	; 0x40
 800407e:	2100      	movs	r1, #0
 8004080:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004082:	2327      	movs	r3, #39	; 0x27
 8004084:	18fb      	adds	r3, r7, r3
 8004086:	781b      	ldrb	r3, [r3, #0]
}
 8004088:	0018      	movs	r0, r3
 800408a:	46bd      	mov	sp, r7
 800408c:	b00b      	add	sp, #44	; 0x2c
 800408e:	bd90      	pop	{r4, r7, pc}
 8004090:	fe00e800 	.word	0xfe00e800

08004094 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004094:	b590      	push	{r4, r7, lr}
 8004096:	b087      	sub	sp, #28
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	0008      	movs	r0, r1
 800409e:	0011      	movs	r1, r2
 80040a0:	607b      	str	r3, [r7, #4]
 80040a2:	240a      	movs	r4, #10
 80040a4:	193b      	adds	r3, r7, r4
 80040a6:	1c02      	adds	r2, r0, #0
 80040a8:	801a      	strh	r2, [r3, #0]
 80040aa:	2009      	movs	r0, #9
 80040ac:	183b      	adds	r3, r7, r0
 80040ae:	1c0a      	adds	r2, r1, #0
 80040b0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040b2:	193b      	adds	r3, r7, r4
 80040b4:	881b      	ldrh	r3, [r3, #0]
 80040b6:	059b      	lsls	r3, r3, #22
 80040b8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80040ba:	183b      	adds	r3, r7, r0
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	0419      	lsls	r1, r3, #16
 80040c0:	23ff      	movs	r3, #255	; 0xff
 80040c2:	041b      	lsls	r3, r3, #16
 80040c4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040c6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ce:	4313      	orrs	r3, r2
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	085b      	lsrs	r3, r3, #1
 80040d4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040de:	0d51      	lsrs	r1, r2, #21
 80040e0:	2280      	movs	r2, #128	; 0x80
 80040e2:	00d2      	lsls	r2, r2, #3
 80040e4:	400a      	ands	r2, r1
 80040e6:	4907      	ldr	r1, [pc, #28]	; (8004104 <I2C_TransferConfig+0x70>)
 80040e8:	430a      	orrs	r2, r1
 80040ea:	43d2      	mvns	r2, r2
 80040ec:	401a      	ands	r2, r3
 80040ee:	0011      	movs	r1, r2
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80040fa:	46c0      	nop			; (mov r8, r8)
 80040fc:	46bd      	mov	sp, r7
 80040fe:	b007      	add	sp, #28
 8004100:	bd90      	pop	{r4, r7, pc}
 8004102:	46c0      	nop			; (mov r8, r8)
 8004104:	03ff63ff 	.word	0x03ff63ff

08004108 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2241      	movs	r2, #65	; 0x41
 8004116:	5c9b      	ldrb	r3, [r3, r2]
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b20      	cmp	r3, #32
 800411c:	d138      	bne.n	8004190 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2240      	movs	r2, #64	; 0x40
 8004122:	5c9b      	ldrb	r3, [r3, r2]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d101      	bne.n	800412c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004128:	2302      	movs	r3, #2
 800412a:	e032      	b.n	8004192 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2240      	movs	r2, #64	; 0x40
 8004130:	2101      	movs	r1, #1
 8004132:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2241      	movs	r2, #65	; 0x41
 8004138:	2124      	movs	r1, #36	; 0x24
 800413a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2101      	movs	r1, #1
 8004148:	438a      	bics	r2, r1
 800414a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4911      	ldr	r1, [pc, #68]	; (800419c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004158:	400a      	ands	r2, r1
 800415a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6819      	ldr	r1, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	430a      	orrs	r2, r1
 800416a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2101      	movs	r1, #1
 8004178:	430a      	orrs	r2, r1
 800417a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2241      	movs	r2, #65	; 0x41
 8004180:	2120      	movs	r1, #32
 8004182:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2240      	movs	r2, #64	; 0x40
 8004188:	2100      	movs	r1, #0
 800418a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800418c:	2300      	movs	r3, #0
 800418e:	e000      	b.n	8004192 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004190:	2302      	movs	r3, #2
  }
}
 8004192:	0018      	movs	r0, r3
 8004194:	46bd      	mov	sp, r7
 8004196:	b002      	add	sp, #8
 8004198:	bd80      	pop	{r7, pc}
 800419a:	46c0      	nop			; (mov r8, r8)
 800419c:	ffffefff 	.word	0xffffefff

080041a0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2241      	movs	r2, #65	; 0x41
 80041ae:	5c9b      	ldrb	r3, [r3, r2]
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b20      	cmp	r3, #32
 80041b4:	d139      	bne.n	800422a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2240      	movs	r2, #64	; 0x40
 80041ba:	5c9b      	ldrb	r3, [r3, r2]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d101      	bne.n	80041c4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80041c0:	2302      	movs	r3, #2
 80041c2:	e033      	b.n	800422c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2240      	movs	r2, #64	; 0x40
 80041c8:	2101      	movs	r1, #1
 80041ca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2241      	movs	r2, #65	; 0x41
 80041d0:	2124      	movs	r1, #36	; 0x24
 80041d2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2101      	movs	r1, #1
 80041e0:	438a      	bics	r2, r1
 80041e2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	4a11      	ldr	r2, [pc, #68]	; (8004234 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80041f0:	4013      	ands	r3, r2
 80041f2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	021b      	lsls	r3, r3, #8
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2101      	movs	r1, #1
 8004212:	430a      	orrs	r2, r1
 8004214:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2241      	movs	r2, #65	; 0x41
 800421a:	2120      	movs	r1, #32
 800421c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2240      	movs	r2, #64	; 0x40
 8004222:	2100      	movs	r1, #0
 8004224:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004226:	2300      	movs	r3, #0
 8004228:	e000      	b.n	800422c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800422a:	2302      	movs	r3, #2
  }
}
 800422c:	0018      	movs	r0, r3
 800422e:	46bd      	mov	sp, r7
 8004230:	b004      	add	sp, #16
 8004232:	bd80      	pop	{r7, pc}
 8004234:	fffff0ff 	.word	0xfffff0ff

08004238 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004240:	4b19      	ldr	r3, [pc, #100]	; (80042a8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a19      	ldr	r2, [pc, #100]	; (80042ac <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004246:	4013      	ands	r3, r2
 8004248:	0019      	movs	r1, r3
 800424a:	4b17      	ldr	r3, [pc, #92]	; (80042a8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	430a      	orrs	r2, r1
 8004250:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	2380      	movs	r3, #128	; 0x80
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	429a      	cmp	r2, r3
 800425a:	d11f      	bne.n	800429c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800425c:	4b14      	ldr	r3, [pc, #80]	; (80042b0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	0013      	movs	r3, r2
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	189b      	adds	r3, r3, r2
 8004266:	005b      	lsls	r3, r3, #1
 8004268:	4912      	ldr	r1, [pc, #72]	; (80042b4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800426a:	0018      	movs	r0, r3
 800426c:	f7fb ff4a 	bl	8000104 <__udivsi3>
 8004270:	0003      	movs	r3, r0
 8004272:	3301      	adds	r3, #1
 8004274:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004276:	e008      	b.n	800428a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	3b01      	subs	r3, #1
 8004282:	60fb      	str	r3, [r7, #12]
 8004284:	e001      	b.n	800428a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e009      	b.n	800429e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800428a:	4b07      	ldr	r3, [pc, #28]	; (80042a8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800428c:	695a      	ldr	r2, [r3, #20]
 800428e:	2380      	movs	r3, #128	; 0x80
 8004290:	00db      	lsls	r3, r3, #3
 8004292:	401a      	ands	r2, r3
 8004294:	2380      	movs	r3, #128	; 0x80
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	429a      	cmp	r2, r3
 800429a:	d0ed      	beq.n	8004278 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	0018      	movs	r0, r3
 80042a0:	46bd      	mov	sp, r7
 80042a2:	b004      	add	sp, #16
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	46c0      	nop			; (mov r8, r8)
 80042a8:	40007000 	.word	0x40007000
 80042ac:	fffff9ff 	.word	0xfffff9ff
 80042b0:	20000000 	.word	0x20000000
 80042b4:	000f4240 	.word	0x000f4240

080042b8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80042bc:	4b03      	ldr	r3, [pc, #12]	; (80042cc <LL_RCC_GetAPB1Prescaler+0x14>)
 80042be:	689a      	ldr	r2, [r3, #8]
 80042c0:	23e0      	movs	r3, #224	; 0xe0
 80042c2:	01db      	lsls	r3, r3, #7
 80042c4:	4013      	ands	r3, r2
}
 80042c6:	0018      	movs	r0, r3
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	40021000 	.word	0x40021000

080042d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b088      	sub	sp, #32
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e2fe      	b.n	80048e0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2201      	movs	r2, #1
 80042e8:	4013      	ands	r3, r2
 80042ea:	d100      	bne.n	80042ee <HAL_RCC_OscConfig+0x1e>
 80042ec:	e07c      	b.n	80043e8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042ee:	4bc3      	ldr	r3, [pc, #780]	; (80045fc <HAL_RCC_OscConfig+0x32c>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	2238      	movs	r2, #56	; 0x38
 80042f4:	4013      	ands	r3, r2
 80042f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042f8:	4bc0      	ldr	r3, [pc, #768]	; (80045fc <HAL_RCC_OscConfig+0x32c>)
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	2203      	movs	r2, #3
 80042fe:	4013      	ands	r3, r2
 8004300:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	2b10      	cmp	r3, #16
 8004306:	d102      	bne.n	800430e <HAL_RCC_OscConfig+0x3e>
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	2b03      	cmp	r3, #3
 800430c:	d002      	beq.n	8004314 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	2b08      	cmp	r3, #8
 8004312:	d10b      	bne.n	800432c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004314:	4bb9      	ldr	r3, [pc, #740]	; (80045fc <HAL_RCC_OscConfig+0x32c>)
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	2380      	movs	r3, #128	; 0x80
 800431a:	029b      	lsls	r3, r3, #10
 800431c:	4013      	ands	r3, r2
 800431e:	d062      	beq.n	80043e6 <HAL_RCC_OscConfig+0x116>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d15e      	bne.n	80043e6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e2d9      	b.n	80048e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	2380      	movs	r3, #128	; 0x80
 8004332:	025b      	lsls	r3, r3, #9
 8004334:	429a      	cmp	r2, r3
 8004336:	d107      	bne.n	8004348 <HAL_RCC_OscConfig+0x78>
 8004338:	4bb0      	ldr	r3, [pc, #704]	; (80045fc <HAL_RCC_OscConfig+0x32c>)
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	4baf      	ldr	r3, [pc, #700]	; (80045fc <HAL_RCC_OscConfig+0x32c>)
 800433e:	2180      	movs	r1, #128	; 0x80
 8004340:	0249      	lsls	r1, r1, #9
 8004342:	430a      	orrs	r2, r1
 8004344:	601a      	str	r2, [r3, #0]
 8004346:	e020      	b.n	800438a <HAL_RCC_OscConfig+0xba>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	23a0      	movs	r3, #160	; 0xa0
 800434e:	02db      	lsls	r3, r3, #11
 8004350:	429a      	cmp	r2, r3
 8004352:	d10e      	bne.n	8004372 <HAL_RCC_OscConfig+0xa2>
 8004354:	4ba9      	ldr	r3, [pc, #676]	; (80045fc <HAL_RCC_OscConfig+0x32c>)
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	4ba8      	ldr	r3, [pc, #672]	; (80045fc <HAL_RCC_OscConfig+0x32c>)
 800435a:	2180      	movs	r1, #128	; 0x80
 800435c:	02c9      	lsls	r1, r1, #11
 800435e:	430a      	orrs	r2, r1
 8004360:	601a      	str	r2, [r3, #0]
 8004362:	4ba6      	ldr	r3, [pc, #664]	; (80045fc <HAL_RCC_OscConfig+0x32c>)
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	4ba5      	ldr	r3, [pc, #660]	; (80045fc <HAL_RCC_OscConfig+0x32c>)
 8004368:	2180      	movs	r1, #128	; 0x80
 800436a:	0249      	lsls	r1, r1, #9
 800436c:	430a      	orrs	r2, r1
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	e00b      	b.n	800438a <HAL_RCC_OscConfig+0xba>
 8004372:	4ba2      	ldr	r3, [pc, #648]	; (80045fc <HAL_RCC_OscConfig+0x32c>)
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	4ba1      	ldr	r3, [pc, #644]	; (80045fc <HAL_RCC_OscConfig+0x32c>)
 8004378:	49a1      	ldr	r1, [pc, #644]	; (8004600 <HAL_RCC_OscConfig+0x330>)
 800437a:	400a      	ands	r2, r1
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	4b9f      	ldr	r3, [pc, #636]	; (80045fc <HAL_RCC_OscConfig+0x32c>)
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	4b9e      	ldr	r3, [pc, #632]	; (80045fc <HAL_RCC_OscConfig+0x32c>)
 8004384:	499f      	ldr	r1, [pc, #636]	; (8004604 <HAL_RCC_OscConfig+0x334>)
 8004386:	400a      	ands	r2, r1
 8004388:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d014      	beq.n	80043bc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004392:	f7fe fea1 	bl	80030d8 <HAL_GetTick>
 8004396:	0003      	movs	r3, r0
 8004398:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800439a:	e008      	b.n	80043ae <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800439c:	f7fe fe9c 	bl	80030d8 <HAL_GetTick>
 80043a0:	0002      	movs	r2, r0
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b64      	cmp	r3, #100	; 0x64
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e298      	b.n	80048e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043ae:	4b93      	ldr	r3, [pc, #588]	; (80045fc <HAL_RCC_OscConfig+0x32c>)
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	2380      	movs	r3, #128	; 0x80
 80043b4:	029b      	lsls	r3, r3, #10
 80043b6:	4013      	ands	r3, r2
 80043b8:	d0f0      	beq.n	800439c <HAL_RCC_OscConfig+0xcc>
 80043ba:	e015      	b.n	80043e8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043bc:	f7fe fe8c 	bl	80030d8 <HAL_GetTick>
 80043c0:	0003      	movs	r3, r0
 80043c2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043c4:	e008      	b.n	80043d8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043c6:	f7fe fe87 	bl	80030d8 <HAL_GetTick>
 80043ca:	0002      	movs	r2, r0
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b64      	cmp	r3, #100	; 0x64
 80043d2:	d901      	bls.n	80043d8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e283      	b.n	80048e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043d8:	4b88      	ldr	r3, [pc, #544]	; (80045fc <HAL_RCC_OscConfig+0x32c>)
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	2380      	movs	r3, #128	; 0x80
 80043de:	029b      	lsls	r3, r3, #10
 80043e0:	4013      	ands	r3, r2
 80043e2:	d1f0      	bne.n	80043c6 <HAL_RCC_OscConfig+0xf6>
 80043e4:	e000      	b.n	80043e8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043e6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2202      	movs	r2, #2
 80043ee:	4013      	ands	r3, r2
 80043f0:	d100      	bne.n	80043f4 <HAL_RCC_OscConfig+0x124>
 80043f2:	e099      	b.n	8004528 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043f4:	4b81      	ldr	r3, [pc, #516]	; (80045fc <HAL_RCC_OscConfig+0x32c>)
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	2238      	movs	r2, #56	; 0x38
 80043fa:	4013      	ands	r3, r2
 80043fc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043fe:	4b7f      	ldr	r3, [pc, #508]	; (80045fc <HAL_RCC_OscConfig+0x32c>)
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	2203      	movs	r2, #3
 8004404:	4013      	ands	r3, r2
 8004406:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	2b10      	cmp	r3, #16
 800440c:	d102      	bne.n	8004414 <HAL_RCC_OscConfig+0x144>
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	2b02      	cmp	r3, #2
 8004412:	d002      	beq.n	800441a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d135      	bne.n	8004486 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800441a:	4b78      	ldr	r3, [pc, #480]	; (80045fc <HAL_RCC_OscConfig+0x32c>)
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	2380      	movs	r3, #128	; 0x80
 8004420:	00db      	lsls	r3, r3, #3
 8004422:	4013      	ands	r3, r2
 8004424:	d005      	beq.n	8004432 <HAL_RCC_OscConfig+0x162>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e256      	b.n	80048e0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004432:	4b72      	ldr	r3, [pc, #456]	; (80045fc <HAL_RCC_OscConfig+0x32c>)
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	4a74      	ldr	r2, [pc, #464]	; (8004608 <HAL_RCC_OscConfig+0x338>)
 8004438:	4013      	ands	r3, r2
 800443a:	0019      	movs	r1, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	021a      	lsls	r2, r3, #8
 8004442:	4b6e      	ldr	r3, [pc, #440]	; (80045fc <HAL_RCC_OscConfig+0x32c>)
 8004444:	430a      	orrs	r2, r1
 8004446:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d112      	bne.n	8004474 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800444e:	4b6b      	ldr	r3, [pc, #428]	; (80045fc <HAL_RCC_OscConfig+0x32c>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a6e      	ldr	r2, [pc, #440]	; (800460c <HAL_RCC_OscConfig+0x33c>)
 8004454:	4013      	ands	r3, r2
 8004456:	0019      	movs	r1, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	691a      	ldr	r2, [r3, #16]
 800445c:	4b67      	ldr	r3, [pc, #412]	; (80045fc <HAL_RCC_OscConfig+0x32c>)
 800445e:	430a      	orrs	r2, r1
 8004460:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004462:	4b66      	ldr	r3, [pc, #408]	; (80045fc <HAL_RCC_OscConfig+0x32c>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	0adb      	lsrs	r3, r3, #11
 8004468:	2207      	movs	r2, #7
 800446a:	4013      	ands	r3, r2
 800446c:	4a68      	ldr	r2, [pc, #416]	; (8004610 <HAL_RCC_OscConfig+0x340>)
 800446e:	40da      	lsrs	r2, r3
 8004470:	4b68      	ldr	r3, [pc, #416]	; (8004614 <HAL_RCC_OscConfig+0x344>)
 8004472:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004474:	4b68      	ldr	r3, [pc, #416]	; (8004618 <HAL_RCC_OscConfig+0x348>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	0018      	movs	r0, r3
 800447a:	f7fe fdd1 	bl	8003020 <HAL_InitTick>
 800447e:	1e03      	subs	r3, r0, #0
 8004480:	d051      	beq.n	8004526 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e22c      	b.n	80048e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d030      	beq.n	80044f0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800448e:	4b5b      	ldr	r3, [pc, #364]	; (80045fc <HAL_RCC_OscConfig+0x32c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a5e      	ldr	r2, [pc, #376]	; (800460c <HAL_RCC_OscConfig+0x33c>)
 8004494:	4013      	ands	r3, r2
 8004496:	0019      	movs	r1, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	691a      	ldr	r2, [r3, #16]
 800449c:	4b57      	ldr	r3, [pc, #348]	; (80045fc <HAL_RCC_OscConfig+0x32c>)
 800449e:	430a      	orrs	r2, r1
 80044a0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80044a2:	4b56      	ldr	r3, [pc, #344]	; (80045fc <HAL_RCC_OscConfig+0x32c>)
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	4b55      	ldr	r3, [pc, #340]	; (80045fc <HAL_RCC_OscConfig+0x32c>)
 80044a8:	2180      	movs	r1, #128	; 0x80
 80044aa:	0049      	lsls	r1, r1, #1
 80044ac:	430a      	orrs	r2, r1
 80044ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b0:	f7fe fe12 	bl	80030d8 <HAL_GetTick>
 80044b4:	0003      	movs	r3, r0
 80044b6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044b8:	e008      	b.n	80044cc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044ba:	f7fe fe0d 	bl	80030d8 <HAL_GetTick>
 80044be:	0002      	movs	r2, r0
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d901      	bls.n	80044cc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e209      	b.n	80048e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044cc:	4b4b      	ldr	r3, [pc, #300]	; (80045fc <HAL_RCC_OscConfig+0x32c>)
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	2380      	movs	r3, #128	; 0x80
 80044d2:	00db      	lsls	r3, r3, #3
 80044d4:	4013      	ands	r3, r2
 80044d6:	d0f0      	beq.n	80044ba <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044d8:	4b48      	ldr	r3, [pc, #288]	; (80045fc <HAL_RCC_OscConfig+0x32c>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	4a4a      	ldr	r2, [pc, #296]	; (8004608 <HAL_RCC_OscConfig+0x338>)
 80044de:	4013      	ands	r3, r2
 80044e0:	0019      	movs	r1, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	021a      	lsls	r2, r3, #8
 80044e8:	4b44      	ldr	r3, [pc, #272]	; (80045fc <HAL_RCC_OscConfig+0x32c>)
 80044ea:	430a      	orrs	r2, r1
 80044ec:	605a      	str	r2, [r3, #4]
 80044ee:	e01b      	b.n	8004528 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80044f0:	4b42      	ldr	r3, [pc, #264]	; (80045fc <HAL_RCC_OscConfig+0x32c>)
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	4b41      	ldr	r3, [pc, #260]	; (80045fc <HAL_RCC_OscConfig+0x32c>)
 80044f6:	4949      	ldr	r1, [pc, #292]	; (800461c <HAL_RCC_OscConfig+0x34c>)
 80044f8:	400a      	ands	r2, r1
 80044fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fc:	f7fe fdec 	bl	80030d8 <HAL_GetTick>
 8004500:	0003      	movs	r3, r0
 8004502:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004504:	e008      	b.n	8004518 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004506:	f7fe fde7 	bl	80030d8 <HAL_GetTick>
 800450a:	0002      	movs	r2, r0
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e1e3      	b.n	80048e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004518:	4b38      	ldr	r3, [pc, #224]	; (80045fc <HAL_RCC_OscConfig+0x32c>)
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	2380      	movs	r3, #128	; 0x80
 800451e:	00db      	lsls	r3, r3, #3
 8004520:	4013      	ands	r3, r2
 8004522:	d1f0      	bne.n	8004506 <HAL_RCC_OscConfig+0x236>
 8004524:	e000      	b.n	8004528 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004526:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2208      	movs	r2, #8
 800452e:	4013      	ands	r3, r2
 8004530:	d047      	beq.n	80045c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004532:	4b32      	ldr	r3, [pc, #200]	; (80045fc <HAL_RCC_OscConfig+0x32c>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	2238      	movs	r2, #56	; 0x38
 8004538:	4013      	ands	r3, r2
 800453a:	2b18      	cmp	r3, #24
 800453c:	d10a      	bne.n	8004554 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800453e:	4b2f      	ldr	r3, [pc, #188]	; (80045fc <HAL_RCC_OscConfig+0x32c>)
 8004540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004542:	2202      	movs	r2, #2
 8004544:	4013      	ands	r3, r2
 8004546:	d03c      	beq.n	80045c2 <HAL_RCC_OscConfig+0x2f2>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d138      	bne.n	80045c2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e1c5      	b.n	80048e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d019      	beq.n	8004590 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800455c:	4b27      	ldr	r3, [pc, #156]	; (80045fc <HAL_RCC_OscConfig+0x32c>)
 800455e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004560:	4b26      	ldr	r3, [pc, #152]	; (80045fc <HAL_RCC_OscConfig+0x32c>)
 8004562:	2101      	movs	r1, #1
 8004564:	430a      	orrs	r2, r1
 8004566:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004568:	f7fe fdb6 	bl	80030d8 <HAL_GetTick>
 800456c:	0003      	movs	r3, r0
 800456e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004570:	e008      	b.n	8004584 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004572:	f7fe fdb1 	bl	80030d8 <HAL_GetTick>
 8004576:	0002      	movs	r2, r0
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d901      	bls.n	8004584 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e1ad      	b.n	80048e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004584:	4b1d      	ldr	r3, [pc, #116]	; (80045fc <HAL_RCC_OscConfig+0x32c>)
 8004586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004588:	2202      	movs	r2, #2
 800458a:	4013      	ands	r3, r2
 800458c:	d0f1      	beq.n	8004572 <HAL_RCC_OscConfig+0x2a2>
 800458e:	e018      	b.n	80045c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004590:	4b1a      	ldr	r3, [pc, #104]	; (80045fc <HAL_RCC_OscConfig+0x32c>)
 8004592:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004594:	4b19      	ldr	r3, [pc, #100]	; (80045fc <HAL_RCC_OscConfig+0x32c>)
 8004596:	2101      	movs	r1, #1
 8004598:	438a      	bics	r2, r1
 800459a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459c:	f7fe fd9c 	bl	80030d8 <HAL_GetTick>
 80045a0:	0003      	movs	r3, r0
 80045a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045a4:	e008      	b.n	80045b8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045a6:	f7fe fd97 	bl	80030d8 <HAL_GetTick>
 80045aa:	0002      	movs	r2, r0
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d901      	bls.n	80045b8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e193      	b.n	80048e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045b8:	4b10      	ldr	r3, [pc, #64]	; (80045fc <HAL_RCC_OscConfig+0x32c>)
 80045ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045bc:	2202      	movs	r2, #2
 80045be:	4013      	ands	r3, r2
 80045c0:	d1f1      	bne.n	80045a6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2204      	movs	r2, #4
 80045c8:	4013      	ands	r3, r2
 80045ca:	d100      	bne.n	80045ce <HAL_RCC_OscConfig+0x2fe>
 80045cc:	e0c6      	b.n	800475c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045ce:	231f      	movs	r3, #31
 80045d0:	18fb      	adds	r3, r7, r3
 80045d2:	2200      	movs	r2, #0
 80045d4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80045d6:	4b09      	ldr	r3, [pc, #36]	; (80045fc <HAL_RCC_OscConfig+0x32c>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	2238      	movs	r2, #56	; 0x38
 80045dc:	4013      	ands	r3, r2
 80045de:	2b20      	cmp	r3, #32
 80045e0:	d11e      	bne.n	8004620 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80045e2:	4b06      	ldr	r3, [pc, #24]	; (80045fc <HAL_RCC_OscConfig+0x32c>)
 80045e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e6:	2202      	movs	r2, #2
 80045e8:	4013      	ands	r3, r2
 80045ea:	d100      	bne.n	80045ee <HAL_RCC_OscConfig+0x31e>
 80045ec:	e0b6      	b.n	800475c <HAL_RCC_OscConfig+0x48c>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d000      	beq.n	80045f8 <HAL_RCC_OscConfig+0x328>
 80045f6:	e0b1      	b.n	800475c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e171      	b.n	80048e0 <HAL_RCC_OscConfig+0x610>
 80045fc:	40021000 	.word	0x40021000
 8004600:	fffeffff 	.word	0xfffeffff
 8004604:	fffbffff 	.word	0xfffbffff
 8004608:	ffff80ff 	.word	0xffff80ff
 800460c:	ffffc7ff 	.word	0xffffc7ff
 8004610:	00f42400 	.word	0x00f42400
 8004614:	20000000 	.word	0x20000000
 8004618:	20000004 	.word	0x20000004
 800461c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004620:	4bb1      	ldr	r3, [pc, #708]	; (80048e8 <HAL_RCC_OscConfig+0x618>)
 8004622:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004624:	2380      	movs	r3, #128	; 0x80
 8004626:	055b      	lsls	r3, r3, #21
 8004628:	4013      	ands	r3, r2
 800462a:	d101      	bne.n	8004630 <HAL_RCC_OscConfig+0x360>
 800462c:	2301      	movs	r3, #1
 800462e:	e000      	b.n	8004632 <HAL_RCC_OscConfig+0x362>
 8004630:	2300      	movs	r3, #0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d011      	beq.n	800465a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004636:	4bac      	ldr	r3, [pc, #688]	; (80048e8 <HAL_RCC_OscConfig+0x618>)
 8004638:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800463a:	4bab      	ldr	r3, [pc, #684]	; (80048e8 <HAL_RCC_OscConfig+0x618>)
 800463c:	2180      	movs	r1, #128	; 0x80
 800463e:	0549      	lsls	r1, r1, #21
 8004640:	430a      	orrs	r2, r1
 8004642:	63da      	str	r2, [r3, #60]	; 0x3c
 8004644:	4ba8      	ldr	r3, [pc, #672]	; (80048e8 <HAL_RCC_OscConfig+0x618>)
 8004646:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004648:	2380      	movs	r3, #128	; 0x80
 800464a:	055b      	lsls	r3, r3, #21
 800464c:	4013      	ands	r3, r2
 800464e:	60fb      	str	r3, [r7, #12]
 8004650:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004652:	231f      	movs	r3, #31
 8004654:	18fb      	adds	r3, r7, r3
 8004656:	2201      	movs	r2, #1
 8004658:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800465a:	4ba4      	ldr	r3, [pc, #656]	; (80048ec <HAL_RCC_OscConfig+0x61c>)
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	2380      	movs	r3, #128	; 0x80
 8004660:	005b      	lsls	r3, r3, #1
 8004662:	4013      	ands	r3, r2
 8004664:	d11a      	bne.n	800469c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004666:	4ba1      	ldr	r3, [pc, #644]	; (80048ec <HAL_RCC_OscConfig+0x61c>)
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	4ba0      	ldr	r3, [pc, #640]	; (80048ec <HAL_RCC_OscConfig+0x61c>)
 800466c:	2180      	movs	r1, #128	; 0x80
 800466e:	0049      	lsls	r1, r1, #1
 8004670:	430a      	orrs	r2, r1
 8004672:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004674:	f7fe fd30 	bl	80030d8 <HAL_GetTick>
 8004678:	0003      	movs	r3, r0
 800467a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800467c:	e008      	b.n	8004690 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800467e:	f7fe fd2b 	bl	80030d8 <HAL_GetTick>
 8004682:	0002      	movs	r2, r0
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d901      	bls.n	8004690 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e127      	b.n	80048e0 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004690:	4b96      	ldr	r3, [pc, #600]	; (80048ec <HAL_RCC_OscConfig+0x61c>)
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	2380      	movs	r3, #128	; 0x80
 8004696:	005b      	lsls	r3, r3, #1
 8004698:	4013      	ands	r3, r2
 800469a:	d0f0      	beq.n	800467e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d106      	bne.n	80046b2 <HAL_RCC_OscConfig+0x3e2>
 80046a4:	4b90      	ldr	r3, [pc, #576]	; (80048e8 <HAL_RCC_OscConfig+0x618>)
 80046a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80046a8:	4b8f      	ldr	r3, [pc, #572]	; (80048e8 <HAL_RCC_OscConfig+0x618>)
 80046aa:	2101      	movs	r1, #1
 80046ac:	430a      	orrs	r2, r1
 80046ae:	65da      	str	r2, [r3, #92]	; 0x5c
 80046b0:	e01c      	b.n	80046ec <HAL_RCC_OscConfig+0x41c>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	2b05      	cmp	r3, #5
 80046b8:	d10c      	bne.n	80046d4 <HAL_RCC_OscConfig+0x404>
 80046ba:	4b8b      	ldr	r3, [pc, #556]	; (80048e8 <HAL_RCC_OscConfig+0x618>)
 80046bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80046be:	4b8a      	ldr	r3, [pc, #552]	; (80048e8 <HAL_RCC_OscConfig+0x618>)
 80046c0:	2104      	movs	r1, #4
 80046c2:	430a      	orrs	r2, r1
 80046c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80046c6:	4b88      	ldr	r3, [pc, #544]	; (80048e8 <HAL_RCC_OscConfig+0x618>)
 80046c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80046ca:	4b87      	ldr	r3, [pc, #540]	; (80048e8 <HAL_RCC_OscConfig+0x618>)
 80046cc:	2101      	movs	r1, #1
 80046ce:	430a      	orrs	r2, r1
 80046d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80046d2:	e00b      	b.n	80046ec <HAL_RCC_OscConfig+0x41c>
 80046d4:	4b84      	ldr	r3, [pc, #528]	; (80048e8 <HAL_RCC_OscConfig+0x618>)
 80046d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80046d8:	4b83      	ldr	r3, [pc, #524]	; (80048e8 <HAL_RCC_OscConfig+0x618>)
 80046da:	2101      	movs	r1, #1
 80046dc:	438a      	bics	r2, r1
 80046de:	65da      	str	r2, [r3, #92]	; 0x5c
 80046e0:	4b81      	ldr	r3, [pc, #516]	; (80048e8 <HAL_RCC_OscConfig+0x618>)
 80046e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80046e4:	4b80      	ldr	r3, [pc, #512]	; (80048e8 <HAL_RCC_OscConfig+0x618>)
 80046e6:	2104      	movs	r1, #4
 80046e8:	438a      	bics	r2, r1
 80046ea:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d014      	beq.n	800471e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f4:	f7fe fcf0 	bl	80030d8 <HAL_GetTick>
 80046f8:	0003      	movs	r3, r0
 80046fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046fc:	e009      	b.n	8004712 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046fe:	f7fe fceb 	bl	80030d8 <HAL_GetTick>
 8004702:	0002      	movs	r2, r0
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	4a79      	ldr	r2, [pc, #484]	; (80048f0 <HAL_RCC_OscConfig+0x620>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e0e6      	b.n	80048e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004712:	4b75      	ldr	r3, [pc, #468]	; (80048e8 <HAL_RCC_OscConfig+0x618>)
 8004714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004716:	2202      	movs	r2, #2
 8004718:	4013      	ands	r3, r2
 800471a:	d0f0      	beq.n	80046fe <HAL_RCC_OscConfig+0x42e>
 800471c:	e013      	b.n	8004746 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800471e:	f7fe fcdb 	bl	80030d8 <HAL_GetTick>
 8004722:	0003      	movs	r3, r0
 8004724:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004726:	e009      	b.n	800473c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004728:	f7fe fcd6 	bl	80030d8 <HAL_GetTick>
 800472c:	0002      	movs	r2, r0
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	4a6f      	ldr	r2, [pc, #444]	; (80048f0 <HAL_RCC_OscConfig+0x620>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d901      	bls.n	800473c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e0d1      	b.n	80048e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800473c:	4b6a      	ldr	r3, [pc, #424]	; (80048e8 <HAL_RCC_OscConfig+0x618>)
 800473e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004740:	2202      	movs	r2, #2
 8004742:	4013      	ands	r3, r2
 8004744:	d1f0      	bne.n	8004728 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004746:	231f      	movs	r3, #31
 8004748:	18fb      	adds	r3, r7, r3
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d105      	bne.n	800475c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004750:	4b65      	ldr	r3, [pc, #404]	; (80048e8 <HAL_RCC_OscConfig+0x618>)
 8004752:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004754:	4b64      	ldr	r3, [pc, #400]	; (80048e8 <HAL_RCC_OscConfig+0x618>)
 8004756:	4967      	ldr	r1, [pc, #412]	; (80048f4 <HAL_RCC_OscConfig+0x624>)
 8004758:	400a      	ands	r2, r1
 800475a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	69db      	ldr	r3, [r3, #28]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d100      	bne.n	8004766 <HAL_RCC_OscConfig+0x496>
 8004764:	e0bb      	b.n	80048de <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004766:	4b60      	ldr	r3, [pc, #384]	; (80048e8 <HAL_RCC_OscConfig+0x618>)
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	2238      	movs	r2, #56	; 0x38
 800476c:	4013      	ands	r3, r2
 800476e:	2b10      	cmp	r3, #16
 8004770:	d100      	bne.n	8004774 <HAL_RCC_OscConfig+0x4a4>
 8004772:	e07b      	b.n	800486c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	69db      	ldr	r3, [r3, #28]
 8004778:	2b02      	cmp	r3, #2
 800477a:	d156      	bne.n	800482a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800477c:	4b5a      	ldr	r3, [pc, #360]	; (80048e8 <HAL_RCC_OscConfig+0x618>)
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	4b59      	ldr	r3, [pc, #356]	; (80048e8 <HAL_RCC_OscConfig+0x618>)
 8004782:	495d      	ldr	r1, [pc, #372]	; (80048f8 <HAL_RCC_OscConfig+0x628>)
 8004784:	400a      	ands	r2, r1
 8004786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004788:	f7fe fca6 	bl	80030d8 <HAL_GetTick>
 800478c:	0003      	movs	r3, r0
 800478e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004790:	e008      	b.n	80047a4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004792:	f7fe fca1 	bl	80030d8 <HAL_GetTick>
 8004796:	0002      	movs	r2, r0
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e09d      	b.n	80048e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047a4:	4b50      	ldr	r3, [pc, #320]	; (80048e8 <HAL_RCC_OscConfig+0x618>)
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	2380      	movs	r3, #128	; 0x80
 80047aa:	049b      	lsls	r3, r3, #18
 80047ac:	4013      	ands	r3, r2
 80047ae:	d1f0      	bne.n	8004792 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047b0:	4b4d      	ldr	r3, [pc, #308]	; (80048e8 <HAL_RCC_OscConfig+0x618>)
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	4a51      	ldr	r2, [pc, #324]	; (80048fc <HAL_RCC_OscConfig+0x62c>)
 80047b6:	4013      	ands	r3, r2
 80047b8:	0019      	movs	r1, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a1a      	ldr	r2, [r3, #32]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c2:	431a      	orrs	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c8:	021b      	lsls	r3, r3, #8
 80047ca:	431a      	orrs	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d0:	431a      	orrs	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d6:	431a      	orrs	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047dc:	431a      	orrs	r2, r3
 80047de:	4b42      	ldr	r3, [pc, #264]	; (80048e8 <HAL_RCC_OscConfig+0x618>)
 80047e0:	430a      	orrs	r2, r1
 80047e2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047e4:	4b40      	ldr	r3, [pc, #256]	; (80048e8 <HAL_RCC_OscConfig+0x618>)
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	4b3f      	ldr	r3, [pc, #252]	; (80048e8 <HAL_RCC_OscConfig+0x618>)
 80047ea:	2180      	movs	r1, #128	; 0x80
 80047ec:	0449      	lsls	r1, r1, #17
 80047ee:	430a      	orrs	r2, r1
 80047f0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80047f2:	4b3d      	ldr	r3, [pc, #244]	; (80048e8 <HAL_RCC_OscConfig+0x618>)
 80047f4:	68da      	ldr	r2, [r3, #12]
 80047f6:	4b3c      	ldr	r3, [pc, #240]	; (80048e8 <HAL_RCC_OscConfig+0x618>)
 80047f8:	2180      	movs	r1, #128	; 0x80
 80047fa:	0549      	lsls	r1, r1, #21
 80047fc:	430a      	orrs	r2, r1
 80047fe:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004800:	f7fe fc6a 	bl	80030d8 <HAL_GetTick>
 8004804:	0003      	movs	r3, r0
 8004806:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004808:	e008      	b.n	800481c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800480a:	f7fe fc65 	bl	80030d8 <HAL_GetTick>
 800480e:	0002      	movs	r2, r0
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	2b02      	cmp	r3, #2
 8004816:	d901      	bls.n	800481c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e061      	b.n	80048e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800481c:	4b32      	ldr	r3, [pc, #200]	; (80048e8 <HAL_RCC_OscConfig+0x618>)
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	2380      	movs	r3, #128	; 0x80
 8004822:	049b      	lsls	r3, r3, #18
 8004824:	4013      	ands	r3, r2
 8004826:	d0f0      	beq.n	800480a <HAL_RCC_OscConfig+0x53a>
 8004828:	e059      	b.n	80048de <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800482a:	4b2f      	ldr	r3, [pc, #188]	; (80048e8 <HAL_RCC_OscConfig+0x618>)
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	4b2e      	ldr	r3, [pc, #184]	; (80048e8 <HAL_RCC_OscConfig+0x618>)
 8004830:	4931      	ldr	r1, [pc, #196]	; (80048f8 <HAL_RCC_OscConfig+0x628>)
 8004832:	400a      	ands	r2, r1
 8004834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004836:	f7fe fc4f 	bl	80030d8 <HAL_GetTick>
 800483a:	0003      	movs	r3, r0
 800483c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800483e:	e008      	b.n	8004852 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004840:	f7fe fc4a 	bl	80030d8 <HAL_GetTick>
 8004844:	0002      	movs	r2, r0
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b02      	cmp	r3, #2
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e046      	b.n	80048e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004852:	4b25      	ldr	r3, [pc, #148]	; (80048e8 <HAL_RCC_OscConfig+0x618>)
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	2380      	movs	r3, #128	; 0x80
 8004858:	049b      	lsls	r3, r3, #18
 800485a:	4013      	ands	r3, r2
 800485c:	d1f0      	bne.n	8004840 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800485e:	4b22      	ldr	r3, [pc, #136]	; (80048e8 <HAL_RCC_OscConfig+0x618>)
 8004860:	68da      	ldr	r2, [r3, #12]
 8004862:	4b21      	ldr	r3, [pc, #132]	; (80048e8 <HAL_RCC_OscConfig+0x618>)
 8004864:	4926      	ldr	r1, [pc, #152]	; (8004900 <HAL_RCC_OscConfig+0x630>)
 8004866:	400a      	ands	r2, r1
 8004868:	60da      	str	r2, [r3, #12]
 800486a:	e038      	b.n	80048de <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	69db      	ldr	r3, [r3, #28]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d101      	bne.n	8004878 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e033      	b.n	80048e0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004878:	4b1b      	ldr	r3, [pc, #108]	; (80048e8 <HAL_RCC_OscConfig+0x618>)
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	2203      	movs	r2, #3
 8004882:	401a      	ands	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	429a      	cmp	r2, r3
 800488a:	d126      	bne.n	80048da <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	2270      	movs	r2, #112	; 0x70
 8004890:	401a      	ands	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004896:	429a      	cmp	r2, r3
 8004898:	d11f      	bne.n	80048da <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	23fe      	movs	r3, #254	; 0xfe
 800489e:	01db      	lsls	r3, r3, #7
 80048a0:	401a      	ands	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d116      	bne.n	80048da <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	23f8      	movs	r3, #248	; 0xf8
 80048b0:	039b      	lsls	r3, r3, #14
 80048b2:	401a      	ands	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d10e      	bne.n	80048da <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	23e0      	movs	r3, #224	; 0xe0
 80048c0:	051b      	lsls	r3, r3, #20
 80048c2:	401a      	ands	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d106      	bne.n	80048da <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	0f5b      	lsrs	r3, r3, #29
 80048d0:	075a      	lsls	r2, r3, #29
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d001      	beq.n	80048de <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e000      	b.n	80048e0 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	0018      	movs	r0, r3
 80048e2:	46bd      	mov	sp, r7
 80048e4:	b008      	add	sp, #32
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	40021000 	.word	0x40021000
 80048ec:	40007000 	.word	0x40007000
 80048f0:	00001388 	.word	0x00001388
 80048f4:	efffffff 	.word	0xefffffff
 80048f8:	feffffff 	.word	0xfeffffff
 80048fc:	11c1808c 	.word	0x11c1808c
 8004900:	eefefffc 	.word	0xeefefffc

08004904 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d101      	bne.n	8004918 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e0e9      	b.n	8004aec <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004918:	4b76      	ldr	r3, [pc, #472]	; (8004af4 <HAL_RCC_ClockConfig+0x1f0>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2207      	movs	r2, #7
 800491e:	4013      	ands	r3, r2
 8004920:	683a      	ldr	r2, [r7, #0]
 8004922:	429a      	cmp	r2, r3
 8004924:	d91e      	bls.n	8004964 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004926:	4b73      	ldr	r3, [pc, #460]	; (8004af4 <HAL_RCC_ClockConfig+0x1f0>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2207      	movs	r2, #7
 800492c:	4393      	bics	r3, r2
 800492e:	0019      	movs	r1, r3
 8004930:	4b70      	ldr	r3, [pc, #448]	; (8004af4 <HAL_RCC_ClockConfig+0x1f0>)
 8004932:	683a      	ldr	r2, [r7, #0]
 8004934:	430a      	orrs	r2, r1
 8004936:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004938:	f7fe fbce 	bl	80030d8 <HAL_GetTick>
 800493c:	0003      	movs	r3, r0
 800493e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004940:	e009      	b.n	8004956 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004942:	f7fe fbc9 	bl	80030d8 <HAL_GetTick>
 8004946:	0002      	movs	r2, r0
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	4a6a      	ldr	r2, [pc, #424]	; (8004af8 <HAL_RCC_ClockConfig+0x1f4>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d901      	bls.n	8004956 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e0ca      	b.n	8004aec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004956:	4b67      	ldr	r3, [pc, #412]	; (8004af4 <HAL_RCC_ClockConfig+0x1f0>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2207      	movs	r2, #7
 800495c:	4013      	ands	r3, r2
 800495e:	683a      	ldr	r2, [r7, #0]
 8004960:	429a      	cmp	r2, r3
 8004962:	d1ee      	bne.n	8004942 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2202      	movs	r2, #2
 800496a:	4013      	ands	r3, r2
 800496c:	d015      	beq.n	800499a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2204      	movs	r2, #4
 8004974:	4013      	ands	r3, r2
 8004976:	d006      	beq.n	8004986 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004978:	4b60      	ldr	r3, [pc, #384]	; (8004afc <HAL_RCC_ClockConfig+0x1f8>)
 800497a:	689a      	ldr	r2, [r3, #8]
 800497c:	4b5f      	ldr	r3, [pc, #380]	; (8004afc <HAL_RCC_ClockConfig+0x1f8>)
 800497e:	21e0      	movs	r1, #224	; 0xe0
 8004980:	01c9      	lsls	r1, r1, #7
 8004982:	430a      	orrs	r2, r1
 8004984:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004986:	4b5d      	ldr	r3, [pc, #372]	; (8004afc <HAL_RCC_ClockConfig+0x1f8>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	4a5d      	ldr	r2, [pc, #372]	; (8004b00 <HAL_RCC_ClockConfig+0x1fc>)
 800498c:	4013      	ands	r3, r2
 800498e:	0019      	movs	r1, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689a      	ldr	r2, [r3, #8]
 8004994:	4b59      	ldr	r3, [pc, #356]	; (8004afc <HAL_RCC_ClockConfig+0x1f8>)
 8004996:	430a      	orrs	r2, r1
 8004998:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2201      	movs	r2, #1
 80049a0:	4013      	ands	r3, r2
 80049a2:	d057      	beq.n	8004a54 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d107      	bne.n	80049bc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049ac:	4b53      	ldr	r3, [pc, #332]	; (8004afc <HAL_RCC_ClockConfig+0x1f8>)
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	2380      	movs	r3, #128	; 0x80
 80049b2:	029b      	lsls	r3, r3, #10
 80049b4:	4013      	ands	r3, r2
 80049b6:	d12b      	bne.n	8004a10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e097      	b.n	8004aec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d107      	bne.n	80049d4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049c4:	4b4d      	ldr	r3, [pc, #308]	; (8004afc <HAL_RCC_ClockConfig+0x1f8>)
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	2380      	movs	r3, #128	; 0x80
 80049ca:	049b      	lsls	r3, r3, #18
 80049cc:	4013      	ands	r3, r2
 80049ce:	d11f      	bne.n	8004a10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e08b      	b.n	8004aec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d107      	bne.n	80049ec <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049dc:	4b47      	ldr	r3, [pc, #284]	; (8004afc <HAL_RCC_ClockConfig+0x1f8>)
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	2380      	movs	r3, #128	; 0x80
 80049e2:	00db      	lsls	r3, r3, #3
 80049e4:	4013      	ands	r3, r2
 80049e6:	d113      	bne.n	8004a10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e07f      	b.n	8004aec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	2b03      	cmp	r3, #3
 80049f2:	d106      	bne.n	8004a02 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049f4:	4b41      	ldr	r3, [pc, #260]	; (8004afc <HAL_RCC_ClockConfig+0x1f8>)
 80049f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049f8:	2202      	movs	r2, #2
 80049fa:	4013      	ands	r3, r2
 80049fc:	d108      	bne.n	8004a10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e074      	b.n	8004aec <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a02:	4b3e      	ldr	r3, [pc, #248]	; (8004afc <HAL_RCC_ClockConfig+0x1f8>)
 8004a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a06:	2202      	movs	r2, #2
 8004a08:	4013      	ands	r3, r2
 8004a0a:	d101      	bne.n	8004a10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e06d      	b.n	8004aec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a10:	4b3a      	ldr	r3, [pc, #232]	; (8004afc <HAL_RCC_ClockConfig+0x1f8>)
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	2207      	movs	r2, #7
 8004a16:	4393      	bics	r3, r2
 8004a18:	0019      	movs	r1, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685a      	ldr	r2, [r3, #4]
 8004a1e:	4b37      	ldr	r3, [pc, #220]	; (8004afc <HAL_RCC_ClockConfig+0x1f8>)
 8004a20:	430a      	orrs	r2, r1
 8004a22:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a24:	f7fe fb58 	bl	80030d8 <HAL_GetTick>
 8004a28:	0003      	movs	r3, r0
 8004a2a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a2c:	e009      	b.n	8004a42 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a2e:	f7fe fb53 	bl	80030d8 <HAL_GetTick>
 8004a32:	0002      	movs	r2, r0
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	4a2f      	ldr	r2, [pc, #188]	; (8004af8 <HAL_RCC_ClockConfig+0x1f4>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e054      	b.n	8004aec <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a42:	4b2e      	ldr	r3, [pc, #184]	; (8004afc <HAL_RCC_ClockConfig+0x1f8>)
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	2238      	movs	r2, #56	; 0x38
 8004a48:	401a      	ands	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	00db      	lsls	r3, r3, #3
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d1ec      	bne.n	8004a2e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a54:	4b27      	ldr	r3, [pc, #156]	; (8004af4 <HAL_RCC_ClockConfig+0x1f0>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2207      	movs	r2, #7
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	683a      	ldr	r2, [r7, #0]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d21e      	bcs.n	8004aa0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a62:	4b24      	ldr	r3, [pc, #144]	; (8004af4 <HAL_RCC_ClockConfig+0x1f0>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2207      	movs	r2, #7
 8004a68:	4393      	bics	r3, r2
 8004a6a:	0019      	movs	r1, r3
 8004a6c:	4b21      	ldr	r3, [pc, #132]	; (8004af4 <HAL_RCC_ClockConfig+0x1f0>)
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004a74:	f7fe fb30 	bl	80030d8 <HAL_GetTick>
 8004a78:	0003      	movs	r3, r0
 8004a7a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004a7c:	e009      	b.n	8004a92 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a7e:	f7fe fb2b 	bl	80030d8 <HAL_GetTick>
 8004a82:	0002      	movs	r2, r0
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	4a1b      	ldr	r2, [pc, #108]	; (8004af8 <HAL_RCC_ClockConfig+0x1f4>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e02c      	b.n	8004aec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004a92:	4b18      	ldr	r3, [pc, #96]	; (8004af4 <HAL_RCC_ClockConfig+0x1f0>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2207      	movs	r2, #7
 8004a98:	4013      	ands	r3, r2
 8004a9a:	683a      	ldr	r2, [r7, #0]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d1ee      	bne.n	8004a7e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2204      	movs	r2, #4
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	d009      	beq.n	8004abe <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004aaa:	4b14      	ldr	r3, [pc, #80]	; (8004afc <HAL_RCC_ClockConfig+0x1f8>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	4a15      	ldr	r2, [pc, #84]	; (8004b04 <HAL_RCC_ClockConfig+0x200>)
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	0019      	movs	r1, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68da      	ldr	r2, [r3, #12]
 8004ab8:	4b10      	ldr	r3, [pc, #64]	; (8004afc <HAL_RCC_ClockConfig+0x1f8>)
 8004aba:	430a      	orrs	r2, r1
 8004abc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004abe:	f000 f829 	bl	8004b14 <HAL_RCC_GetSysClockFreq>
 8004ac2:	0001      	movs	r1, r0
 8004ac4:	4b0d      	ldr	r3, [pc, #52]	; (8004afc <HAL_RCC_ClockConfig+0x1f8>)
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	0a1b      	lsrs	r3, r3, #8
 8004aca:	220f      	movs	r2, #15
 8004acc:	401a      	ands	r2, r3
 8004ace:	4b0e      	ldr	r3, [pc, #56]	; (8004b08 <HAL_RCC_ClockConfig+0x204>)
 8004ad0:	0092      	lsls	r2, r2, #2
 8004ad2:	58d3      	ldr	r3, [r2, r3]
 8004ad4:	221f      	movs	r2, #31
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	000a      	movs	r2, r1
 8004ada:	40da      	lsrs	r2, r3
 8004adc:	4b0b      	ldr	r3, [pc, #44]	; (8004b0c <HAL_RCC_ClockConfig+0x208>)
 8004ade:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004ae0:	4b0b      	ldr	r3, [pc, #44]	; (8004b10 <HAL_RCC_ClockConfig+0x20c>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	f7fe fa9b 	bl	8003020 <HAL_InitTick>
 8004aea:	0003      	movs	r3, r0
}
 8004aec:	0018      	movs	r0, r3
 8004aee:	46bd      	mov	sp, r7
 8004af0:	b004      	add	sp, #16
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	40022000 	.word	0x40022000
 8004af8:	00001388 	.word	0x00001388
 8004afc:	40021000 	.word	0x40021000
 8004b00:	fffff0ff 	.word	0xfffff0ff
 8004b04:	ffff8fff 	.word	0xffff8fff
 8004b08:	08005fa8 	.word	0x08005fa8
 8004b0c:	20000000 	.word	0x20000000
 8004b10:	20000004 	.word	0x20000004

08004b14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b1a:	4b3c      	ldr	r3, [pc, #240]	; (8004c0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	2238      	movs	r2, #56	; 0x38
 8004b20:	4013      	ands	r3, r2
 8004b22:	d10f      	bne.n	8004b44 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004b24:	4b39      	ldr	r3, [pc, #228]	; (8004c0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	0adb      	lsrs	r3, r3, #11
 8004b2a:	2207      	movs	r2, #7
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	2201      	movs	r2, #1
 8004b30:	409a      	lsls	r2, r3
 8004b32:	0013      	movs	r3, r2
 8004b34:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004b36:	6839      	ldr	r1, [r7, #0]
 8004b38:	4835      	ldr	r0, [pc, #212]	; (8004c10 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004b3a:	f7fb fae3 	bl	8000104 <__udivsi3>
 8004b3e:	0003      	movs	r3, r0
 8004b40:	613b      	str	r3, [r7, #16]
 8004b42:	e05d      	b.n	8004c00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b44:	4b31      	ldr	r3, [pc, #196]	; (8004c0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	2238      	movs	r2, #56	; 0x38
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	2b08      	cmp	r3, #8
 8004b4e:	d102      	bne.n	8004b56 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b50:	4b30      	ldr	r3, [pc, #192]	; (8004c14 <HAL_RCC_GetSysClockFreq+0x100>)
 8004b52:	613b      	str	r3, [r7, #16]
 8004b54:	e054      	b.n	8004c00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b56:	4b2d      	ldr	r3, [pc, #180]	; (8004c0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	2238      	movs	r2, #56	; 0x38
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	2b10      	cmp	r3, #16
 8004b60:	d138      	bne.n	8004bd4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004b62:	4b2a      	ldr	r3, [pc, #168]	; (8004c0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	2203      	movs	r2, #3
 8004b68:	4013      	ands	r3, r2
 8004b6a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b6c:	4b27      	ldr	r3, [pc, #156]	; (8004c0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	091b      	lsrs	r3, r3, #4
 8004b72:	2207      	movs	r2, #7
 8004b74:	4013      	ands	r3, r2
 8004b76:	3301      	adds	r3, #1
 8004b78:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2b03      	cmp	r3, #3
 8004b7e:	d10d      	bne.n	8004b9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b80:	68b9      	ldr	r1, [r7, #8]
 8004b82:	4824      	ldr	r0, [pc, #144]	; (8004c14 <HAL_RCC_GetSysClockFreq+0x100>)
 8004b84:	f7fb fabe 	bl	8000104 <__udivsi3>
 8004b88:	0003      	movs	r3, r0
 8004b8a:	0019      	movs	r1, r3
 8004b8c:	4b1f      	ldr	r3, [pc, #124]	; (8004c0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	0a1b      	lsrs	r3, r3, #8
 8004b92:	227f      	movs	r2, #127	; 0x7f
 8004b94:	4013      	ands	r3, r2
 8004b96:	434b      	muls	r3, r1
 8004b98:	617b      	str	r3, [r7, #20]
        break;
 8004b9a:	e00d      	b.n	8004bb8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004b9c:	68b9      	ldr	r1, [r7, #8]
 8004b9e:	481c      	ldr	r0, [pc, #112]	; (8004c10 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004ba0:	f7fb fab0 	bl	8000104 <__udivsi3>
 8004ba4:	0003      	movs	r3, r0
 8004ba6:	0019      	movs	r1, r3
 8004ba8:	4b18      	ldr	r3, [pc, #96]	; (8004c0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	0a1b      	lsrs	r3, r3, #8
 8004bae:	227f      	movs	r2, #127	; 0x7f
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	434b      	muls	r3, r1
 8004bb4:	617b      	str	r3, [r7, #20]
        break;
 8004bb6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004bb8:	4b14      	ldr	r3, [pc, #80]	; (8004c0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	0f5b      	lsrs	r3, r3, #29
 8004bbe:	2207      	movs	r2, #7
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004bc6:	6879      	ldr	r1, [r7, #4]
 8004bc8:	6978      	ldr	r0, [r7, #20]
 8004bca:	f7fb fa9b 	bl	8000104 <__udivsi3>
 8004bce:	0003      	movs	r3, r0
 8004bd0:	613b      	str	r3, [r7, #16]
 8004bd2:	e015      	b.n	8004c00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004bd4:	4b0d      	ldr	r3, [pc, #52]	; (8004c0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	2238      	movs	r2, #56	; 0x38
 8004bda:	4013      	ands	r3, r2
 8004bdc:	2b20      	cmp	r3, #32
 8004bde:	d103      	bne.n	8004be8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004be0:	2380      	movs	r3, #128	; 0x80
 8004be2:	021b      	lsls	r3, r3, #8
 8004be4:	613b      	str	r3, [r7, #16]
 8004be6:	e00b      	b.n	8004c00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004be8:	4b08      	ldr	r3, [pc, #32]	; (8004c0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	2238      	movs	r2, #56	; 0x38
 8004bee:	4013      	ands	r3, r2
 8004bf0:	2b18      	cmp	r3, #24
 8004bf2:	d103      	bne.n	8004bfc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004bf4:	23fa      	movs	r3, #250	; 0xfa
 8004bf6:	01db      	lsls	r3, r3, #7
 8004bf8:	613b      	str	r3, [r7, #16]
 8004bfa:	e001      	b.n	8004c00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004c00:	693b      	ldr	r3, [r7, #16]
}
 8004c02:	0018      	movs	r0, r3
 8004c04:	46bd      	mov	sp, r7
 8004c06:	b006      	add	sp, #24
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	46c0      	nop			; (mov r8, r8)
 8004c0c:	40021000 	.word	0x40021000
 8004c10:	00f42400 	.word	0x00f42400
 8004c14:	007a1200 	.word	0x007a1200

08004c18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c1c:	4b02      	ldr	r3, [pc, #8]	; (8004c28 <HAL_RCC_GetHCLKFreq+0x10>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
}
 8004c20:	0018      	movs	r0, r3
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	46c0      	nop			; (mov r8, r8)
 8004c28:	20000000 	.word	0x20000000

08004c2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c2c:	b5b0      	push	{r4, r5, r7, lr}
 8004c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004c30:	f7ff fff2 	bl	8004c18 <HAL_RCC_GetHCLKFreq>
 8004c34:	0004      	movs	r4, r0
 8004c36:	f7ff fb3f 	bl	80042b8 <LL_RCC_GetAPB1Prescaler>
 8004c3a:	0003      	movs	r3, r0
 8004c3c:	0b1a      	lsrs	r2, r3, #12
 8004c3e:	4b05      	ldr	r3, [pc, #20]	; (8004c54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c40:	0092      	lsls	r2, r2, #2
 8004c42:	58d3      	ldr	r3, [r2, r3]
 8004c44:	221f      	movs	r2, #31
 8004c46:	4013      	ands	r3, r2
 8004c48:	40dc      	lsrs	r4, r3
 8004c4a:	0023      	movs	r3, r4
}
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bdb0      	pop	{r4, r5, r7, pc}
 8004c52:	46c0      	nop			; (mov r8, r8)
 8004c54:	08005fe8 	.word	0x08005fe8

08004c58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b086      	sub	sp, #24
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004c60:	2313      	movs	r3, #19
 8004c62:	18fb      	adds	r3, r7, r3
 8004c64:	2200      	movs	r2, #0
 8004c66:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c68:	2312      	movs	r3, #18
 8004c6a:	18fb      	adds	r3, r7, r3
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	2380      	movs	r3, #128	; 0x80
 8004c76:	029b      	lsls	r3, r3, #10
 8004c78:	4013      	ands	r3, r2
 8004c7a:	d100      	bne.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004c7c:	e0a3      	b.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c7e:	2011      	movs	r0, #17
 8004c80:	183b      	adds	r3, r7, r0
 8004c82:	2200      	movs	r2, #0
 8004c84:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c86:	4bc3      	ldr	r3, [pc, #780]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c8a:	2380      	movs	r3, #128	; 0x80
 8004c8c:	055b      	lsls	r3, r3, #21
 8004c8e:	4013      	ands	r3, r2
 8004c90:	d110      	bne.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c92:	4bc0      	ldr	r3, [pc, #768]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c96:	4bbf      	ldr	r3, [pc, #764]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c98:	2180      	movs	r1, #128	; 0x80
 8004c9a:	0549      	lsls	r1, r1, #21
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004ca0:	4bbc      	ldr	r3, [pc, #752]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ca2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ca4:	2380      	movs	r3, #128	; 0x80
 8004ca6:	055b      	lsls	r3, r3, #21
 8004ca8:	4013      	ands	r3, r2
 8004caa:	60bb      	str	r3, [r7, #8]
 8004cac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cae:	183b      	adds	r3, r7, r0
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cb4:	4bb8      	ldr	r3, [pc, #736]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	4bb7      	ldr	r3, [pc, #732]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004cba:	2180      	movs	r1, #128	; 0x80
 8004cbc:	0049      	lsls	r1, r1, #1
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004cc2:	f7fe fa09 	bl	80030d8 <HAL_GetTick>
 8004cc6:	0003      	movs	r3, r0
 8004cc8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004cca:	e00b      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ccc:	f7fe fa04 	bl	80030d8 <HAL_GetTick>
 8004cd0:	0002      	movs	r2, r0
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d904      	bls.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004cda:	2313      	movs	r3, #19
 8004cdc:	18fb      	adds	r3, r7, r3
 8004cde:	2203      	movs	r2, #3
 8004ce0:	701a      	strb	r2, [r3, #0]
        break;
 8004ce2:	e005      	b.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ce4:	4bac      	ldr	r3, [pc, #688]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	2380      	movs	r3, #128	; 0x80
 8004cea:	005b      	lsls	r3, r3, #1
 8004cec:	4013      	ands	r3, r2
 8004cee:	d0ed      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004cf0:	2313      	movs	r3, #19
 8004cf2:	18fb      	adds	r3, r7, r3
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d154      	bne.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004cfa:	4ba6      	ldr	r3, [pc, #664]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cfc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004cfe:	23c0      	movs	r3, #192	; 0xc0
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	4013      	ands	r3, r2
 8004d04:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d019      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d014      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d16:	4b9f      	ldr	r3, [pc, #636]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d1a:	4aa0      	ldr	r2, [pc, #640]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d20:	4b9c      	ldr	r3, [pc, #624]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d24:	4b9b      	ldr	r3, [pc, #620]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d26:	2180      	movs	r1, #128	; 0x80
 8004d28:	0249      	lsls	r1, r1, #9
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d2e:	4b99      	ldr	r3, [pc, #612]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d30:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d32:	4b98      	ldr	r3, [pc, #608]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d34:	499a      	ldr	r1, [pc, #616]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004d36:	400a      	ands	r2, r1
 8004d38:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d3a:	4b96      	ldr	r3, [pc, #600]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	2201      	movs	r2, #1
 8004d44:	4013      	ands	r3, r2
 8004d46:	d016      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d48:	f7fe f9c6 	bl	80030d8 <HAL_GetTick>
 8004d4c:	0003      	movs	r3, r0
 8004d4e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d50:	e00c      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d52:	f7fe f9c1 	bl	80030d8 <HAL_GetTick>
 8004d56:	0002      	movs	r2, r0
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	4a91      	ldr	r2, [pc, #580]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d904      	bls.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004d62:	2313      	movs	r3, #19
 8004d64:	18fb      	adds	r3, r7, r3
 8004d66:	2203      	movs	r2, #3
 8004d68:	701a      	strb	r2, [r3, #0]
            break;
 8004d6a:	e004      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d6c:	4b89      	ldr	r3, [pc, #548]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d70:	2202      	movs	r2, #2
 8004d72:	4013      	ands	r3, r2
 8004d74:	d0ed      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004d76:	2313      	movs	r3, #19
 8004d78:	18fb      	adds	r3, r7, r3
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d10a      	bne.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d80:	4b84      	ldr	r3, [pc, #528]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d84:	4a85      	ldr	r2, [pc, #532]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004d86:	4013      	ands	r3, r2
 8004d88:	0019      	movs	r1, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d8e:	4b81      	ldr	r3, [pc, #516]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d90:	430a      	orrs	r2, r1
 8004d92:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d94:	e00c      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d96:	2312      	movs	r3, #18
 8004d98:	18fb      	adds	r3, r7, r3
 8004d9a:	2213      	movs	r2, #19
 8004d9c:	18ba      	adds	r2, r7, r2
 8004d9e:	7812      	ldrb	r2, [r2, #0]
 8004da0:	701a      	strb	r2, [r3, #0]
 8004da2:	e005      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da4:	2312      	movs	r3, #18
 8004da6:	18fb      	adds	r3, r7, r3
 8004da8:	2213      	movs	r2, #19
 8004daa:	18ba      	adds	r2, r7, r2
 8004dac:	7812      	ldrb	r2, [r2, #0]
 8004dae:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004db0:	2311      	movs	r3, #17
 8004db2:	18fb      	adds	r3, r7, r3
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d105      	bne.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dba:	4b76      	ldr	r3, [pc, #472]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004dbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dbe:	4b75      	ldr	r3, [pc, #468]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004dc0:	4979      	ldr	r1, [pc, #484]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004dc2:	400a      	ands	r2, r1
 8004dc4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	4013      	ands	r3, r2
 8004dce:	d009      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004dd0:	4b70      	ldr	r3, [pc, #448]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dd4:	2203      	movs	r2, #3
 8004dd6:	4393      	bics	r3, r2
 8004dd8:	0019      	movs	r1, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	4b6d      	ldr	r3, [pc, #436]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004de0:	430a      	orrs	r2, r1
 8004de2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2202      	movs	r2, #2
 8004dea:	4013      	ands	r3, r2
 8004dec:	d009      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004dee:	4b69      	ldr	r3, [pc, #420]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df2:	220c      	movs	r2, #12
 8004df4:	4393      	bics	r3, r2
 8004df6:	0019      	movs	r1, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689a      	ldr	r2, [r3, #8]
 8004dfc:	4b65      	ldr	r3, [pc, #404]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2210      	movs	r2, #16
 8004e08:	4013      	ands	r3, r2
 8004e0a:	d009      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e0c:	4b61      	ldr	r3, [pc, #388]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e10:	4a66      	ldr	r2, [pc, #408]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8004e12:	4013      	ands	r3, r2
 8004e14:	0019      	movs	r1, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68da      	ldr	r2, [r3, #12]
 8004e1a:	4b5e      	ldr	r3, [pc, #376]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	2380      	movs	r3, #128	; 0x80
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	4013      	ands	r3, r2
 8004e2a:	d009      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e2c:	4b59      	ldr	r3, [pc, #356]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e30:	4a5f      	ldr	r2, [pc, #380]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e32:	4013      	ands	r3, r2
 8004e34:	0019      	movs	r1, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	699a      	ldr	r2, [r3, #24]
 8004e3a:	4b56      	ldr	r3, [pc, #344]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	2380      	movs	r3, #128	; 0x80
 8004e46:	00db      	lsls	r3, r3, #3
 8004e48:	4013      	ands	r3, r2
 8004e4a:	d009      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e4c:	4b51      	ldr	r3, [pc, #324]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e50:	4a58      	ldr	r2, [pc, #352]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e52:	4013      	ands	r3, r2
 8004e54:	0019      	movs	r1, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	69da      	ldr	r2, [r3, #28]
 8004e5a:	4b4e      	ldr	r3, [pc, #312]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2220      	movs	r2, #32
 8004e66:	4013      	ands	r3, r2
 8004e68:	d009      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e6a:	4b4a      	ldr	r3, [pc, #296]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6e:	4a52      	ldr	r2, [pc, #328]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8004e70:	4013      	ands	r3, r2
 8004e72:	0019      	movs	r1, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	691a      	ldr	r2, [r3, #16]
 8004e78:	4b46      	ldr	r3, [pc, #280]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	2380      	movs	r3, #128	; 0x80
 8004e84:	01db      	lsls	r3, r3, #7
 8004e86:	4013      	ands	r3, r2
 8004e88:	d015      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e8a:	4b42      	ldr	r3, [pc, #264]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	0899      	lsrs	r1, r3, #2
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a1a      	ldr	r2, [r3, #32]
 8004e96:	4b3f      	ldr	r3, [pc, #252]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a1a      	ldr	r2, [r3, #32]
 8004ea0:	2380      	movs	r3, #128	; 0x80
 8004ea2:	05db      	lsls	r3, r3, #23
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d106      	bne.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004ea8:	4b3a      	ldr	r3, [pc, #232]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004eaa:	68da      	ldr	r2, [r3, #12]
 8004eac:	4b39      	ldr	r3, [pc, #228]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004eae:	2180      	movs	r1, #128	; 0x80
 8004eb0:	0249      	lsls	r1, r1, #9
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	2380      	movs	r3, #128	; 0x80
 8004ebc:	031b      	lsls	r3, r3, #12
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	d009      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ec2:	4b34      	ldr	r3, [pc, #208]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec6:	2240      	movs	r2, #64	; 0x40
 8004ec8:	4393      	bics	r3, r2
 8004eca:	0019      	movs	r1, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ed0:	4b30      	ldr	r3, [pc, #192]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	2380      	movs	r3, #128	; 0x80
 8004edc:	039b      	lsls	r3, r3, #14
 8004ede:	4013      	ands	r3, r2
 8004ee0:	d016      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004ee2:	4b2c      	ldr	r3, [pc, #176]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee6:	4a35      	ldr	r2, [pc, #212]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004ee8:	4013      	ands	r3, r2
 8004eea:	0019      	movs	r1, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ef0:	4b28      	ldr	r3, [pc, #160]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004efa:	2380      	movs	r3, #128	; 0x80
 8004efc:	03db      	lsls	r3, r3, #15
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d106      	bne.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004f02:	4b24      	ldr	r3, [pc, #144]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f04:	68da      	ldr	r2, [r3, #12]
 8004f06:	4b23      	ldr	r3, [pc, #140]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f08:	2180      	movs	r1, #128	; 0x80
 8004f0a:	0449      	lsls	r1, r1, #17
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	2380      	movs	r3, #128	; 0x80
 8004f16:	03db      	lsls	r3, r3, #15
 8004f18:	4013      	ands	r3, r2
 8004f1a:	d016      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004f1c:	4b1d      	ldr	r3, [pc, #116]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f20:	4a27      	ldr	r2, [pc, #156]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8004f22:	4013      	ands	r3, r2
 8004f24:	0019      	movs	r1, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f2a:	4b1a      	ldr	r3, [pc, #104]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f34:	2380      	movs	r3, #128	; 0x80
 8004f36:	045b      	lsls	r3, r3, #17
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d106      	bne.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004f3c:	4b15      	ldr	r3, [pc, #84]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f3e:	68da      	ldr	r2, [r3, #12]
 8004f40:	4b14      	ldr	r3, [pc, #80]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f42:	2180      	movs	r1, #128	; 0x80
 8004f44:	0449      	lsls	r1, r1, #17
 8004f46:	430a      	orrs	r2, r1
 8004f48:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	2380      	movs	r3, #128	; 0x80
 8004f50:	011b      	lsls	r3, r3, #4
 8004f52:	4013      	ands	r3, r2
 8004f54:	d016      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004f56:	4b0f      	ldr	r3, [pc, #60]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f5a:	4a1a      	ldr	r2, [pc, #104]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	0019      	movs	r1, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	695a      	ldr	r2, [r3, #20]
 8004f64:	4b0b      	ldr	r3, [pc, #44]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f66:	430a      	orrs	r2, r1
 8004f68:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	695a      	ldr	r2, [r3, #20]
 8004f6e:	2380      	movs	r3, #128	; 0x80
 8004f70:	01db      	lsls	r3, r3, #7
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d106      	bne.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004f76:	4b07      	ldr	r3, [pc, #28]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f78:	68da      	ldr	r2, [r3, #12]
 8004f7a:	4b06      	ldr	r3, [pc, #24]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f7c:	2180      	movs	r1, #128	; 0x80
 8004f7e:	0249      	lsls	r1, r1, #9
 8004f80:	430a      	orrs	r2, r1
 8004f82:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004f84:	2312      	movs	r3, #18
 8004f86:	18fb      	adds	r3, r7, r3
 8004f88:	781b      	ldrb	r3, [r3, #0]
}
 8004f8a:	0018      	movs	r0, r3
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	b006      	add	sp, #24
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	46c0      	nop			; (mov r8, r8)
 8004f94:	40021000 	.word	0x40021000
 8004f98:	40007000 	.word	0x40007000
 8004f9c:	fffffcff 	.word	0xfffffcff
 8004fa0:	fffeffff 	.word	0xfffeffff
 8004fa4:	00001388 	.word	0x00001388
 8004fa8:	efffffff 	.word	0xefffffff
 8004fac:	fffff3ff 	.word	0xfffff3ff
 8004fb0:	fff3ffff 	.word	0xfff3ffff
 8004fb4:	ffcfffff 	.word	0xffcfffff
 8004fb8:	ffffcfff 	.word	0xffffcfff
 8004fbc:	ffbfffff 	.word	0xffbfffff
 8004fc0:	feffffff 	.word	0xfeffffff
 8004fc4:	ffff3fff 	.word	0xffff3fff

08004fc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e046      	b.n	8005068 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2288      	movs	r2, #136	; 0x88
 8004fde:	589b      	ldr	r3, [r3, r2]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d107      	bne.n	8004ff4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2284      	movs	r2, #132	; 0x84
 8004fe8:	2100      	movs	r1, #0
 8004fea:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	0018      	movs	r0, r3
 8004ff0:	f7fd ff18 	bl	8002e24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2288      	movs	r2, #136	; 0x88
 8004ff8:	2124      	movs	r1, #36	; 0x24
 8004ffa:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2101      	movs	r1, #1
 8005008:	438a      	bics	r2, r1
 800500a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005010:	2b00      	cmp	r3, #0
 8005012:	d003      	beq.n	800501c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	0018      	movs	r0, r3
 8005018:	f000 faea 	bl	80055f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	0018      	movs	r0, r3
 8005020:	f000 f828 	bl	8005074 <UART_SetConfig>
 8005024:	0003      	movs	r3, r0
 8005026:	2b01      	cmp	r3, #1
 8005028:	d101      	bne.n	800502e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e01c      	b.n	8005068 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	685a      	ldr	r2, [r3, #4]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	490d      	ldr	r1, [pc, #52]	; (8005070 <HAL_UART_Init+0xa8>)
 800503a:	400a      	ands	r2, r1
 800503c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	689a      	ldr	r2, [r3, #8]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	212a      	movs	r1, #42	; 0x2a
 800504a:	438a      	bics	r2, r1
 800504c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2101      	movs	r1, #1
 800505a:	430a      	orrs	r2, r1
 800505c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	0018      	movs	r0, r3
 8005062:	f000 fb79 	bl	8005758 <UART_CheckIdleState>
 8005066:	0003      	movs	r3, r0
}
 8005068:	0018      	movs	r0, r3
 800506a:	46bd      	mov	sp, r7
 800506c:	b002      	add	sp, #8
 800506e:	bd80      	pop	{r7, pc}
 8005070:	ffffb7ff 	.word	0xffffb7ff

08005074 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005074:	b5b0      	push	{r4, r5, r7, lr}
 8005076:	b090      	sub	sp, #64	; 0x40
 8005078:	af00      	add	r7, sp, #0
 800507a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800507c:	231a      	movs	r3, #26
 800507e:	2220      	movs	r2, #32
 8005080:	189b      	adds	r3, r3, r2
 8005082:	19db      	adds	r3, r3, r7
 8005084:	2200      	movs	r2, #0
 8005086:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508a:	689a      	ldr	r2, [r3, #8]
 800508c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	431a      	orrs	r2, r3
 8005092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	431a      	orrs	r2, r3
 8005098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509a:	69db      	ldr	r3, [r3, #28]
 800509c:	4313      	orrs	r3, r2
 800509e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4aaf      	ldr	r2, [pc, #700]	; (8005364 <UART_SetConfig+0x2f0>)
 80050a8:	4013      	ands	r3, r2
 80050aa:	0019      	movs	r1, r3
 80050ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050b2:	430b      	orrs	r3, r1
 80050b4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	4aaa      	ldr	r2, [pc, #680]	; (8005368 <UART_SetConfig+0x2f4>)
 80050be:	4013      	ands	r3, r2
 80050c0:	0018      	movs	r0, r3
 80050c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c4:	68d9      	ldr	r1, [r3, #12]
 80050c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	0003      	movs	r3, r0
 80050cc:	430b      	orrs	r3, r1
 80050ce:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80050d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4aa4      	ldr	r2, [pc, #656]	; (800536c <UART_SetConfig+0x2f8>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d004      	beq.n	80050ea <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80050e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80050e6:	4313      	orrs	r3, r2
 80050e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	4a9f      	ldr	r2, [pc, #636]	; (8005370 <UART_SetConfig+0x2fc>)
 80050f2:	4013      	ands	r3, r2
 80050f4:	0019      	movs	r1, r3
 80050f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050fc:	430b      	orrs	r3, r1
 80050fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005106:	220f      	movs	r2, #15
 8005108:	4393      	bics	r3, r2
 800510a:	0018      	movs	r0, r3
 800510c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	0003      	movs	r3, r0
 8005116:	430b      	orrs	r3, r1
 8005118:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a95      	ldr	r2, [pc, #596]	; (8005374 <UART_SetConfig+0x300>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d131      	bne.n	8005188 <UART_SetConfig+0x114>
 8005124:	4b94      	ldr	r3, [pc, #592]	; (8005378 <UART_SetConfig+0x304>)
 8005126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005128:	2203      	movs	r2, #3
 800512a:	4013      	ands	r3, r2
 800512c:	2b03      	cmp	r3, #3
 800512e:	d01d      	beq.n	800516c <UART_SetConfig+0xf8>
 8005130:	d823      	bhi.n	800517a <UART_SetConfig+0x106>
 8005132:	2b02      	cmp	r3, #2
 8005134:	d00c      	beq.n	8005150 <UART_SetConfig+0xdc>
 8005136:	d820      	bhi.n	800517a <UART_SetConfig+0x106>
 8005138:	2b00      	cmp	r3, #0
 800513a:	d002      	beq.n	8005142 <UART_SetConfig+0xce>
 800513c:	2b01      	cmp	r3, #1
 800513e:	d00e      	beq.n	800515e <UART_SetConfig+0xea>
 8005140:	e01b      	b.n	800517a <UART_SetConfig+0x106>
 8005142:	231b      	movs	r3, #27
 8005144:	2220      	movs	r2, #32
 8005146:	189b      	adds	r3, r3, r2
 8005148:	19db      	adds	r3, r3, r7
 800514a:	2200      	movs	r2, #0
 800514c:	701a      	strb	r2, [r3, #0]
 800514e:	e0b4      	b.n	80052ba <UART_SetConfig+0x246>
 8005150:	231b      	movs	r3, #27
 8005152:	2220      	movs	r2, #32
 8005154:	189b      	adds	r3, r3, r2
 8005156:	19db      	adds	r3, r3, r7
 8005158:	2202      	movs	r2, #2
 800515a:	701a      	strb	r2, [r3, #0]
 800515c:	e0ad      	b.n	80052ba <UART_SetConfig+0x246>
 800515e:	231b      	movs	r3, #27
 8005160:	2220      	movs	r2, #32
 8005162:	189b      	adds	r3, r3, r2
 8005164:	19db      	adds	r3, r3, r7
 8005166:	2204      	movs	r2, #4
 8005168:	701a      	strb	r2, [r3, #0]
 800516a:	e0a6      	b.n	80052ba <UART_SetConfig+0x246>
 800516c:	231b      	movs	r3, #27
 800516e:	2220      	movs	r2, #32
 8005170:	189b      	adds	r3, r3, r2
 8005172:	19db      	adds	r3, r3, r7
 8005174:	2208      	movs	r2, #8
 8005176:	701a      	strb	r2, [r3, #0]
 8005178:	e09f      	b.n	80052ba <UART_SetConfig+0x246>
 800517a:	231b      	movs	r3, #27
 800517c:	2220      	movs	r2, #32
 800517e:	189b      	adds	r3, r3, r2
 8005180:	19db      	adds	r3, r3, r7
 8005182:	2210      	movs	r2, #16
 8005184:	701a      	strb	r2, [r3, #0]
 8005186:	e098      	b.n	80052ba <UART_SetConfig+0x246>
 8005188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a7b      	ldr	r2, [pc, #492]	; (800537c <UART_SetConfig+0x308>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d131      	bne.n	80051f6 <UART_SetConfig+0x182>
 8005192:	4b79      	ldr	r3, [pc, #484]	; (8005378 <UART_SetConfig+0x304>)
 8005194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005196:	220c      	movs	r2, #12
 8005198:	4013      	ands	r3, r2
 800519a:	2b0c      	cmp	r3, #12
 800519c:	d01d      	beq.n	80051da <UART_SetConfig+0x166>
 800519e:	d823      	bhi.n	80051e8 <UART_SetConfig+0x174>
 80051a0:	2b08      	cmp	r3, #8
 80051a2:	d00c      	beq.n	80051be <UART_SetConfig+0x14a>
 80051a4:	d820      	bhi.n	80051e8 <UART_SetConfig+0x174>
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d002      	beq.n	80051b0 <UART_SetConfig+0x13c>
 80051aa:	2b04      	cmp	r3, #4
 80051ac:	d00e      	beq.n	80051cc <UART_SetConfig+0x158>
 80051ae:	e01b      	b.n	80051e8 <UART_SetConfig+0x174>
 80051b0:	231b      	movs	r3, #27
 80051b2:	2220      	movs	r2, #32
 80051b4:	189b      	adds	r3, r3, r2
 80051b6:	19db      	adds	r3, r3, r7
 80051b8:	2200      	movs	r2, #0
 80051ba:	701a      	strb	r2, [r3, #0]
 80051bc:	e07d      	b.n	80052ba <UART_SetConfig+0x246>
 80051be:	231b      	movs	r3, #27
 80051c0:	2220      	movs	r2, #32
 80051c2:	189b      	adds	r3, r3, r2
 80051c4:	19db      	adds	r3, r3, r7
 80051c6:	2202      	movs	r2, #2
 80051c8:	701a      	strb	r2, [r3, #0]
 80051ca:	e076      	b.n	80052ba <UART_SetConfig+0x246>
 80051cc:	231b      	movs	r3, #27
 80051ce:	2220      	movs	r2, #32
 80051d0:	189b      	adds	r3, r3, r2
 80051d2:	19db      	adds	r3, r3, r7
 80051d4:	2204      	movs	r2, #4
 80051d6:	701a      	strb	r2, [r3, #0]
 80051d8:	e06f      	b.n	80052ba <UART_SetConfig+0x246>
 80051da:	231b      	movs	r3, #27
 80051dc:	2220      	movs	r2, #32
 80051de:	189b      	adds	r3, r3, r2
 80051e0:	19db      	adds	r3, r3, r7
 80051e2:	2208      	movs	r2, #8
 80051e4:	701a      	strb	r2, [r3, #0]
 80051e6:	e068      	b.n	80052ba <UART_SetConfig+0x246>
 80051e8:	231b      	movs	r3, #27
 80051ea:	2220      	movs	r2, #32
 80051ec:	189b      	adds	r3, r3, r2
 80051ee:	19db      	adds	r3, r3, r7
 80051f0:	2210      	movs	r2, #16
 80051f2:	701a      	strb	r2, [r3, #0]
 80051f4:	e061      	b.n	80052ba <UART_SetConfig+0x246>
 80051f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a61      	ldr	r2, [pc, #388]	; (8005380 <UART_SetConfig+0x30c>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d106      	bne.n	800520e <UART_SetConfig+0x19a>
 8005200:	231b      	movs	r3, #27
 8005202:	2220      	movs	r2, #32
 8005204:	189b      	adds	r3, r3, r2
 8005206:	19db      	adds	r3, r3, r7
 8005208:	2200      	movs	r2, #0
 800520a:	701a      	strb	r2, [r3, #0]
 800520c:	e055      	b.n	80052ba <UART_SetConfig+0x246>
 800520e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a5c      	ldr	r2, [pc, #368]	; (8005384 <UART_SetConfig+0x310>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d106      	bne.n	8005226 <UART_SetConfig+0x1b2>
 8005218:	231b      	movs	r3, #27
 800521a:	2220      	movs	r2, #32
 800521c:	189b      	adds	r3, r3, r2
 800521e:	19db      	adds	r3, r3, r7
 8005220:	2200      	movs	r2, #0
 8005222:	701a      	strb	r2, [r3, #0]
 8005224:	e049      	b.n	80052ba <UART_SetConfig+0x246>
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a50      	ldr	r2, [pc, #320]	; (800536c <UART_SetConfig+0x2f8>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d13e      	bne.n	80052ae <UART_SetConfig+0x23a>
 8005230:	4b51      	ldr	r3, [pc, #324]	; (8005378 <UART_SetConfig+0x304>)
 8005232:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005234:	23c0      	movs	r3, #192	; 0xc0
 8005236:	011b      	lsls	r3, r3, #4
 8005238:	4013      	ands	r3, r2
 800523a:	22c0      	movs	r2, #192	; 0xc0
 800523c:	0112      	lsls	r2, r2, #4
 800523e:	4293      	cmp	r3, r2
 8005240:	d027      	beq.n	8005292 <UART_SetConfig+0x21e>
 8005242:	22c0      	movs	r2, #192	; 0xc0
 8005244:	0112      	lsls	r2, r2, #4
 8005246:	4293      	cmp	r3, r2
 8005248:	d82a      	bhi.n	80052a0 <UART_SetConfig+0x22c>
 800524a:	2280      	movs	r2, #128	; 0x80
 800524c:	0112      	lsls	r2, r2, #4
 800524e:	4293      	cmp	r3, r2
 8005250:	d011      	beq.n	8005276 <UART_SetConfig+0x202>
 8005252:	2280      	movs	r2, #128	; 0x80
 8005254:	0112      	lsls	r2, r2, #4
 8005256:	4293      	cmp	r3, r2
 8005258:	d822      	bhi.n	80052a0 <UART_SetConfig+0x22c>
 800525a:	2b00      	cmp	r3, #0
 800525c:	d004      	beq.n	8005268 <UART_SetConfig+0x1f4>
 800525e:	2280      	movs	r2, #128	; 0x80
 8005260:	00d2      	lsls	r2, r2, #3
 8005262:	4293      	cmp	r3, r2
 8005264:	d00e      	beq.n	8005284 <UART_SetConfig+0x210>
 8005266:	e01b      	b.n	80052a0 <UART_SetConfig+0x22c>
 8005268:	231b      	movs	r3, #27
 800526a:	2220      	movs	r2, #32
 800526c:	189b      	adds	r3, r3, r2
 800526e:	19db      	adds	r3, r3, r7
 8005270:	2200      	movs	r2, #0
 8005272:	701a      	strb	r2, [r3, #0]
 8005274:	e021      	b.n	80052ba <UART_SetConfig+0x246>
 8005276:	231b      	movs	r3, #27
 8005278:	2220      	movs	r2, #32
 800527a:	189b      	adds	r3, r3, r2
 800527c:	19db      	adds	r3, r3, r7
 800527e:	2202      	movs	r2, #2
 8005280:	701a      	strb	r2, [r3, #0]
 8005282:	e01a      	b.n	80052ba <UART_SetConfig+0x246>
 8005284:	231b      	movs	r3, #27
 8005286:	2220      	movs	r2, #32
 8005288:	189b      	adds	r3, r3, r2
 800528a:	19db      	adds	r3, r3, r7
 800528c:	2204      	movs	r2, #4
 800528e:	701a      	strb	r2, [r3, #0]
 8005290:	e013      	b.n	80052ba <UART_SetConfig+0x246>
 8005292:	231b      	movs	r3, #27
 8005294:	2220      	movs	r2, #32
 8005296:	189b      	adds	r3, r3, r2
 8005298:	19db      	adds	r3, r3, r7
 800529a:	2208      	movs	r2, #8
 800529c:	701a      	strb	r2, [r3, #0]
 800529e:	e00c      	b.n	80052ba <UART_SetConfig+0x246>
 80052a0:	231b      	movs	r3, #27
 80052a2:	2220      	movs	r2, #32
 80052a4:	189b      	adds	r3, r3, r2
 80052a6:	19db      	adds	r3, r3, r7
 80052a8:	2210      	movs	r2, #16
 80052aa:	701a      	strb	r2, [r3, #0]
 80052ac:	e005      	b.n	80052ba <UART_SetConfig+0x246>
 80052ae:	231b      	movs	r3, #27
 80052b0:	2220      	movs	r2, #32
 80052b2:	189b      	adds	r3, r3, r2
 80052b4:	19db      	adds	r3, r3, r7
 80052b6:	2210      	movs	r2, #16
 80052b8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80052ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a2b      	ldr	r2, [pc, #172]	; (800536c <UART_SetConfig+0x2f8>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d000      	beq.n	80052c6 <UART_SetConfig+0x252>
 80052c4:	e0a9      	b.n	800541a <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80052c6:	231b      	movs	r3, #27
 80052c8:	2220      	movs	r2, #32
 80052ca:	189b      	adds	r3, r3, r2
 80052cc:	19db      	adds	r3, r3, r7
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	2b08      	cmp	r3, #8
 80052d2:	d015      	beq.n	8005300 <UART_SetConfig+0x28c>
 80052d4:	dc18      	bgt.n	8005308 <UART_SetConfig+0x294>
 80052d6:	2b04      	cmp	r3, #4
 80052d8:	d00d      	beq.n	80052f6 <UART_SetConfig+0x282>
 80052da:	dc15      	bgt.n	8005308 <UART_SetConfig+0x294>
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d002      	beq.n	80052e6 <UART_SetConfig+0x272>
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d005      	beq.n	80052f0 <UART_SetConfig+0x27c>
 80052e4:	e010      	b.n	8005308 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052e6:	f7ff fca1 	bl	8004c2c <HAL_RCC_GetPCLK1Freq>
 80052ea:	0003      	movs	r3, r0
 80052ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80052ee:	e014      	b.n	800531a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052f0:	4b25      	ldr	r3, [pc, #148]	; (8005388 <UART_SetConfig+0x314>)
 80052f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80052f4:	e011      	b.n	800531a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052f6:	f7ff fc0d 	bl	8004b14 <HAL_RCC_GetSysClockFreq>
 80052fa:	0003      	movs	r3, r0
 80052fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80052fe:	e00c      	b.n	800531a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005300:	2380      	movs	r3, #128	; 0x80
 8005302:	021b      	lsls	r3, r3, #8
 8005304:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005306:	e008      	b.n	800531a <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8005308:	2300      	movs	r3, #0
 800530a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800530c:	231a      	movs	r3, #26
 800530e:	2220      	movs	r2, #32
 8005310:	189b      	adds	r3, r3, r2
 8005312:	19db      	adds	r3, r3, r7
 8005314:	2201      	movs	r2, #1
 8005316:	701a      	strb	r2, [r3, #0]
        break;
 8005318:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800531a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800531c:	2b00      	cmp	r3, #0
 800531e:	d100      	bne.n	8005322 <UART_SetConfig+0x2ae>
 8005320:	e14b      	b.n	80055ba <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005324:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005326:	4b19      	ldr	r3, [pc, #100]	; (800538c <UART_SetConfig+0x318>)
 8005328:	0052      	lsls	r2, r2, #1
 800532a:	5ad3      	ldrh	r3, [r2, r3]
 800532c:	0019      	movs	r1, r3
 800532e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005330:	f7fa fee8 	bl	8000104 <__udivsi3>
 8005334:	0003      	movs	r3, r0
 8005336:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533a:	685a      	ldr	r2, [r3, #4]
 800533c:	0013      	movs	r3, r2
 800533e:	005b      	lsls	r3, r3, #1
 8005340:	189b      	adds	r3, r3, r2
 8005342:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005344:	429a      	cmp	r2, r3
 8005346:	d305      	bcc.n	8005354 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800534e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005350:	429a      	cmp	r2, r3
 8005352:	d91d      	bls.n	8005390 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8005354:	231a      	movs	r3, #26
 8005356:	2220      	movs	r2, #32
 8005358:	189b      	adds	r3, r3, r2
 800535a:	19db      	adds	r3, r3, r7
 800535c:	2201      	movs	r2, #1
 800535e:	701a      	strb	r2, [r3, #0]
 8005360:	e12b      	b.n	80055ba <UART_SetConfig+0x546>
 8005362:	46c0      	nop			; (mov r8, r8)
 8005364:	cfff69f3 	.word	0xcfff69f3
 8005368:	ffffcfff 	.word	0xffffcfff
 800536c:	40008000 	.word	0x40008000
 8005370:	11fff4ff 	.word	0x11fff4ff
 8005374:	40013800 	.word	0x40013800
 8005378:	40021000 	.word	0x40021000
 800537c:	40004400 	.word	0x40004400
 8005380:	40004800 	.word	0x40004800
 8005384:	40004c00 	.word	0x40004c00
 8005388:	00f42400 	.word	0x00f42400
 800538c:	08006008 	.word	0x08006008
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005392:	61bb      	str	r3, [r7, #24]
 8005394:	2300      	movs	r3, #0
 8005396:	61fb      	str	r3, [r7, #28]
 8005398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800539c:	4b92      	ldr	r3, [pc, #584]	; (80055e8 <UART_SetConfig+0x574>)
 800539e:	0052      	lsls	r2, r2, #1
 80053a0:	5ad3      	ldrh	r3, [r2, r3]
 80053a2:	613b      	str	r3, [r7, #16]
 80053a4:	2300      	movs	r3, #0
 80053a6:	617b      	str	r3, [r7, #20]
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	69b8      	ldr	r0, [r7, #24]
 80053ae:	69f9      	ldr	r1, [r7, #28]
 80053b0:	f7fb f842 	bl	8000438 <__aeabi_uldivmod>
 80053b4:	0002      	movs	r2, r0
 80053b6:	000b      	movs	r3, r1
 80053b8:	0e11      	lsrs	r1, r2, #24
 80053ba:	021d      	lsls	r5, r3, #8
 80053bc:	430d      	orrs	r5, r1
 80053be:	0214      	lsls	r4, r2, #8
 80053c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	085b      	lsrs	r3, r3, #1
 80053c6:	60bb      	str	r3, [r7, #8]
 80053c8:	2300      	movs	r3, #0
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	68b8      	ldr	r0, [r7, #8]
 80053ce:	68f9      	ldr	r1, [r7, #12]
 80053d0:	1900      	adds	r0, r0, r4
 80053d2:	4169      	adcs	r1, r5
 80053d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	603b      	str	r3, [r7, #0]
 80053da:	2300      	movs	r3, #0
 80053dc:	607b      	str	r3, [r7, #4]
 80053de:	683a      	ldr	r2, [r7, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f7fb f829 	bl	8000438 <__aeabi_uldivmod>
 80053e6:	0002      	movs	r2, r0
 80053e8:	000b      	movs	r3, r1
 80053ea:	0013      	movs	r3, r2
 80053ec:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80053ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053f0:	23c0      	movs	r3, #192	; 0xc0
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d309      	bcc.n	800540c <UART_SetConfig+0x398>
 80053f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053fa:	2380      	movs	r3, #128	; 0x80
 80053fc:	035b      	lsls	r3, r3, #13
 80053fe:	429a      	cmp	r2, r3
 8005400:	d204      	bcs.n	800540c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8005402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005408:	60da      	str	r2, [r3, #12]
 800540a:	e0d6      	b.n	80055ba <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 800540c:	231a      	movs	r3, #26
 800540e:	2220      	movs	r2, #32
 8005410:	189b      	adds	r3, r3, r2
 8005412:	19db      	adds	r3, r3, r7
 8005414:	2201      	movs	r2, #1
 8005416:	701a      	strb	r2, [r3, #0]
 8005418:	e0cf      	b.n	80055ba <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541c:	69da      	ldr	r2, [r3, #28]
 800541e:	2380      	movs	r3, #128	; 0x80
 8005420:	021b      	lsls	r3, r3, #8
 8005422:	429a      	cmp	r2, r3
 8005424:	d000      	beq.n	8005428 <UART_SetConfig+0x3b4>
 8005426:	e070      	b.n	800550a <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8005428:	231b      	movs	r3, #27
 800542a:	2220      	movs	r2, #32
 800542c:	189b      	adds	r3, r3, r2
 800542e:	19db      	adds	r3, r3, r7
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	2b08      	cmp	r3, #8
 8005434:	d015      	beq.n	8005462 <UART_SetConfig+0x3ee>
 8005436:	dc18      	bgt.n	800546a <UART_SetConfig+0x3f6>
 8005438:	2b04      	cmp	r3, #4
 800543a:	d00d      	beq.n	8005458 <UART_SetConfig+0x3e4>
 800543c:	dc15      	bgt.n	800546a <UART_SetConfig+0x3f6>
 800543e:	2b00      	cmp	r3, #0
 8005440:	d002      	beq.n	8005448 <UART_SetConfig+0x3d4>
 8005442:	2b02      	cmp	r3, #2
 8005444:	d005      	beq.n	8005452 <UART_SetConfig+0x3de>
 8005446:	e010      	b.n	800546a <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005448:	f7ff fbf0 	bl	8004c2c <HAL_RCC_GetPCLK1Freq>
 800544c:	0003      	movs	r3, r0
 800544e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005450:	e014      	b.n	800547c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005452:	4b66      	ldr	r3, [pc, #408]	; (80055ec <UART_SetConfig+0x578>)
 8005454:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005456:	e011      	b.n	800547c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005458:	f7ff fb5c 	bl	8004b14 <HAL_RCC_GetSysClockFreq>
 800545c:	0003      	movs	r3, r0
 800545e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005460:	e00c      	b.n	800547c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005462:	2380      	movs	r3, #128	; 0x80
 8005464:	021b      	lsls	r3, r3, #8
 8005466:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005468:	e008      	b.n	800547c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800546a:	2300      	movs	r3, #0
 800546c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800546e:	231a      	movs	r3, #26
 8005470:	2220      	movs	r2, #32
 8005472:	189b      	adds	r3, r3, r2
 8005474:	19db      	adds	r3, r3, r7
 8005476:	2201      	movs	r2, #1
 8005478:	701a      	strb	r2, [r3, #0]
        break;
 800547a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800547c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800547e:	2b00      	cmp	r3, #0
 8005480:	d100      	bne.n	8005484 <UART_SetConfig+0x410>
 8005482:	e09a      	b.n	80055ba <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005486:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005488:	4b57      	ldr	r3, [pc, #348]	; (80055e8 <UART_SetConfig+0x574>)
 800548a:	0052      	lsls	r2, r2, #1
 800548c:	5ad3      	ldrh	r3, [r2, r3]
 800548e:	0019      	movs	r1, r3
 8005490:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005492:	f7fa fe37 	bl	8000104 <__udivsi3>
 8005496:	0003      	movs	r3, r0
 8005498:	005a      	lsls	r2, r3, #1
 800549a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	085b      	lsrs	r3, r3, #1
 80054a0:	18d2      	adds	r2, r2, r3
 80054a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	0019      	movs	r1, r3
 80054a8:	0010      	movs	r0, r2
 80054aa:	f7fa fe2b 	bl	8000104 <__udivsi3>
 80054ae:	0003      	movs	r3, r0
 80054b0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b4:	2b0f      	cmp	r3, #15
 80054b6:	d921      	bls.n	80054fc <UART_SetConfig+0x488>
 80054b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054ba:	2380      	movs	r3, #128	; 0x80
 80054bc:	025b      	lsls	r3, r3, #9
 80054be:	429a      	cmp	r2, r3
 80054c0:	d21c      	bcs.n	80054fc <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c4:	b29a      	uxth	r2, r3
 80054c6:	200e      	movs	r0, #14
 80054c8:	2420      	movs	r4, #32
 80054ca:	1903      	adds	r3, r0, r4
 80054cc:	19db      	adds	r3, r3, r7
 80054ce:	210f      	movs	r1, #15
 80054d0:	438a      	bics	r2, r1
 80054d2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d6:	085b      	lsrs	r3, r3, #1
 80054d8:	b29b      	uxth	r3, r3
 80054da:	2207      	movs	r2, #7
 80054dc:	4013      	ands	r3, r2
 80054de:	b299      	uxth	r1, r3
 80054e0:	1903      	adds	r3, r0, r4
 80054e2:	19db      	adds	r3, r3, r7
 80054e4:	1902      	adds	r2, r0, r4
 80054e6:	19d2      	adds	r2, r2, r7
 80054e8:	8812      	ldrh	r2, [r2, #0]
 80054ea:	430a      	orrs	r2, r1
 80054ec:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80054ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	1902      	adds	r2, r0, r4
 80054f4:	19d2      	adds	r2, r2, r7
 80054f6:	8812      	ldrh	r2, [r2, #0]
 80054f8:	60da      	str	r2, [r3, #12]
 80054fa:	e05e      	b.n	80055ba <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80054fc:	231a      	movs	r3, #26
 80054fe:	2220      	movs	r2, #32
 8005500:	189b      	adds	r3, r3, r2
 8005502:	19db      	adds	r3, r3, r7
 8005504:	2201      	movs	r2, #1
 8005506:	701a      	strb	r2, [r3, #0]
 8005508:	e057      	b.n	80055ba <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800550a:	231b      	movs	r3, #27
 800550c:	2220      	movs	r2, #32
 800550e:	189b      	adds	r3, r3, r2
 8005510:	19db      	adds	r3, r3, r7
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	2b08      	cmp	r3, #8
 8005516:	d015      	beq.n	8005544 <UART_SetConfig+0x4d0>
 8005518:	dc18      	bgt.n	800554c <UART_SetConfig+0x4d8>
 800551a:	2b04      	cmp	r3, #4
 800551c:	d00d      	beq.n	800553a <UART_SetConfig+0x4c6>
 800551e:	dc15      	bgt.n	800554c <UART_SetConfig+0x4d8>
 8005520:	2b00      	cmp	r3, #0
 8005522:	d002      	beq.n	800552a <UART_SetConfig+0x4b6>
 8005524:	2b02      	cmp	r3, #2
 8005526:	d005      	beq.n	8005534 <UART_SetConfig+0x4c0>
 8005528:	e010      	b.n	800554c <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800552a:	f7ff fb7f 	bl	8004c2c <HAL_RCC_GetPCLK1Freq>
 800552e:	0003      	movs	r3, r0
 8005530:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005532:	e014      	b.n	800555e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005534:	4b2d      	ldr	r3, [pc, #180]	; (80055ec <UART_SetConfig+0x578>)
 8005536:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005538:	e011      	b.n	800555e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800553a:	f7ff faeb 	bl	8004b14 <HAL_RCC_GetSysClockFreq>
 800553e:	0003      	movs	r3, r0
 8005540:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005542:	e00c      	b.n	800555e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005544:	2380      	movs	r3, #128	; 0x80
 8005546:	021b      	lsls	r3, r3, #8
 8005548:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800554a:	e008      	b.n	800555e <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 800554c:	2300      	movs	r3, #0
 800554e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005550:	231a      	movs	r3, #26
 8005552:	2220      	movs	r2, #32
 8005554:	189b      	adds	r3, r3, r2
 8005556:	19db      	adds	r3, r3, r7
 8005558:	2201      	movs	r2, #1
 800555a:	701a      	strb	r2, [r3, #0]
        break;
 800555c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800555e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005560:	2b00      	cmp	r3, #0
 8005562:	d02a      	beq.n	80055ba <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005566:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005568:	4b1f      	ldr	r3, [pc, #124]	; (80055e8 <UART_SetConfig+0x574>)
 800556a:	0052      	lsls	r2, r2, #1
 800556c:	5ad3      	ldrh	r3, [r2, r3]
 800556e:	0019      	movs	r1, r3
 8005570:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005572:	f7fa fdc7 	bl	8000104 <__udivsi3>
 8005576:	0003      	movs	r3, r0
 8005578:	001a      	movs	r2, r3
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	085b      	lsrs	r3, r3, #1
 8005580:	18d2      	adds	r2, r2, r3
 8005582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	0019      	movs	r1, r3
 8005588:	0010      	movs	r0, r2
 800558a:	f7fa fdbb 	bl	8000104 <__udivsi3>
 800558e:	0003      	movs	r3, r0
 8005590:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005594:	2b0f      	cmp	r3, #15
 8005596:	d90a      	bls.n	80055ae <UART_SetConfig+0x53a>
 8005598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800559a:	2380      	movs	r3, #128	; 0x80
 800559c:	025b      	lsls	r3, r3, #9
 800559e:	429a      	cmp	r2, r3
 80055a0:	d205      	bcs.n	80055ae <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	60da      	str	r2, [r3, #12]
 80055ac:	e005      	b.n	80055ba <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80055ae:	231a      	movs	r3, #26
 80055b0:	2220      	movs	r2, #32
 80055b2:	189b      	adds	r3, r3, r2
 80055b4:	19db      	adds	r3, r3, r7
 80055b6:	2201      	movs	r2, #1
 80055b8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80055ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055bc:	226a      	movs	r2, #106	; 0x6a
 80055be:	2101      	movs	r1, #1
 80055c0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80055c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c4:	2268      	movs	r2, #104	; 0x68
 80055c6:	2101      	movs	r1, #1
 80055c8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	2200      	movs	r2, #0
 80055ce:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80055d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d2:	2200      	movs	r2, #0
 80055d4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80055d6:	231a      	movs	r3, #26
 80055d8:	2220      	movs	r2, #32
 80055da:	189b      	adds	r3, r3, r2
 80055dc:	19db      	adds	r3, r3, r7
 80055de:	781b      	ldrb	r3, [r3, #0]
}
 80055e0:	0018      	movs	r0, r3
 80055e2:	46bd      	mov	sp, r7
 80055e4:	b010      	add	sp, #64	; 0x40
 80055e6:	bdb0      	pop	{r4, r5, r7, pc}
 80055e8:	08006008 	.word	0x08006008
 80055ec:	00f42400 	.word	0x00f42400

080055f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fc:	2208      	movs	r2, #8
 80055fe:	4013      	ands	r3, r2
 8005600:	d00b      	beq.n	800561a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	4a4a      	ldr	r2, [pc, #296]	; (8005734 <UART_AdvFeatureConfig+0x144>)
 800560a:	4013      	ands	r3, r2
 800560c:	0019      	movs	r1, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	430a      	orrs	r2, r1
 8005618:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800561e:	2201      	movs	r2, #1
 8005620:	4013      	ands	r3, r2
 8005622:	d00b      	beq.n	800563c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	4a43      	ldr	r2, [pc, #268]	; (8005738 <UART_AdvFeatureConfig+0x148>)
 800562c:	4013      	ands	r3, r2
 800562e:	0019      	movs	r1, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	430a      	orrs	r2, r1
 800563a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005640:	2202      	movs	r2, #2
 8005642:	4013      	ands	r3, r2
 8005644:	d00b      	beq.n	800565e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	4a3b      	ldr	r2, [pc, #236]	; (800573c <UART_AdvFeatureConfig+0x14c>)
 800564e:	4013      	ands	r3, r2
 8005650:	0019      	movs	r1, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	430a      	orrs	r2, r1
 800565c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005662:	2204      	movs	r2, #4
 8005664:	4013      	ands	r3, r2
 8005666:	d00b      	beq.n	8005680 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	4a34      	ldr	r2, [pc, #208]	; (8005740 <UART_AdvFeatureConfig+0x150>)
 8005670:	4013      	ands	r3, r2
 8005672:	0019      	movs	r1, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	430a      	orrs	r2, r1
 800567e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005684:	2210      	movs	r2, #16
 8005686:	4013      	ands	r3, r2
 8005688:	d00b      	beq.n	80056a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	4a2c      	ldr	r2, [pc, #176]	; (8005744 <UART_AdvFeatureConfig+0x154>)
 8005692:	4013      	ands	r3, r2
 8005694:	0019      	movs	r1, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	430a      	orrs	r2, r1
 80056a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a6:	2220      	movs	r2, #32
 80056a8:	4013      	ands	r3, r2
 80056aa:	d00b      	beq.n	80056c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	4a25      	ldr	r2, [pc, #148]	; (8005748 <UART_AdvFeatureConfig+0x158>)
 80056b4:	4013      	ands	r3, r2
 80056b6:	0019      	movs	r1, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	430a      	orrs	r2, r1
 80056c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c8:	2240      	movs	r2, #64	; 0x40
 80056ca:	4013      	ands	r3, r2
 80056cc:	d01d      	beq.n	800570a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	4a1d      	ldr	r2, [pc, #116]	; (800574c <UART_AdvFeatureConfig+0x15c>)
 80056d6:	4013      	ands	r3, r2
 80056d8:	0019      	movs	r1, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	430a      	orrs	r2, r1
 80056e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056ea:	2380      	movs	r3, #128	; 0x80
 80056ec:	035b      	lsls	r3, r3, #13
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d10b      	bne.n	800570a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	4a15      	ldr	r2, [pc, #84]	; (8005750 <UART_AdvFeatureConfig+0x160>)
 80056fa:	4013      	ands	r3, r2
 80056fc:	0019      	movs	r1, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	430a      	orrs	r2, r1
 8005708:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570e:	2280      	movs	r2, #128	; 0x80
 8005710:	4013      	ands	r3, r2
 8005712:	d00b      	beq.n	800572c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	4a0e      	ldr	r2, [pc, #56]	; (8005754 <UART_AdvFeatureConfig+0x164>)
 800571c:	4013      	ands	r3, r2
 800571e:	0019      	movs	r1, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	430a      	orrs	r2, r1
 800572a:	605a      	str	r2, [r3, #4]
  }
}
 800572c:	46c0      	nop			; (mov r8, r8)
 800572e:	46bd      	mov	sp, r7
 8005730:	b002      	add	sp, #8
 8005732:	bd80      	pop	{r7, pc}
 8005734:	ffff7fff 	.word	0xffff7fff
 8005738:	fffdffff 	.word	0xfffdffff
 800573c:	fffeffff 	.word	0xfffeffff
 8005740:	fffbffff 	.word	0xfffbffff
 8005744:	ffffefff 	.word	0xffffefff
 8005748:	ffffdfff 	.word	0xffffdfff
 800574c:	ffefffff 	.word	0xffefffff
 8005750:	ff9fffff 	.word	0xff9fffff
 8005754:	fff7ffff 	.word	0xfff7ffff

08005758 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b092      	sub	sp, #72	; 0x48
 800575c:	af02      	add	r7, sp, #8
 800575e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2290      	movs	r2, #144	; 0x90
 8005764:	2100      	movs	r1, #0
 8005766:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005768:	f7fd fcb6 	bl	80030d8 <HAL_GetTick>
 800576c:	0003      	movs	r3, r0
 800576e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2208      	movs	r2, #8
 8005778:	4013      	ands	r3, r2
 800577a:	2b08      	cmp	r3, #8
 800577c:	d12d      	bne.n	80057da <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800577e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005780:	2280      	movs	r2, #128	; 0x80
 8005782:	0391      	lsls	r1, r2, #14
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	4a47      	ldr	r2, [pc, #284]	; (80058a4 <UART_CheckIdleState+0x14c>)
 8005788:	9200      	str	r2, [sp, #0]
 800578a:	2200      	movs	r2, #0
 800578c:	f000 f88e 	bl	80058ac <UART_WaitOnFlagUntilTimeout>
 8005790:	1e03      	subs	r3, r0, #0
 8005792:	d022      	beq.n	80057da <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005794:	f3ef 8310 	mrs	r3, PRIMASK
 8005798:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800579a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800579c:	63bb      	str	r3, [r7, #56]	; 0x38
 800579e:	2301      	movs	r3, #1
 80057a0:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a4:	f383 8810 	msr	PRIMASK, r3
}
 80057a8:	46c0      	nop			; (mov r8, r8)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2180      	movs	r1, #128	; 0x80
 80057b6:	438a      	bics	r2, r1
 80057b8:	601a      	str	r2, [r3, #0]
 80057ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c0:	f383 8810 	msr	PRIMASK, r3
}
 80057c4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2288      	movs	r2, #136	; 0x88
 80057ca:	2120      	movs	r1, #32
 80057cc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2284      	movs	r2, #132	; 0x84
 80057d2:	2100      	movs	r1, #0
 80057d4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e060      	b.n	800589c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2204      	movs	r2, #4
 80057e2:	4013      	ands	r3, r2
 80057e4:	2b04      	cmp	r3, #4
 80057e6:	d146      	bne.n	8005876 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ea:	2280      	movs	r2, #128	; 0x80
 80057ec:	03d1      	lsls	r1, r2, #15
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	4a2c      	ldr	r2, [pc, #176]	; (80058a4 <UART_CheckIdleState+0x14c>)
 80057f2:	9200      	str	r2, [sp, #0]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f000 f859 	bl	80058ac <UART_WaitOnFlagUntilTimeout>
 80057fa:	1e03      	subs	r3, r0, #0
 80057fc:	d03b      	beq.n	8005876 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057fe:	f3ef 8310 	mrs	r3, PRIMASK
 8005802:	60fb      	str	r3, [r7, #12]
  return(result);
 8005804:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005806:	637b      	str	r3, [r7, #52]	; 0x34
 8005808:	2301      	movs	r3, #1
 800580a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	f383 8810 	msr	PRIMASK, r3
}
 8005812:	46c0      	nop			; (mov r8, r8)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4922      	ldr	r1, [pc, #136]	; (80058a8 <UART_CheckIdleState+0x150>)
 8005820:	400a      	ands	r2, r1
 8005822:	601a      	str	r2, [r3, #0]
 8005824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005826:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	f383 8810 	msr	PRIMASK, r3
}
 800582e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005830:	f3ef 8310 	mrs	r3, PRIMASK
 8005834:	61bb      	str	r3, [r7, #24]
  return(result);
 8005836:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005838:	633b      	str	r3, [r7, #48]	; 0x30
 800583a:	2301      	movs	r3, #1
 800583c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	f383 8810 	msr	PRIMASK, r3
}
 8005844:	46c0      	nop			; (mov r8, r8)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	689a      	ldr	r2, [r3, #8]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2101      	movs	r1, #1
 8005852:	438a      	bics	r2, r1
 8005854:	609a      	str	r2, [r3, #8]
 8005856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005858:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800585a:	6a3b      	ldr	r3, [r7, #32]
 800585c:	f383 8810 	msr	PRIMASK, r3
}
 8005860:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	228c      	movs	r2, #140	; 0x8c
 8005866:	2120      	movs	r1, #32
 8005868:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2284      	movs	r2, #132	; 0x84
 800586e:	2100      	movs	r1, #0
 8005870:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e012      	b.n	800589c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2288      	movs	r2, #136	; 0x88
 800587a:	2120      	movs	r1, #32
 800587c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	228c      	movs	r2, #140	; 0x8c
 8005882:	2120      	movs	r1, #32
 8005884:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2284      	movs	r2, #132	; 0x84
 8005896:	2100      	movs	r1, #0
 8005898:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	0018      	movs	r0, r3
 800589e:	46bd      	mov	sp, r7
 80058a0:	b010      	add	sp, #64	; 0x40
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	01ffffff 	.word	0x01ffffff
 80058a8:	fffffedf 	.word	0xfffffedf

080058ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	603b      	str	r3, [r7, #0]
 80058b8:	1dfb      	adds	r3, r7, #7
 80058ba:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058bc:	e051      	b.n	8005962 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	3301      	adds	r3, #1
 80058c2:	d04e      	beq.n	8005962 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058c4:	f7fd fc08 	bl	80030d8 <HAL_GetTick>
 80058c8:	0002      	movs	r2, r0
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	69ba      	ldr	r2, [r7, #24]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d302      	bcc.n	80058da <UART_WaitOnFlagUntilTimeout+0x2e>
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d101      	bne.n	80058de <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e051      	b.n	8005982 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2204      	movs	r2, #4
 80058e6:	4013      	ands	r3, r2
 80058e8:	d03b      	beq.n	8005962 <UART_WaitOnFlagUntilTimeout+0xb6>
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	2b80      	cmp	r3, #128	; 0x80
 80058ee:	d038      	beq.n	8005962 <UART_WaitOnFlagUntilTimeout+0xb6>
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	2b40      	cmp	r3, #64	; 0x40
 80058f4:	d035      	beq.n	8005962 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	69db      	ldr	r3, [r3, #28]
 80058fc:	2208      	movs	r2, #8
 80058fe:	4013      	ands	r3, r2
 8005900:	2b08      	cmp	r3, #8
 8005902:	d111      	bne.n	8005928 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2208      	movs	r2, #8
 800590a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	0018      	movs	r0, r3
 8005910:	f000 f83c 	bl	800598c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2290      	movs	r2, #144	; 0x90
 8005918:	2108      	movs	r1, #8
 800591a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2284      	movs	r2, #132	; 0x84
 8005920:	2100      	movs	r1, #0
 8005922:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e02c      	b.n	8005982 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	69da      	ldr	r2, [r3, #28]
 800592e:	2380      	movs	r3, #128	; 0x80
 8005930:	011b      	lsls	r3, r3, #4
 8005932:	401a      	ands	r2, r3
 8005934:	2380      	movs	r3, #128	; 0x80
 8005936:	011b      	lsls	r3, r3, #4
 8005938:	429a      	cmp	r2, r3
 800593a:	d112      	bne.n	8005962 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2280      	movs	r2, #128	; 0x80
 8005942:	0112      	lsls	r2, r2, #4
 8005944:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	0018      	movs	r0, r3
 800594a:	f000 f81f 	bl	800598c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2290      	movs	r2, #144	; 0x90
 8005952:	2120      	movs	r1, #32
 8005954:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2284      	movs	r2, #132	; 0x84
 800595a:	2100      	movs	r1, #0
 800595c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e00f      	b.n	8005982 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	69db      	ldr	r3, [r3, #28]
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	4013      	ands	r3, r2
 800596c:	68ba      	ldr	r2, [r7, #8]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	425a      	negs	r2, r3
 8005972:	4153      	adcs	r3, r2
 8005974:	b2db      	uxtb	r3, r3
 8005976:	001a      	movs	r2, r3
 8005978:	1dfb      	adds	r3, r7, #7
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	429a      	cmp	r2, r3
 800597e:	d09e      	beq.n	80058be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	0018      	movs	r0, r3
 8005984:	46bd      	mov	sp, r7
 8005986:	b004      	add	sp, #16
 8005988:	bd80      	pop	{r7, pc}
	...

0800598c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b08e      	sub	sp, #56	; 0x38
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005994:	f3ef 8310 	mrs	r3, PRIMASK
 8005998:	617b      	str	r3, [r7, #20]
  return(result);
 800599a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800599c:	637b      	str	r3, [r7, #52]	; 0x34
 800599e:	2301      	movs	r3, #1
 80059a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	f383 8810 	msr	PRIMASK, r3
}
 80059a8:	46c0      	nop			; (mov r8, r8)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4926      	ldr	r1, [pc, #152]	; (8005a50 <UART_EndRxTransfer+0xc4>)
 80059b6:	400a      	ands	r2, r1
 80059b8:	601a      	str	r2, [r3, #0]
 80059ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	f383 8810 	msr	PRIMASK, r3
}
 80059c4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059c6:	f3ef 8310 	mrs	r3, PRIMASK
 80059ca:	623b      	str	r3, [r7, #32]
  return(result);
 80059cc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80059ce:	633b      	str	r3, [r7, #48]	; 0x30
 80059d0:	2301      	movs	r3, #1
 80059d2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d6:	f383 8810 	msr	PRIMASK, r3
}
 80059da:	46c0      	nop			; (mov r8, r8)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	689a      	ldr	r2, [r3, #8]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	491b      	ldr	r1, [pc, #108]	; (8005a54 <UART_EndRxTransfer+0xc8>)
 80059e8:	400a      	ands	r2, r1
 80059ea:	609a      	str	r2, [r3, #8]
 80059ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ee:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f2:	f383 8810 	msr	PRIMASK, r3
}
 80059f6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d118      	bne.n	8005a32 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a00:	f3ef 8310 	mrs	r3, PRIMASK
 8005a04:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a06:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f383 8810 	msr	PRIMASK, r3
}
 8005a14:	46c0      	nop			; (mov r8, r8)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2110      	movs	r1, #16
 8005a22:	438a      	bics	r2, r1
 8005a24:	601a      	str	r2, [r3, #0]
 8005a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	f383 8810 	msr	PRIMASK, r3
}
 8005a30:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	228c      	movs	r2, #140	; 0x8c
 8005a36:	2120      	movs	r1, #32
 8005a38:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005a46:	46c0      	nop			; (mov r8, r8)
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	b00e      	add	sp, #56	; 0x38
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	46c0      	nop			; (mov r8, r8)
 8005a50:	fffffedf 	.word	0xfffffedf
 8005a54:	effffffe 	.word	0xeffffffe

08005a58 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2284      	movs	r2, #132	; 0x84
 8005a64:	5c9b      	ldrb	r3, [r3, r2]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d101      	bne.n	8005a6e <HAL_UARTEx_DisableFifoMode+0x16>
 8005a6a:	2302      	movs	r3, #2
 8005a6c:	e027      	b.n	8005abe <HAL_UARTEx_DisableFifoMode+0x66>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2284      	movs	r2, #132	; 0x84
 8005a72:	2101      	movs	r1, #1
 8005a74:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2288      	movs	r2, #136	; 0x88
 8005a7a:	2124      	movs	r1, #36	; 0x24
 8005a7c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2101      	movs	r1, #1
 8005a92:	438a      	bics	r2, r1
 8005a94:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	4a0b      	ldr	r2, [pc, #44]	; (8005ac8 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2288      	movs	r2, #136	; 0x88
 8005ab0:	2120      	movs	r1, #32
 8005ab2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2284      	movs	r2, #132	; 0x84
 8005ab8:	2100      	movs	r1, #0
 8005aba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	0018      	movs	r0, r3
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	b004      	add	sp, #16
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	46c0      	nop			; (mov r8, r8)
 8005ac8:	dfffffff 	.word	0xdfffffff

08005acc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2284      	movs	r2, #132	; 0x84
 8005ada:	5c9b      	ldrb	r3, [r3, r2]
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d101      	bne.n	8005ae4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	e02e      	b.n	8005b42 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2284      	movs	r2, #132	; 0x84
 8005ae8:	2101      	movs	r1, #1
 8005aea:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2288      	movs	r2, #136	; 0x88
 8005af0:	2124      	movs	r1, #36	; 0x24
 8005af2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2101      	movs	r1, #1
 8005b08:	438a      	bics	r2, r1
 8005b0a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	00db      	lsls	r3, r3, #3
 8005b14:	08d9      	lsrs	r1, r3, #3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	683a      	ldr	r2, [r7, #0]
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	0018      	movs	r0, r3
 8005b24:	f000 f854 	bl	8005bd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2288      	movs	r2, #136	; 0x88
 8005b34:	2120      	movs	r1, #32
 8005b36:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2284      	movs	r2, #132	; 0x84
 8005b3c:	2100      	movs	r1, #0
 8005b3e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	0018      	movs	r0, r3
 8005b44:	46bd      	mov	sp, r7
 8005b46:	b004      	add	sp, #16
 8005b48:	bd80      	pop	{r7, pc}
	...

08005b4c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2284      	movs	r2, #132	; 0x84
 8005b5a:	5c9b      	ldrb	r3, [r3, r2]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d101      	bne.n	8005b64 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005b60:	2302      	movs	r3, #2
 8005b62:	e02f      	b.n	8005bc4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2284      	movs	r2, #132	; 0x84
 8005b68:	2101      	movs	r1, #1
 8005b6a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2288      	movs	r2, #136	; 0x88
 8005b70:	2124      	movs	r1, #36	; 0x24
 8005b72:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2101      	movs	r1, #1
 8005b88:	438a      	bics	r2, r1
 8005b8a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	4a0e      	ldr	r2, [pc, #56]	; (8005bcc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005b94:	4013      	ands	r3, r2
 8005b96:	0019      	movs	r1, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	683a      	ldr	r2, [r7, #0]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	0018      	movs	r0, r3
 8005ba6:	f000 f813 	bl	8005bd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2288      	movs	r2, #136	; 0x88
 8005bb6:	2120      	movs	r1, #32
 8005bb8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2284      	movs	r2, #132	; 0x84
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	0018      	movs	r0, r3
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	b004      	add	sp, #16
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	f1ffffff 	.word	0xf1ffffff

08005bd0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d108      	bne.n	8005bf2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	226a      	movs	r2, #106	; 0x6a
 8005be4:	2101      	movs	r1, #1
 8005be6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2268      	movs	r2, #104	; 0x68
 8005bec:	2101      	movs	r1, #1
 8005bee:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005bf0:	e043      	b.n	8005c7a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005bf2:	260f      	movs	r6, #15
 8005bf4:	19bb      	adds	r3, r7, r6
 8005bf6:	2208      	movs	r2, #8
 8005bf8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005bfa:	200e      	movs	r0, #14
 8005bfc:	183b      	adds	r3, r7, r0
 8005bfe:	2208      	movs	r2, #8
 8005c00:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	0e5b      	lsrs	r3, r3, #25
 8005c0a:	b2da      	uxtb	r2, r3
 8005c0c:	240d      	movs	r4, #13
 8005c0e:	193b      	adds	r3, r7, r4
 8005c10:	2107      	movs	r1, #7
 8005c12:	400a      	ands	r2, r1
 8005c14:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	0f5b      	lsrs	r3, r3, #29
 8005c1e:	b2da      	uxtb	r2, r3
 8005c20:	250c      	movs	r5, #12
 8005c22:	197b      	adds	r3, r7, r5
 8005c24:	2107      	movs	r1, #7
 8005c26:	400a      	ands	r2, r1
 8005c28:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c2a:	183b      	adds	r3, r7, r0
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	197a      	adds	r2, r7, r5
 8005c30:	7812      	ldrb	r2, [r2, #0]
 8005c32:	4914      	ldr	r1, [pc, #80]	; (8005c84 <UARTEx_SetNbDataToProcess+0xb4>)
 8005c34:	5c8a      	ldrb	r2, [r1, r2]
 8005c36:	435a      	muls	r2, r3
 8005c38:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005c3a:	197b      	adds	r3, r7, r5
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	4a12      	ldr	r2, [pc, #72]	; (8005c88 <UARTEx_SetNbDataToProcess+0xb8>)
 8005c40:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c42:	0019      	movs	r1, r3
 8005c44:	f7fa fae8 	bl	8000218 <__divsi3>
 8005c48:	0003      	movs	r3, r0
 8005c4a:	b299      	uxth	r1, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	226a      	movs	r2, #106	; 0x6a
 8005c50:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c52:	19bb      	adds	r3, r7, r6
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	193a      	adds	r2, r7, r4
 8005c58:	7812      	ldrb	r2, [r2, #0]
 8005c5a:	490a      	ldr	r1, [pc, #40]	; (8005c84 <UARTEx_SetNbDataToProcess+0xb4>)
 8005c5c:	5c8a      	ldrb	r2, [r1, r2]
 8005c5e:	435a      	muls	r2, r3
 8005c60:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005c62:	193b      	adds	r3, r7, r4
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	4a08      	ldr	r2, [pc, #32]	; (8005c88 <UARTEx_SetNbDataToProcess+0xb8>)
 8005c68:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c6a:	0019      	movs	r1, r3
 8005c6c:	f7fa fad4 	bl	8000218 <__divsi3>
 8005c70:	0003      	movs	r3, r0
 8005c72:	b299      	uxth	r1, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2268      	movs	r2, #104	; 0x68
 8005c78:	5299      	strh	r1, [r3, r2]
}
 8005c7a:	46c0      	nop			; (mov r8, r8)
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	b005      	add	sp, #20
 8005c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c82:	46c0      	nop			; (mov r8, r8)
 8005c84:	08006020 	.word	0x08006020
 8005c88:	08006028 	.word	0x08006028

08005c8c <malloc>:
 8005c8c:	b510      	push	{r4, lr}
 8005c8e:	4b03      	ldr	r3, [pc, #12]	; (8005c9c <malloc+0x10>)
 8005c90:	0001      	movs	r1, r0
 8005c92:	6818      	ldr	r0, [r3, #0]
 8005c94:	f000 f830 	bl	8005cf8 <_malloc_r>
 8005c98:	bd10      	pop	{r4, pc}
 8005c9a:	46c0      	nop			; (mov r8, r8)
 8005c9c:	20000058 	.word	0x20000058

08005ca0 <free>:
 8005ca0:	b510      	push	{r4, lr}
 8005ca2:	4b03      	ldr	r3, [pc, #12]	; (8005cb0 <free+0x10>)
 8005ca4:	0001      	movs	r1, r0
 8005ca6:	6818      	ldr	r0, [r3, #0]
 8005ca8:	f000 f908 	bl	8005ebc <_free_r>
 8005cac:	bd10      	pop	{r4, pc}
 8005cae:	46c0      	nop			; (mov r8, r8)
 8005cb0:	20000058 	.word	0x20000058

08005cb4 <sbrk_aligned>:
 8005cb4:	b570      	push	{r4, r5, r6, lr}
 8005cb6:	4e0f      	ldr	r6, [pc, #60]	; (8005cf4 <sbrk_aligned+0x40>)
 8005cb8:	000d      	movs	r5, r1
 8005cba:	6831      	ldr	r1, [r6, #0]
 8005cbc:	0004      	movs	r4, r0
 8005cbe:	2900      	cmp	r1, #0
 8005cc0:	d102      	bne.n	8005cc8 <sbrk_aligned+0x14>
 8005cc2:	f000 f8b3 	bl	8005e2c <_sbrk_r>
 8005cc6:	6030      	str	r0, [r6, #0]
 8005cc8:	0029      	movs	r1, r5
 8005cca:	0020      	movs	r0, r4
 8005ccc:	f000 f8ae 	bl	8005e2c <_sbrk_r>
 8005cd0:	1c43      	adds	r3, r0, #1
 8005cd2:	d00a      	beq.n	8005cea <sbrk_aligned+0x36>
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	1cc5      	adds	r5, r0, #3
 8005cd8:	439d      	bics	r5, r3
 8005cda:	42a8      	cmp	r0, r5
 8005cdc:	d007      	beq.n	8005cee <sbrk_aligned+0x3a>
 8005cde:	1a29      	subs	r1, r5, r0
 8005ce0:	0020      	movs	r0, r4
 8005ce2:	f000 f8a3 	bl	8005e2c <_sbrk_r>
 8005ce6:	3001      	adds	r0, #1
 8005ce8:	d101      	bne.n	8005cee <sbrk_aligned+0x3a>
 8005cea:	2501      	movs	r5, #1
 8005cec:	426d      	negs	r5, r5
 8005cee:	0028      	movs	r0, r5
 8005cf0:	bd70      	pop	{r4, r5, r6, pc}
 8005cf2:	46c0      	nop			; (mov r8, r8)
 8005cf4:	200001c8 	.word	0x200001c8

08005cf8 <_malloc_r>:
 8005cf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cfa:	2203      	movs	r2, #3
 8005cfc:	1ccb      	adds	r3, r1, #3
 8005cfe:	4393      	bics	r3, r2
 8005d00:	3308      	adds	r3, #8
 8005d02:	0006      	movs	r6, r0
 8005d04:	001f      	movs	r7, r3
 8005d06:	2b0c      	cmp	r3, #12
 8005d08:	d238      	bcs.n	8005d7c <_malloc_r+0x84>
 8005d0a:	270c      	movs	r7, #12
 8005d0c:	42b9      	cmp	r1, r7
 8005d0e:	d837      	bhi.n	8005d80 <_malloc_r+0x88>
 8005d10:	0030      	movs	r0, r6
 8005d12:	f000 f873 	bl	8005dfc <__malloc_lock>
 8005d16:	4b38      	ldr	r3, [pc, #224]	; (8005df8 <_malloc_r+0x100>)
 8005d18:	9300      	str	r3, [sp, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	001c      	movs	r4, r3
 8005d1e:	2c00      	cmp	r4, #0
 8005d20:	d133      	bne.n	8005d8a <_malloc_r+0x92>
 8005d22:	0039      	movs	r1, r7
 8005d24:	0030      	movs	r0, r6
 8005d26:	f7ff ffc5 	bl	8005cb4 <sbrk_aligned>
 8005d2a:	0004      	movs	r4, r0
 8005d2c:	1c43      	adds	r3, r0, #1
 8005d2e:	d15e      	bne.n	8005dee <_malloc_r+0xf6>
 8005d30:	9b00      	ldr	r3, [sp, #0]
 8005d32:	681c      	ldr	r4, [r3, #0]
 8005d34:	0025      	movs	r5, r4
 8005d36:	2d00      	cmp	r5, #0
 8005d38:	d14e      	bne.n	8005dd8 <_malloc_r+0xe0>
 8005d3a:	2c00      	cmp	r4, #0
 8005d3c:	d051      	beq.n	8005de2 <_malloc_r+0xea>
 8005d3e:	6823      	ldr	r3, [r4, #0]
 8005d40:	0029      	movs	r1, r5
 8005d42:	18e3      	adds	r3, r4, r3
 8005d44:	0030      	movs	r0, r6
 8005d46:	9301      	str	r3, [sp, #4]
 8005d48:	f000 f870 	bl	8005e2c <_sbrk_r>
 8005d4c:	9b01      	ldr	r3, [sp, #4]
 8005d4e:	4283      	cmp	r3, r0
 8005d50:	d147      	bne.n	8005de2 <_malloc_r+0xea>
 8005d52:	6823      	ldr	r3, [r4, #0]
 8005d54:	0030      	movs	r0, r6
 8005d56:	1aff      	subs	r7, r7, r3
 8005d58:	0039      	movs	r1, r7
 8005d5a:	f7ff ffab 	bl	8005cb4 <sbrk_aligned>
 8005d5e:	3001      	adds	r0, #1
 8005d60:	d03f      	beq.n	8005de2 <_malloc_r+0xea>
 8005d62:	6823      	ldr	r3, [r4, #0]
 8005d64:	19db      	adds	r3, r3, r7
 8005d66:	6023      	str	r3, [r4, #0]
 8005d68:	9b00      	ldr	r3, [sp, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d040      	beq.n	8005df2 <_malloc_r+0xfa>
 8005d70:	685a      	ldr	r2, [r3, #4]
 8005d72:	42a2      	cmp	r2, r4
 8005d74:	d133      	bne.n	8005dde <_malloc_r+0xe6>
 8005d76:	2200      	movs	r2, #0
 8005d78:	605a      	str	r2, [r3, #4]
 8005d7a:	e014      	b.n	8005da6 <_malloc_r+0xae>
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	dac5      	bge.n	8005d0c <_malloc_r+0x14>
 8005d80:	230c      	movs	r3, #12
 8005d82:	2500      	movs	r5, #0
 8005d84:	6033      	str	r3, [r6, #0]
 8005d86:	0028      	movs	r0, r5
 8005d88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005d8a:	6821      	ldr	r1, [r4, #0]
 8005d8c:	1bc9      	subs	r1, r1, r7
 8005d8e:	d420      	bmi.n	8005dd2 <_malloc_r+0xda>
 8005d90:	290b      	cmp	r1, #11
 8005d92:	d918      	bls.n	8005dc6 <_malloc_r+0xce>
 8005d94:	19e2      	adds	r2, r4, r7
 8005d96:	6027      	str	r7, [r4, #0]
 8005d98:	42a3      	cmp	r3, r4
 8005d9a:	d112      	bne.n	8005dc2 <_malloc_r+0xca>
 8005d9c:	9b00      	ldr	r3, [sp, #0]
 8005d9e:	601a      	str	r2, [r3, #0]
 8005da0:	6863      	ldr	r3, [r4, #4]
 8005da2:	6011      	str	r1, [r2, #0]
 8005da4:	6053      	str	r3, [r2, #4]
 8005da6:	0030      	movs	r0, r6
 8005da8:	0025      	movs	r5, r4
 8005daa:	f000 f82f 	bl	8005e0c <__malloc_unlock>
 8005dae:	2207      	movs	r2, #7
 8005db0:	350b      	adds	r5, #11
 8005db2:	1d23      	adds	r3, r4, #4
 8005db4:	4395      	bics	r5, r2
 8005db6:	1aea      	subs	r2, r5, r3
 8005db8:	429d      	cmp	r5, r3
 8005dba:	d0e4      	beq.n	8005d86 <_malloc_r+0x8e>
 8005dbc:	1b5b      	subs	r3, r3, r5
 8005dbe:	50a3      	str	r3, [r4, r2]
 8005dc0:	e7e1      	b.n	8005d86 <_malloc_r+0x8e>
 8005dc2:	605a      	str	r2, [r3, #4]
 8005dc4:	e7ec      	b.n	8005da0 <_malloc_r+0xa8>
 8005dc6:	6862      	ldr	r2, [r4, #4]
 8005dc8:	42a3      	cmp	r3, r4
 8005dca:	d1d5      	bne.n	8005d78 <_malloc_r+0x80>
 8005dcc:	9b00      	ldr	r3, [sp, #0]
 8005dce:	601a      	str	r2, [r3, #0]
 8005dd0:	e7e9      	b.n	8005da6 <_malloc_r+0xae>
 8005dd2:	0023      	movs	r3, r4
 8005dd4:	6864      	ldr	r4, [r4, #4]
 8005dd6:	e7a2      	b.n	8005d1e <_malloc_r+0x26>
 8005dd8:	002c      	movs	r4, r5
 8005dda:	686d      	ldr	r5, [r5, #4]
 8005ddc:	e7ab      	b.n	8005d36 <_malloc_r+0x3e>
 8005dde:	0013      	movs	r3, r2
 8005de0:	e7c4      	b.n	8005d6c <_malloc_r+0x74>
 8005de2:	230c      	movs	r3, #12
 8005de4:	0030      	movs	r0, r6
 8005de6:	6033      	str	r3, [r6, #0]
 8005de8:	f000 f810 	bl	8005e0c <__malloc_unlock>
 8005dec:	e7cb      	b.n	8005d86 <_malloc_r+0x8e>
 8005dee:	6027      	str	r7, [r4, #0]
 8005df0:	e7d9      	b.n	8005da6 <_malloc_r+0xae>
 8005df2:	605b      	str	r3, [r3, #4]
 8005df4:	deff      	udf	#255	; 0xff
 8005df6:	46c0      	nop			; (mov r8, r8)
 8005df8:	200001c4 	.word	0x200001c4

08005dfc <__malloc_lock>:
 8005dfc:	b510      	push	{r4, lr}
 8005dfe:	4802      	ldr	r0, [pc, #8]	; (8005e08 <__malloc_lock+0xc>)
 8005e00:	f000 f850 	bl	8005ea4 <__retarget_lock_acquire_recursive>
 8005e04:	bd10      	pop	{r4, pc}
 8005e06:	46c0      	nop			; (mov r8, r8)
 8005e08:	20000308 	.word	0x20000308

08005e0c <__malloc_unlock>:
 8005e0c:	b510      	push	{r4, lr}
 8005e0e:	4802      	ldr	r0, [pc, #8]	; (8005e18 <__malloc_unlock+0xc>)
 8005e10:	f000 f849 	bl	8005ea6 <__retarget_lock_release_recursive>
 8005e14:	bd10      	pop	{r4, pc}
 8005e16:	46c0      	nop			; (mov r8, r8)
 8005e18:	20000308 	.word	0x20000308

08005e1c <memset>:
 8005e1c:	0003      	movs	r3, r0
 8005e1e:	1882      	adds	r2, r0, r2
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d100      	bne.n	8005e26 <memset+0xa>
 8005e24:	4770      	bx	lr
 8005e26:	7019      	strb	r1, [r3, #0]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	e7f9      	b.n	8005e20 <memset+0x4>

08005e2c <_sbrk_r>:
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	b570      	push	{r4, r5, r6, lr}
 8005e30:	4d06      	ldr	r5, [pc, #24]	; (8005e4c <_sbrk_r+0x20>)
 8005e32:	0004      	movs	r4, r0
 8005e34:	0008      	movs	r0, r1
 8005e36:	602b      	str	r3, [r5, #0]
 8005e38:	f7fd f86c 	bl	8002f14 <_sbrk>
 8005e3c:	1c43      	adds	r3, r0, #1
 8005e3e:	d103      	bne.n	8005e48 <_sbrk_r+0x1c>
 8005e40:	682b      	ldr	r3, [r5, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d000      	beq.n	8005e48 <_sbrk_r+0x1c>
 8005e46:	6023      	str	r3, [r4, #0]
 8005e48:	bd70      	pop	{r4, r5, r6, pc}
 8005e4a:	46c0      	nop			; (mov r8, r8)
 8005e4c:	20000304 	.word	0x20000304

08005e50 <__errno>:
 8005e50:	4b01      	ldr	r3, [pc, #4]	; (8005e58 <__errno+0x8>)
 8005e52:	6818      	ldr	r0, [r3, #0]
 8005e54:	4770      	bx	lr
 8005e56:	46c0      	nop			; (mov r8, r8)
 8005e58:	20000058 	.word	0x20000058

08005e5c <__libc_init_array>:
 8005e5c:	b570      	push	{r4, r5, r6, lr}
 8005e5e:	2600      	movs	r6, #0
 8005e60:	4c0c      	ldr	r4, [pc, #48]	; (8005e94 <__libc_init_array+0x38>)
 8005e62:	4d0d      	ldr	r5, [pc, #52]	; (8005e98 <__libc_init_array+0x3c>)
 8005e64:	1b64      	subs	r4, r4, r5
 8005e66:	10a4      	asrs	r4, r4, #2
 8005e68:	42a6      	cmp	r6, r4
 8005e6a:	d109      	bne.n	8005e80 <__libc_init_array+0x24>
 8005e6c:	2600      	movs	r6, #0
 8005e6e:	f000 f86f 	bl	8005f50 <_init>
 8005e72:	4c0a      	ldr	r4, [pc, #40]	; (8005e9c <__libc_init_array+0x40>)
 8005e74:	4d0a      	ldr	r5, [pc, #40]	; (8005ea0 <__libc_init_array+0x44>)
 8005e76:	1b64      	subs	r4, r4, r5
 8005e78:	10a4      	asrs	r4, r4, #2
 8005e7a:	42a6      	cmp	r6, r4
 8005e7c:	d105      	bne.n	8005e8a <__libc_init_array+0x2e>
 8005e7e:	bd70      	pop	{r4, r5, r6, pc}
 8005e80:	00b3      	lsls	r3, r6, #2
 8005e82:	58eb      	ldr	r3, [r5, r3]
 8005e84:	4798      	blx	r3
 8005e86:	3601      	adds	r6, #1
 8005e88:	e7ee      	b.n	8005e68 <__libc_init_array+0xc>
 8005e8a:	00b3      	lsls	r3, r6, #2
 8005e8c:	58eb      	ldr	r3, [r5, r3]
 8005e8e:	4798      	blx	r3
 8005e90:	3601      	adds	r6, #1
 8005e92:	e7f2      	b.n	8005e7a <__libc_init_array+0x1e>
 8005e94:	08006038 	.word	0x08006038
 8005e98:	08006038 	.word	0x08006038
 8005e9c:	0800603c 	.word	0x0800603c
 8005ea0:	08006038 	.word	0x08006038

08005ea4 <__retarget_lock_acquire_recursive>:
 8005ea4:	4770      	bx	lr

08005ea6 <__retarget_lock_release_recursive>:
 8005ea6:	4770      	bx	lr

08005ea8 <memcpy>:
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	b510      	push	{r4, lr}
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d100      	bne.n	8005eb2 <memcpy+0xa>
 8005eb0:	bd10      	pop	{r4, pc}
 8005eb2:	5ccc      	ldrb	r4, [r1, r3]
 8005eb4:	54c4      	strb	r4, [r0, r3]
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	e7f8      	b.n	8005eac <memcpy+0x4>
	...

08005ebc <_free_r>:
 8005ebc:	b570      	push	{r4, r5, r6, lr}
 8005ebe:	0005      	movs	r5, r0
 8005ec0:	2900      	cmp	r1, #0
 8005ec2:	d010      	beq.n	8005ee6 <_free_r+0x2a>
 8005ec4:	1f0c      	subs	r4, r1, #4
 8005ec6:	6823      	ldr	r3, [r4, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	da00      	bge.n	8005ece <_free_r+0x12>
 8005ecc:	18e4      	adds	r4, r4, r3
 8005ece:	0028      	movs	r0, r5
 8005ed0:	f7ff ff94 	bl	8005dfc <__malloc_lock>
 8005ed4:	4a1d      	ldr	r2, [pc, #116]	; (8005f4c <_free_r+0x90>)
 8005ed6:	6813      	ldr	r3, [r2, #0]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d105      	bne.n	8005ee8 <_free_r+0x2c>
 8005edc:	6063      	str	r3, [r4, #4]
 8005ede:	6014      	str	r4, [r2, #0]
 8005ee0:	0028      	movs	r0, r5
 8005ee2:	f7ff ff93 	bl	8005e0c <__malloc_unlock>
 8005ee6:	bd70      	pop	{r4, r5, r6, pc}
 8005ee8:	42a3      	cmp	r3, r4
 8005eea:	d908      	bls.n	8005efe <_free_r+0x42>
 8005eec:	6820      	ldr	r0, [r4, #0]
 8005eee:	1821      	adds	r1, r4, r0
 8005ef0:	428b      	cmp	r3, r1
 8005ef2:	d1f3      	bne.n	8005edc <_free_r+0x20>
 8005ef4:	6819      	ldr	r1, [r3, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	1809      	adds	r1, r1, r0
 8005efa:	6021      	str	r1, [r4, #0]
 8005efc:	e7ee      	b.n	8005edc <_free_r+0x20>
 8005efe:	001a      	movs	r2, r3
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d001      	beq.n	8005f0a <_free_r+0x4e>
 8005f06:	42a3      	cmp	r3, r4
 8005f08:	d9f9      	bls.n	8005efe <_free_r+0x42>
 8005f0a:	6811      	ldr	r1, [r2, #0]
 8005f0c:	1850      	adds	r0, r2, r1
 8005f0e:	42a0      	cmp	r0, r4
 8005f10:	d10b      	bne.n	8005f2a <_free_r+0x6e>
 8005f12:	6820      	ldr	r0, [r4, #0]
 8005f14:	1809      	adds	r1, r1, r0
 8005f16:	1850      	adds	r0, r2, r1
 8005f18:	6011      	str	r1, [r2, #0]
 8005f1a:	4283      	cmp	r3, r0
 8005f1c:	d1e0      	bne.n	8005ee0 <_free_r+0x24>
 8005f1e:	6818      	ldr	r0, [r3, #0]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	1841      	adds	r1, r0, r1
 8005f24:	6011      	str	r1, [r2, #0]
 8005f26:	6053      	str	r3, [r2, #4]
 8005f28:	e7da      	b.n	8005ee0 <_free_r+0x24>
 8005f2a:	42a0      	cmp	r0, r4
 8005f2c:	d902      	bls.n	8005f34 <_free_r+0x78>
 8005f2e:	230c      	movs	r3, #12
 8005f30:	602b      	str	r3, [r5, #0]
 8005f32:	e7d5      	b.n	8005ee0 <_free_r+0x24>
 8005f34:	6820      	ldr	r0, [r4, #0]
 8005f36:	1821      	adds	r1, r4, r0
 8005f38:	428b      	cmp	r3, r1
 8005f3a:	d103      	bne.n	8005f44 <_free_r+0x88>
 8005f3c:	6819      	ldr	r1, [r3, #0]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	1809      	adds	r1, r1, r0
 8005f42:	6021      	str	r1, [r4, #0]
 8005f44:	6063      	str	r3, [r4, #4]
 8005f46:	6054      	str	r4, [r2, #4]
 8005f48:	e7ca      	b.n	8005ee0 <_free_r+0x24>
 8005f4a:	46c0      	nop			; (mov r8, r8)
 8005f4c:	200001c4 	.word	0x200001c4

08005f50 <_init>:
 8005f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f52:	46c0      	nop			; (mov r8, r8)
 8005f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f56:	bc08      	pop	{r3}
 8005f58:	469e      	mov	lr, r3
 8005f5a:	4770      	bx	lr

08005f5c <_fini>:
 8005f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f5e:	46c0      	nop			; (mov r8, r8)
 8005f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f62:	bc08      	pop	{r3}
 8005f64:	469e      	mov	lr, r3
 8005f66:	4770      	bx	lr
